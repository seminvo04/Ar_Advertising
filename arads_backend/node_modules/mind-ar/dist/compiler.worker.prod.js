/*! For license information please see compiler.worker.prod.js.LICENSE.txt */
(()=>{var e={563:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>Ge,Acos:()=>He,Acosh:()=>je,AdadeltaOptimizer:()=>Fo,AdagradOptimizer:()=>Oo,AdamOptimizer:()=>zo,AdamaxOptimizer:()=>Go,Add:()=>qe,AddN:()=>Ke,All:()=>Xe,Any:()=>Ye,ArgMax:()=>Je,ArgMin:()=>Ze,Asin:()=>Qe,Asinh:()=>et,Atan:()=>tt,Atan2:()=>st,Atanh:()=>nt,AvgPool:()=>rt,AvgPool3D:()=>it,AvgPool3DGrad:()=>ot,AvgPoolGrad:()=>at,BatchMatMul:()=>lt,BatchToSpaceND:()=>ut,Bincount:()=>ct,BroadcastTo:()=>ht,Callback:()=>pv,CallbackList:()=>my,Cast:()=>pt,Ceil:()=>dt,ClipByValue:()=>ft,Complex:()=>mt,ComplexAbs:()=>gt,Concat:()=>yt,Conv2D:()=>bt,Conv2DBackpropFilter:()=>xt,Conv2DBackpropInput:()=>wt,Conv3D:()=>kt,Conv3DBackpropFilterV2:()=>vt,Conv3DBackpropInputV2:()=>It,Cos:()=>Nt,Cosh:()=>St,CropAndResize:()=>$t,Cumsum:()=>Ct,CustomCallback:()=>by,DataStorage:()=>U,DenseBincount:()=>Tt,DepthToSpace:()=>Et,DepthwiseConv2dNative:()=>At,DepthwiseConv2dNativeBackpropFilter:()=>Rt,DepthwiseConv2dNativeBackpropInput:()=>Dt,Diag:()=>Ft,Dilation2D:()=>_t,Dilation2DBackpropFilter:()=>Mt,Dilation2DBackpropInput:()=>Ot,ENV:()=>We,EarlyStopping:()=>mv,Elu:()=>zt,EluGrad:()=>Pt,Environment:()=>ze,Equal:()=>Wt,Erf:()=>Bt,Exp:()=>Vt,ExpandDims:()=>Ut,Expm1:()=>Gt,FFT:()=>Ht,Fill:()=>jt,FlipLeftRight:()=>qt,Floor:()=>Kt,FloorDiv:()=>Xt,FromPixels:()=>Os,FusedBatchNorm:()=>Yt,FusedConv2D:()=>zs,FusedDepthwiseConv2D:()=>Ps,GatherNd:()=>Zt,GatherV2:()=>Jt,GraphModel:()=>CI,Greater:()=>Qt,GreaterEqual:()=>en,History:()=>yy,IFFT:()=>nn,Identity:()=>tn,Imag:()=>sn,InputSpec:()=>ny,IsFinite:()=>rn,IsInf:()=>an,IsNan:()=>on,KernelBackend:()=>G,LRN:()=>bn,LRNGrad:()=>xn,LayerVariable:()=>Qg,LayersModel:()=>Ib,LeakyRelu:()=>ln,Less:()=>un,LessEqual:()=>cn,LinSpace:()=>hn,Log:()=>pn,Log1p:()=>dn,LogSoftmax:()=>yn,LogicalAnd:()=>fn,LogicalNot:()=>mn,LogicalOr:()=>gn,Max:()=>wn,MaxPool:()=>vn,MaxPool3D:()=>Nn,MaxPool3DGrad:()=>Sn,MaxPoolGrad:()=>In,MaxPoolWithArgmax:()=>Cn,Maximum:()=>kn,Mean:()=>$n,Min:()=>Tn,Minimum:()=>En,MirrorPad:()=>An,Mod:()=>Rn,MomentumOptimizer:()=>jo,Multinomial:()=>Dn,Multiply:()=>Fn,Neg:()=>_n,NonMaxSuppressionV3:()=>Mn,NonMaxSuppressionV4:()=>Ln,NonMaxSuppressionV5:()=>zn,NotEqual:()=>On,OP_SCOPE_SUFFIX:()=>Ur,OneHot:()=>Bn,OnesLike:()=>Pn,Optimizer:()=>Do,Pack:()=>Wn,PadV2:()=>Vn,Pool:()=>Un,Pow:()=>Gn,Prelu:()=>Hn,Prod:()=>jn,RMSPropOptimizer:()=>qo,RNN:()=>$x,Range:()=>qn,Rank:()=>yr,Real:()=>Kn,RealDiv:()=>Lt,Reciprocal:()=>Xn,Reduction:()=>Cp,Relu:()=>Yn,Relu6:()=>ns,Reshape:()=>Jn,ResizeBilinear:()=>es,ResizeBilinearGrad:()=>ts,ResizeNearestNeighbor:()=>Zn,ResizeNearestNeighborGrad:()=>Qn,Reverse:()=>ss,RotateWithOffset:()=>Ms,Round:()=>rs,Rsqrt:()=>as,SGDOptimizer:()=>Ho,ScatterNd:()=>is,Select:()=>os,Selu:()=>ls,Sequential:()=>Cb,Sigmoid:()=>ds,Sign:()=>ps,Sin:()=>cs,Sinh:()=>hs,Slice:()=>us,Softmax:()=>xs,Softplus:()=>fs,SpaceToBatchND:()=>ys,SparseToDense:()=>Is,SplitV:()=>bs,Sqrt:()=>ms,Square:()=>ks,SquaredDifference:()=>ws,Step:()=>_s,StridedSlice:()=>Ns,Sub:()=>vs,Sum:()=>gs,SymbolicTensor:()=>sy,Tan:()=>Ss,Tanh:()=>Cs,Tensor:()=>mr,TensorBuffer:()=>hr,Tile:()=>$s,TopK:()=>Ts,Transpose:()=>Es,Unique:()=>As,Unpack:()=>Rs,UnsortedSegmentSum:()=>Ds,Variable:()=>gr,ZerosLike:()=>Fs,_FusedMatMul:()=>Ls,abs:()=>Po,acos:()=>Ko,acosh:()=>Xo,add:()=>yo,addN:()=>Yo,addStrict:()=>Sh,all:()=>Jo,any:()=>Zo,argMax:()=>Qo,argMin:()=>el,asin:()=>tl,asinh:()=>nl,atan:()=>sl,atan2:()=>rl,atanh:()=>al,avgPool:()=>wl,avgPool3d:()=>kl,backend:()=>mo,backend_util:()=>g,basicLSTMCell:()=>Cl,batchNorm:()=>Tl,batchNorm2d:()=>El,batchNorm3d:()=>Al,batchNorm4d:()=>Rl,batchToSpaceND:()=>$l,bincount:()=>Dl,booleanMaskAsync:()=>bh,broadcastTo:()=>Fl,browser:()=>l,buffer:()=>Pa,callbacks:()=>gv,cast:()=>Ba,ceil:()=>_l,clipByValue:()=>Ol,clone:()=>Wa,complex:()=>Hr,concat:()=>vl,concat1d:()=>Ml,concat2d:()=>Ll,concat3d:()=>zl,concat4d:()=>Pl,constraints:()=>b,conv1d:()=>Wl,conv2d:()=>Bl,conv2dTranspose:()=>Ul,conv3d:()=>Gl,conv3dTranspose:()=>jl,copyRegisteredKernels:()=>Xs,cos:()=>ql,cosh:()=>Kl,cosineWindow:()=>Vh,cumsum:()=>Xl,customGrad:()=>Eo,data:()=>W,denseBincount:()=>Yl,deprecationWarn:()=>Zi,depthToSpace:()=>Jl,depthwiseConv2d:()=>Zl,deregisterOp:()=>vv,device_util:()=>a,diag:()=>Ql,dilation2d:()=>eu,disableDeprecationWarnings:()=>Ji,dispose:()=>ro,disposeVariables:()=>Qi,div:()=>xo,divNoNan:()=>su,divStrict:()=>Ch,dot:()=>ru,dropout:()=>Bh,elu:()=>au,enableDebugMode:()=>Yi,enableProdMode:()=>Xi,enclosingPowerOfTwo:()=>Wh,engine:()=>eo,env:()=>Pe,equal:()=>tu,equalStrict:()=>xh,erf:()=>iu,exp:()=>ou,expandDims:()=>lu,expm1:()=>uu,eye:()=>hu,fft:()=>Kc,fill:()=>_o,findBackend:()=>ho,findBackendFactory:()=>po,floor:()=>pu,floorDiv:()=>bo,fused:()=>f,gather:()=>du,gatherND:()=>Ph,gather_util:()=>u,getBackend:()=>uo,getGradient:()=>Us,getKernel:()=>Vs,getKernelsForBackend:()=>Gs,grad:()=>No,grads:()=>So,greater:()=>fu,greaterEqual:()=>mu,greaterEqualStrict:()=>wh,greaterStrict:()=>kh,ifft:()=>Xc,imag:()=>gu,image:()=>zp,inTopKAsync:()=>Uh,initializers:()=>x,input:()=>Ab,io:()=>i,irfft:()=>Yc,isFinite:()=>yu,isInf:()=>bu,isNaN:()=>xu,keep:()=>ao,kernel_impls:()=>y,layers:()=>w,leakyRelu:()=>wu,less:()=>ku,lessEqual:()=>vu,lessEqualStrict:()=>vh,lessStrict:()=>Ih,linalg:()=>Pp,linspace:()=>Iu,loadGraphModel:()=>$I,loadLayersModel:()=>Eb,localResponseNormalization:()=>Nu,log:()=>Su,log1p:()=>Cu,logSigmoid:()=>Eu,logSoftmax:()=>Du,logSumExp:()=>Wu,logicalAnd:()=>Vu,logicalNot:()=>Uu,logicalOr:()=>Gu,logicalXor:()=>Hu,losses:()=>Bp,matMul:()=>ii,math:()=>o,max:()=>Au,maxPool:()=>ju,maxPool3d:()=>qu,maxPoolWithArgmax:()=>Ku,maximum:()=>Uo,maximumStrict:()=>$h,mean:()=>Xu,memory:()=>to,metrics:()=>k,min:()=>Yu,minimum:()=>Ju,minimumStrict:()=>Th,mirrorPad:()=>Zu,mod:()=>Qu,modStrict:()=>Eh,model:()=>$b,models:()=>v,moments:()=>ec,movingAverage:()=>Mh,mul:()=>wo,mulStrict:()=>Ah,multiRNNCell:()=>tc,multinomial:()=>nc,neg:()=>$u,nextFrame:()=>Gp,norm:()=>Oh,notEqual:()=>sc,notEqualStrict:()=>Nh,oneHot:()=>oi,ones:()=>ac,onesLike:()=>ic,op:()=>Gr,outerProduct:()=>oc,pad:()=>lc,pad1d:()=>uc,pad2d:()=>cc,pad3d:()=>hc,pad4d:()=>pc,pool:()=>fc,pow:()=>Mo,powStrict:()=>Rh,prelu:()=>mc,print:()=>Va,prod:()=>gc,profile:()=>no,rand:()=>yc,randomGamma:()=>vc,randomNormal:()=>Ic,randomUniform:()=>Nc,range:()=>Sc,ready:()=>lo,real:()=>Cc,reciprocal:()=>$c,registerBackend:()=>fo,registerCallbackConstructor:()=>Rb,registerGradient:()=>js,registerKernel:()=>Hs,registerOp:()=>wv,regularizers:()=>I,relu:()=>Tc,relu6:()=>Ec,removeBackend:()=>co,reshape:()=>xl,reverse:()=>Ac,reverse1d:()=>Rc,reverse2d:()=>Dc,reverse3d:()=>Fc,reverse4d:()=>_c,rfft:()=>Zc,round:()=>Oc,rsqrt:()=>Mc,scalar:()=>Ro,scatterND:()=>Lh,scatter_util:()=>c,selu:()=>Lc,separableConv2d:()=>zc,sequential:()=>Tb,serialization:()=>p,setBackend:()=>oo,setPlatform:()=>go,setdiff1dAsync:()=>Pc,sigmoid:()=>Il,sign:()=>Bc,signal:()=>Lp,sin:()=>Wc,sinh:()=>Vc,slice:()=>Nl,slice1d:()=>Uc,slice2d:()=>Gc,slice3d:()=>Hc,slice4d:()=>jc,slice_util:()=>h,softmax:()=>qc,softplus:()=>Tu,spaceToBatchND:()=>dc,sparseToDense:()=>zh,spectral:()=>Mp,split:()=>Jc,sqrt:()=>ko,square:()=>vo,squaredDifference:()=>Qc,squaredDifferenceStrict:()=>Dh,squeeze:()=>eh,stack:()=>th,step:()=>nh,stridedSlice:()=>sh,sub:()=>Lo,subStrict:()=>Fh,sum:()=>Ru,sumOutType:()=>Nr,tan:()=>rh,tanh:()=>Sl,tensor:()=>qr,tensor1d:()=>ah,tensor2d:()=>ih,tensor3d:()=>ci,tensor4d:()=>oh,tensor5d:()=>lh,tensor6d:()=>uh,tensor_util:()=>r,test_util:()=>d,tidy:()=>so,tile:()=>cu,time:()=>io,topk:()=>ch,train:()=>Vp,transpose:()=>li,truncatedNormal:()=>hh,unique:()=>ph,unregisterGradient:()=>Ks,unregisterKernel:()=>qs,unsortedSegmentSum:()=>dh,unstack:()=>fh,upcastType:()=>Ir,util:()=>s,valueAndGrad:()=>Co,valueAndGrads:()=>$o,variable:()=>mh,variableGrads:()=>To,version:()=>wz,version_converter:()=>TI,version_core:()=>Ki,version_layers:()=>Zy,where:()=>nu,whereAsync:()=>yh,zeros:()=>rc,zerosLike:()=>Io});var s={};n.r(s),n.d(s,{arraysEqual:()=>re,assert:()=>Z,assertNonNegativeIntegerDimensions:()=>_e,assertNonNull:()=>ee,assertShapesMatch:()=>Q,bytesFromStringArray:()=>ke,bytesPerElement:()=>we,checkConversionForErrors:()=>ge,clamp:()=>q,computeStrides:()=>Te,createScalarValue:()=>ar,createShuffledIndices:()=>le,decodeString:()=>cr,distSquared:()=>J,encodeString:()=>ur,fetch:()=>lr,flatten:()=>te,getArrayFromDType:()=>me,getTypedArrayFromDType:()=>fe,hasEncodingLoss:()=>be,indexToLoc:()=>Me,inferDtype:()=>Se,inferFromImplicitShape:()=>he,isBoolean:()=>Ie,isFunction:()=>Ce,isInt:()=>ae,isNumber:()=>Ne,isPromise:()=>Le,isScalarShape:()=>se,isString:()=>ve,isTypedArray:()=>xe,isValidDtype:()=>ye,locToIndex:()=>Oe,makeOnesTypedArray:()=>Re,makeZerosNestedTypedArray:()=>Fe,makeZerosTypedArray:()=>De,nearestDivisor:()=>$e,nearestLargerEven:()=>K,now:()=>or,parseAxisParam:()=>pe,randUniform:()=>Y,repeatedTry:()=>ce,rightPad:()=>ue,shuffle:()=>j,sizeFromShape:()=>ne,sizeToSquarishShape:()=>oe,squeezeShape:()=>de,sum:()=>X,tanh:()=>ie,toNestedArray:()=>Ae,toTypedArray:()=>ir});var r={};n.r(r),n.d(r,{assertTypesMatch:()=>Cr,getTensorsInContainer:()=>Tr,isTensorInList:()=>$r,makeTypesMatch:()=>Sr});var a={};n.r(a),n.d(a,{isBrowser:()=>Mr,isMobile:()=>Or});var i={};n.r(i),n.d(i,{browserFiles:()=>ja,browserHTTPRequest:()=>ti,concatenateArrayBuffers:()=>ea,copyModel:()=>Oa,decodeWeights:()=>Yr,encodeWeights:()=>Xr,fromMemory:()=>ri,getLoadHandlers:()=>la,getModelArtifactsInfoForJSON:()=>na,getSaveHandlers:()=>oa,http:()=>ei,isHTTPScheme:()=>Za,listModels:()=>Fa,loadWeights:()=>Xa,moveModel:()=>Ma,registerLoadRouter:()=>ia,registerSaveRouter:()=>aa,removeModel:()=>_a,weightsLoaderFactory:()=>Ya,withSaveHandler:()=>ai});var o={};n.r(o),n.d(o,{confusionMatrix:()=>ui});var l={};n.r(l),n.d(l,{fromPixels:()=>di,toPixels:()=>pi});var u={};n.r(u),n.d(u,{prepareAndValidate:()=>fi});var c={};n.r(c),n.d(c,{calculateShapes:()=>yi,validateInput:()=>gi,validateUpdateShape:()=>mi});var h={};n.r(h),n.d(h,{assertParamsValid:()=>bi,computeFlatOffset:()=>Ri,computeOutShape:()=>wi,getNormalizedAxes:()=>Ni,isSliceContinous:()=>Ai,maskToAxes:()=>xi,parseSliceParams:()=>Di,sliceInfo:()=>Fi,startForAxis:()=>Ti,startIndicesWithElidedDims:()=>Si,stopForAxis:()=>Ei,stopIndicesWithElidedDims:()=>Ci,stridesForAxis:()=>$i,stridesWithElidedDims:()=>ki});var p={};n.r(p),n.d(p,{Serializable:()=>_i,SerializationMap:()=>Oi,registerClass:()=>Mi});var d={};n.r(d),n.d(d,{TEST_EPSILON_FLOAT16:()=>Li,encodeStrings:()=>qi,expectArrayBuffersEqual:()=>ji,expectArraysClose:()=>zi,expectArraysEqual:()=>Vi,expectNumbersClose:()=>Ui,expectPromiseToFail:()=>Wi,expectValuesInRange:()=>Hi,testEpsilon:()=>Pi});var f={};n.r(f),n.d(f,{conv2d:()=>Xh,depthwiseConv2d:()=>Zh,matMul:()=>Qh});var m={};n.r(m),n.d(m,{collectGatherOpShapeInfo:()=>vd,computeOutShape:()=>kd,segOpComputeOptimalWindowSize:()=>wd});var g={};n.r(g),n.d(g,{ERF_A1:()=>rd,ERF_A2:()=>ad,ERF_A3:()=>id,ERF_A4:()=>od,ERF_A5:()=>ld,ERF_P:()=>sd,PARALLELIZE_THRESHOLD:()=>qp,SELU_SCALE:()=>nd,SELU_SCALEALPHA:()=>td,applyActivation:()=>qh,assertAndGetBroadcastShape:()=>Vo,assertAxesAreInnerMostDims:()=>Lu,assertParamsConsistent:()=>Hp,assignToTypedArray:()=>gd,axesAreInnerMostDims:()=>Fu,calculateShapes:()=>yi,castTensor:()=>Id,combineLocations:()=>_u,complexWithEvenIndex:()=>dd,complexWithOddIndex:()=>fd,computeConv2DInfo:()=>ul,computeConv3DInfo:()=>cl,computeDefaultPad:()=>hl,computeDilation2DInfo:()=>il,computeOptimalWindowSize:()=>Kp,computeOutAndReduceShapes:()=>Ou,computeOutShape:()=>jp,computePool2DInfo:()=>ol,computePool3DInfo:()=>ll,convertConv2DDataFormat:()=>bl,eitherStridesOrDilationsAreOne:()=>yl,expandShapeToKeepDim:()=>Mu,exponent:()=>bd,exponents:()=>yd,fromStringArrayToUint8:()=>Cd,fromUint8ToStringArray:()=>Sd,getAxesPermutation:()=>zu,getBroadcastDims:()=>Bo,getComplexWithIndex:()=>md,getFusedBiasGradient:()=>jh,getFusedDyActivation:()=>Hh,getImageCenter:()=>Xp,getInnerMostAxes:()=>Bu,getPermuted:()=>Jp,getReductionAxes:()=>Wo,getReshaped:()=>Yp,getReshapedPermuted:()=>Zp,getSliceBeginCoords:()=>Qp,getSliceSize:()=>ed,getUndoAxesPermutation:()=>Pu,log:()=>cd,mergeRealAndImagArrays:()=>hd,prepareAndValidate:()=>fi,prepareSplitSize:()=>xd,reshapeTensor:()=>Nd,segment_util:()=>m,shouldFuse:()=>Kh,slice_util:()=>h,splitRealAndImagArrays:()=>pd,tupleValuesAreOne:()=>gl,upcastType:()=>Ir,validateInput:()=>gi,validateUpdateShape:()=>mi,warn:()=>ud});var y={};n.r(y),n.d(y,{nonMaxSuppressionV3Impl:()=>hp,nonMaxSuppressionV4Impl:()=>pp,nonMaxSuppressionV5Impl:()=>dp,whereImpl:()=>gh});var b={};n.r(b),n.d(b,{maxNorm:()=>km,minMaxNorm:()=>Nm,nonNeg:()=>Im,unitNorm:()=>vm});var x={};n.r(x),n.d(x,{constant:()=>Rg,glorotNormal:()=>zg,glorotUniform:()=>Lg,heNormal:()=>Pg,heUniform:()=>Bg,identity:()=>Og,leCunNormal:()=>Wg,leCunUniform:()=>Vg,ones:()=>Ag,orthogonal:()=>Ug,randomNormal:()=>Fg,randomUniform:()=>Dg,truncatedNormal:()=>_g,varianceScaling:()=>Mg,zeros:()=>Eg});var w={};n.r(w),n.d(w,{Layer:()=>oy,RNN:()=>$x,RNNCell:()=>Tx,activation:()=>qw,add:()=>nk,alphaDropout:()=>jk,average:()=>sk,averagePooling1d:()=>pk,averagePooling2d:()=>mk,averagePooling3d:()=>bk,avgPool1d:()=>dk,avgPool2d:()=>gk,avgPool3d:()=>xk,avgPooling1d:()=>fk,avgPooling2d:()=>yk,avgPooling3d:()=>wk,batchNormalization:()=>uk,bidirectional:()=>zk,concatenate:()=>rk,conv1d:()=>Pw,conv2d:()=>Bw,conv2dTranspose:()=>Ww,conv3d:()=>Vw,convLstm2d:()=>_k,convLstm2dCell:()=>Ok,cropping2D:()=>Gw,dense:()=>Kw,depthwiseConv2d:()=>jw,dot:()=>lk,dropout:()=>Xw,elu:()=>Fw,embedding:()=>tk,flatten:()=>Jw,gaussianDropout:()=>Hk,gaussianNoise:()=>Gk,globalAveragePooling1d:()=>kk,globalAveragePooling2d:()=>vk,globalMaxPool1d:()=>Bk,globalMaxPool2d:()=>Wk,globalMaxPooling1d:()=>Ik,globalMaxPooling2d:()=>Nk,gru:()=>Tk,gruCell:()=>Ek,input:()=>Ab,inputLayer:()=>Dw,layerNormalization:()=>ck,leakyReLU:()=>Ow,lstm:()=>Ak,lstmCell:()=>Rk,masking:()=>qk,maxPool1d:()=>Vk,maxPool2d:()=>Uk,maxPooling1d:()=>Sk,maxPooling2d:()=>Ck,maxPooling3d:()=>$k,maximum:()=>ak,minimum:()=>ik,multiply:()=>ok,permute:()=>ek,prelu:()=>Mw,reLU:()=>_w,repeatVector:()=>Zw,reshape:()=>Qw,rnn:()=>Mk,separableConv2d:()=>Uw,simpleRNN:()=>Dk,simpleRNNCell:()=>Fk,softmax:()=>Lw,spatialDropout1d:()=>Yw,stackedRNNCells:()=>Lk,thresholdedReLU:()=>zw,timeDistributed:()=>Pk,upSampling2d:()=>Hw,zeroPadding2d:()=>hk});var k={};n.r(k),n.d(k,{MAPE:()=>rv,MSE:()=>ov,binaryAccuracy:()=>Kk,binaryCrossentropy:()=>Xk,categoricalAccuracy:()=>Jk,categoricalCrossentropy:()=>Zk,cosineProximity:()=>tv,mape:()=>av,meanAbsoluteError:()=>nv,meanAbsolutePercentageError:()=>sv,meanSquaredError:()=>iv,mse:()=>lv,precision:()=>Qk,recall:()=>ev,sparseCategoricalAccuracy:()=>Yk});var v={};n.r(v),n.d(v,{modelFromJSON:()=>Sb});var I={};n.r(I),n.d(I,{l1:()=>cv,l1l2:()=>uv,l2:()=>hv});var N={};n.r(N),n.d(N,{json:()=>Av});var S={};n.r(S),n.d(S,{json:()=>Rv});var C={};n.r(C),n.d(C,{json:()=>Dv});var $={};n.r($),n.d($,{json:()=>Fv});var T={};n.r(T),n.d(T,{json:()=>_v});var E={};n.r(E),n.d(E,{json:()=>Ov});var A={};n.r(A),n.d(A,{json:()=>Mv});var R={};n.r(R),n.d(R,{json:()=>Lv});var D={};n.r(D),n.d(D,{json:()=>zv});var F={};n.r(F),n.d(F,{json:()=>Pv});var _={};n.r(_),n.d(_,{json:()=>Bv});var O={};n.r(O),n.d(O,{json:()=>Wv});var M={};n.r(M),n.d(M,{json:()=>Vv});var L={};n.r(L),n.d(L,{json:()=>Uv});var z={};n.r(z),n.d(z,{json:()=>Gv});var P={};n.r(P),n.d(P,{json:()=>Hv});var B={};n.r(B),n.d(B,{json:()=>jv});var W={};n.r(W),n.d(W,{CSVDataset:()=>gN,Dataset:()=>rN,FileDataSource:()=>TN,TextLineDataset:()=>uN,URLDataSource:()=>EN,array:()=>iN,csv:()=>AN,func:()=>RN,generator:()=>DN,microphone:()=>_N,version_data:()=>ON,webcam:()=>FN,zip:()=>oN});var V={};n.r(V),n.d(V,{addImpl:()=>hS,bincountImpl:()=>sC,bincountReduceImpl:()=>rC,ceilImpl:()=>oC,concatImpl:()=>dC,expImpl:()=>QC,expm1Impl:()=>r$,floorImpl:()=>S$,gatherV2Impl:()=>_$,greaterImpl:()=>M$,lessImpl:()=>X$,linSpaceImpl:()=>tT,logImpl:()=>sT,maxImpl:()=>bT,maximumImpl:()=>kT,minimumImpl:()=>FT,multiplyImpl:()=>o$,negImpl:()=>UT,notEqualImpl:()=>JT,prodImpl:()=>cE,rangeImpl:()=>pE,rsqrtImpl:()=>NE,simpleAbsImpl:()=>wS,sliceImpl:()=>QS,squaredDifferenceImpl:()=>JE,stridedSliceImpl:()=>nA,subImpl:()=>f$,tileImpl:()=>oA,topKImpl:()=>lA,transposeImpl:()=>$S,uniqueImpl:()=>uA});class U{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class G{decComplexRef(e){}time(e){return H("time")}read(e){return H("read")}readSync(e){return H("readSync")}numDataIds(){return H("numDataIds")}disposeData(e){return H("disposeData")}write(e,t,n){return H("write")}move(e,t,n,s){return H("move")}memory(){return H("memory")}floatPrecision(){return H("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}batchMatMul(e,t,n,s){return H("batchMatMul")}fusedBatchMatMul({a:e,b:t,transposeA:n,transposeB:s,bias:r,activation:a,preluActivationWeights:i}){return H("fusedBatchMatMul")}slice(e,t,n){return H("slice")}stridedSlice(e,t,n,s){return H("stridedSlice")}unstack(e,t){return H("unstack")}reverse(e,t){return H("reverse")}concat(e,t){return H("concat")}neg(e){return H("neg")}add(e,t){return H("add")}addN(e){return H("addN")}subtract(e,t){return H("subtract")}multiply(e,t){return H("multiply")}realDivide(e,t){return H("realDivide")}floorDiv(e,t){return H("floorDiv")}sum(e,t){return H("sum")}prod(e,t){return H("prod")}unsortedSegmentSum(e,t,n){return H("unsortedSegmentSum")}argMin(e,t){return H("argMin")}argMax(e,t){return H("argMax")}equal(e,t){return H("equal")}notEqual(e,t){return H("notEqual")}less(e,t){return H("less")}lessEqual(e,t){return H("lessEqual")}greater(e,t){return H("greater")}greaterEqual(e,t){return H("greaterEqual")}logicalNot(e){return H("logicalNot")}logicalAnd(e,t){return H("logicalAnd")}logicalOr(e,t){return H("logicalOr")}where(e){return H("where")}select(e,t,n){return H("select")}topk(e,t,n){return H("topk")}min(e,t){return H("min")}minimum(e,t){return H("minimum")}mod(e,t){return H("mod")}max(e,t){return H("max")}maximum(e,t){return H("maximum")}all(e,t){return H("all")}any(e,t){return H("any")}squaredDifference(e,t){return H("squaredDifference")}ceil(e){return H("ceil")}floor(e){return H("floor")}round(e){return H("round")}sign(e){return H("sign")}isNaN(e){return H("isNaN")}isInf(e){return H("isInf")}isFinite(e){return H("isFinite")}pow(e,t){return H("pow")}exp(e){return H("exp")}expm1(e){return H("expm1")}softmax(e,t){return H("softmax")}log(e){return H("log")}log1p(e){return H("log1p")}sqrt(e){return H("sqrt")}rsqrt(e){return H("rsqrt")}square(e){return H("square")}reciprocal(e){return H("reciprocal")}relu(e){return H("relu")}relu6(e){return H("relu6")}prelu(e,t){return H("prelu")}elu(e){return H("elu")}eluDer(e,t){return H("eluDer")}selu(e){return H("selu")}int(e){return H("int")}clip(e,t,n){return H("clip")}abs(e){return H("abs")}complexAbs(e){return H("complexAbs")}sigmoid(e){return H("sigmoid")}softplus(e){return H("softplus")}sin(e){return H("sin")}cos(e){return H("cos")}tan(e){return H("tan")}asin(e){return H("asin")}acos(e){return H("acos")}atan(e){return H("atan")}atan2(e,t){return H("atan2")}sinh(e){return H("sinh")}cosh(e){return H("cosh")}tanh(e){return H("tanh")}asinh(e){return H("asinh")}acosh(e){return H("acosh")}atanh(e){return H("atanh")}erf(e){return H("erf")}step(e,t){return H("step")}fusedConv2d({input:e,filter:t,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){return H("fusedConv2d")}conv2d(e,t,n){return H("conv2d")}conv2dDerInput(e,t,n){return H("conv2dDerInput")}conv2dDerFilter(e,t,n){return H("conv2dDerFilter")}fusedDepthwiseConv2D({input:e,filter:t,convInfo:n,bias:s,activation:r,preluActivationWeights:a}){return H("fusedDepthwiseConv2D")}depthwiseConv2D(e,t,n){return H("depthwiseConv2D")}depthwiseConv2DDerInput(e,t,n){return H("depthwiseConv2DDerInput")}depthwiseConv2DDerFilter(e,t,n){return H("depthwiseConv2DDerFilter")}conv3d(e,t,n){return H("conv3d")}conv3dDerInput(e,t,n){return H("conv3dDerInput")}conv3dDerFilter(e,t,n){return H("conv3dDerFilter")}maxPool(e,t){return H("maxPool")}maxPoolBackprop(e,t,n,s){return H("maxPoolBackprop")}avgPool(e,t){return H("avgPool")}avgPoolBackprop(e,t,n){return H("avgPoolBackprop")}avgPool3d(e,t){return H("avgPool3d")}avgPool3dBackprop(e,t,n){return H("avgPool3dBackprop")}maxPool3d(e,t){return H("maxPool3d")}maxPool3dBackprop(e,t,n,s){return H("maxPool3dBackprop")}reshape(e,t){return H("reshape")}cast(e,t){return H("cast")}tile(e,t){return H("tile")}pad(e,t,n){return H("pad")}transpose(e,t){return H("transpose")}gather(e,t,n,s=0){return H("gather")}gatherND(e,t){return H("gatherND")}scatterND(e,t,n){return H("scatterND")}batchToSpaceND(e,t,n){return H("batchToSpaceND")}spaceToBatchND(e,t,n){return H("spaceToBatchND")}resizeBilinear(e,t,n,s,r){return H("resizeBilinear")}resizeBilinearBackprop(e,t,n){return H("resizeBilinearBackprop")}resizeNearestNeighbor(e,t,n,s,r){return H("resizeNearestNeighbor")}resizeNearestNeighborBackprop(e,t,n){return H("resizeNearestNeighborBackprop")}batchNorm(e,t,n,s,r,a){return H("batchNorm")}localResponseNormalization4D(e,t,n,s,r){return H("localResponseNormalization4D")}LRNGrad(e,t,n,s,r,a,i){return H("LRNGrad")}multinomial(e,t,n,s){return H("multinomial")}oneHot(e,t,n,s){return H("oneHot")}cumsum(e,t,n,s){return H("cumsum")}nonMaxSuppression(e,t,n,s,r){return H("nonMaxSuppression")}fft(e){return H("fft")}ifft(e){return H("ifft")}complex(e,t){return H("complex")}real(e){return H("real")}imag(e){return H("imag")}cropAndResize(e,t,n,s,r,a){return H("cropAndResize")}depthToSpace(e,t,n){return H("depthToSpace")}split(e,t,n){return H("split")}sparseToDense(e,t,n,s){return H("sparseToDense")}diag(e){return H("diag")}fill(e,t,n){return H("fill")}onesLike(e){return H("onesLike")}zerosLike(e){return H("zerosLike")}linspace(e,t,n){return H("linspace")}dispose(){return H("dispose")}}function H(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function j(e){let t=e.length,n=0,s=0;for(;t>0;)s=Math.random()*t|0,t--,n=e[t],e[t]=e[s],e[s]=n}function q(e,t,n){return Math.max(e,Math.min(t,n))}function K(e){return e%2==0?e:e+1}function X(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function Y(e,t){const n=Math.random();return t*n+(1-n)*e}function J(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function Z(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function Q(e,t,n=""){Z(re(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function ee(e){Z(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function te(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||xe(e)&&!n)for(let s=0;s<e.length;++s)te(e[s],t,n);else t.push(e);return t}function ne(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function se(e){return 0===e.length}function re(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ae(e){return e%1==0}function ie(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function oe(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function le(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return j(t),t}function ue(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function ce(e,t=(e=>0),n){return new Promise(((s,r)=>{let a=0;const i=()=>{if(e())return void s();a++;const o=t(a);null!=n&&a>=n?r():setTimeout(i,o)};i()}))}function he(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function pe(e,t){const n=t.length;return Z((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),Z(e.every((e=>ae(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function de(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:pe(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function fe(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function me(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function ge(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function ye(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function be(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function xe(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array}function we(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function ke(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function ve(e){return"string"==typeof e||e instanceof String}function Ie(e){return"boolean"==typeof e}function Ne(e){return"number"==typeof e}function Se(e){return Array.isArray(e)?Se(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array?"int32":Ne(e)?"float32":ve(e)?"string":Ie(e)?"bool":"float32"}function Ce(e){return!!(e&&e.constructor&&e.call&&e.apply)}function $e(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function Te(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function Ee(e,t,n){const s=new Array;if(1===t.length){const r=t[0];for(let t=0;t<r;t++)s[t]=n[e+t]}else{const r=t[0],a=t.slice(1),i=a.reduce(((e,t)=>e*t));for(let t=0;t<r;t++)s[t]=Ee(e+t*i,a,n)}return s}function Ae(e,t){if(0===e.length)return t[0];const n=e.reduce(((e,t)=>e*t));if(0===n)return[];if(n!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}.`);return Ee(0,e,t)}function Re(e,t){const n=De(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function De(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Fe(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Ae(e,new Float32Array(n));if("int32"===t)return Ae(e,new Int32Array(n));if("bool"===t)return Ae(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function _e(e){e.forEach((t=>{Z(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function Oe(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function Me(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function Le(e){return e&&e.then&&"function"==typeof e.then}class ze{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Le(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=function(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function Pe(){return We}let Be,We=null;function Ve(){if(null==Be){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Be=e}return Be}function Ue(e,t){const n=function(){const e=Ve();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const Ge="Abs",He="Acos",je="Acosh",qe="Add",Ke="AddN",Xe="All",Ye="Any",Je="ArgMax",Ze="ArgMin",Qe="Asin",et="Asinh",tt="Atan",nt="Atanh",st="Atan2",rt="AvgPool",at="AvgPoolGrad",it="AvgPool3D",ot="AvgPool3DGrad",lt="BatchMatMul",ut="BatchToSpaceND",ct="Bincount",ht="BroadcastTo",pt="Cast",dt="Ceil",ft="ClipByValue",mt="Complex",gt="ComplexAbs",yt="Concat",bt="Conv2D",xt="Conv2DBackpropFilter",wt="Conv2DBackpropInput",kt="Conv3D",vt="Conv3DBackpropFilterV2",It="Conv3DBackpropInputV2",Nt="Cos",St="Cosh",Ct="Cumsum",$t="CropAndResize",Tt="DenseBincount",Et="DepthToSpace",At="DepthwiseConv2dNative",Rt="DepthwiseConv2dNativeBackpropFilter",Dt="DepthwiseConv2dNativeBackpropInput",Ft="Diag",_t="Dilation2D",Ot="Dilation2DBackpropInput",Mt="Dilation2DBackpropFilter",Lt="RealDiv",zt="Elu",Pt="EluGrad",Bt="Erf",Wt="Equal",Vt="Exp",Ut="ExpandDims",Gt="Expm1",Ht="FFT",jt="Fill",qt="FlipLeftRight",Kt="Floor",Xt="FloorDiv",Yt="FusedBatchNorm",Jt="GatherV2",Zt="GatherNd",Qt="Greater",en="GreaterEqual",tn="Identity",nn="IFFT",sn="Imag",rn="IsFinite",an="IsInf",on="IsNan",ln="LeakyRelu",un="Less",cn="LessEqual",hn="LinSpace",pn="Log",dn="Log1p",fn="LogicalAnd",mn="LogicalNot",gn="LogicalOr",yn="LogSoftmax",bn="LRN",xn="LRNGrad",wn="Max",kn="Maximum",vn="MaxPool",In="MaxPoolGrad",Nn="MaxPool3D",Sn="MaxPool3DGrad",Cn="MaxPoolWithArgmax",$n="Mean",Tn="Min",En="Minimum",An="MirrorPad",Rn="Mod",Dn="Multinomial",Fn="Multiply",_n="Neg",On="NotEqual",Mn="NonMaxSuppressionV3",Ln="NonMaxSuppressionV4",zn="NonMaxSuppressionV5",Pn="OnesLike",Bn="OneHot",Wn="Pack",Vn="PadV2",Un="Pool",Gn="Pow",Hn="Prelu",jn="Prod",qn="Range",Kn="Real",Xn="Reciprocal",Yn="Relu",Jn="Reshape",Zn="ResizeNearestNeighbor",Qn="ResizeNearestNeighborGrad",es="ResizeBilinear",ts="ResizeBilinearGrad",ns="Relu6",ss="Reverse",rs="Round",as="Rsqrt",is="ScatterNd",os="Select",ls="Selu",us="Slice",cs="Sin",hs="Sinh",ps="Sign",ds="Sigmoid",fs="Softplus",ms="Sqrt",gs="Sum",ys="SpaceToBatchND",bs="SplitV",xs="Softmax",ws="SquaredDifference",ks="Square",vs="Sub",Is="SparseToDense",Ns="StridedSlice",Ss="Tan",Cs="Tanh",$s="Tile",Ts="TopK",Es="Transpose",As="Unique",Rs="Unpack",Ds="UnsortedSegmentSum",Fs="ZerosLike",_s="Step",Os="FromPixels",Ms="RotateWithOffset",Ls="_FusedMatMul",zs="FusedConv2D",Ps="FusedDepthwiseConv2D",Bs=Ue("kernelRegistry",(()=>new Map)),Ws=Ue("gradRegistry",(()=>new Map));function Vs(e,t){const n=Ys(e,t);return Bs.get(n)}function Us(e){return Ws.get(e)}function Gs(e){const t=Bs.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function Hs(e){const{kernelName:t,backendName:n}=e,s=Ys(t,n);Bs.has(s)&&console.warn(`The kernel '${t}' for backend '${n}' is already registered`),Bs.set(s,e)}function js(e){const{kernelName:t}=e;Ws.has(t)&&Pe().getBool("DEBUG")&&console.warn(`Overriding the gradient for '${t}'`),Ws.set(t,e)}function qs(e,t){const n=Ys(e,t);if(!Bs.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);Bs.delete(n)}function Ks(e){if(!Ws.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Ws.delete(e)}function Xs(e,t){Gs(e).forEach((e=>{Hs(Object.assign({},e,{backendName:t}))}))}function Ys(e,t){return`${t}_${e}`}class Js{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Qs)}profileKernel(e,t,n){let s;const r=this.backendTimer.time((()=>{s=n()}));if(Pe().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{Zs(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:r.then((e=>e.kernelMs)),extraInfo:r.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function Zs(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class Qs{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?ue(`${s}ms`,9):s.error,o=ue(e,25),l=t.rank,u=t.size,c=ue(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function er(e,t,n,s){const r=Te(t),a=function(e,t,n,s){const r=ne(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?rr(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],tr(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=sr(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function tr(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:ve(e)?`'${e}'`:"bool"===n?nr(e):parseFloat(e.toFixed(7)).toString(),ue(s,t)}function nr(e){return 0===e?"false":"true"}function sr(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[tr(rr(e)[0],0,n)]:"bool"===n?[nr(e[0])]:[e[0].toString()];if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=rr(s),a=rr(a)),["["+s.map(((e,t)=>tr(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>tr(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?rr(e):Array.from(e)).map(((e,t)=>tr(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;p.push(...sr(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;p.push(...sr(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...sr(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function rr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}function ar(e,t){return"string"===t?ur(e):ir([e],t)}function ir(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=te(e)),Pe().getBool("DEBUG")&&ge(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function or(){return Pe().platform.now()}function lr(e,t){return Pe().platform.fetch(e,t)}function ur(e,t="utf-8"){return t=t||"utf-8",Pe().platform.encode(e,t)}function cr(e,t="utf-8"){return t=t||"utf-8",Pe().platform.decode(e,t)}class hr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=ne(e),null!=n){const e=n.length;Z(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||me(t,this.size),this.strides=Te(e)}set(e,...t){0===t.length&&(t=[0]),Z(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return pr().makeTensor(this.values,this.shape,this.dtype)}}let pr=null,dr=null,fr=null;class mr{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=ne(e),this.strides=Te(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return dr.buffer(this.shape,this.dtype,e)}bufferSync(){return dr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Ae(this.shape,e)}arraySync(){return Ae(this.shape,this.dataSync())}async data(){this.throwIfDisposed();const e=pr().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>cr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataSync(){this.throwIfDisposed();const e=pr().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>cr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await pr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(pr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return dr.print(this,e)}clone(){return this.throwIfDisposed(),dr.clone(this)}toString(e=!1){return er(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),dr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),pr().makeVariable(this,e,t,n)}}Object.defineProperty(mr,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed});class gr extends mr{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!re(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);pr().disposeTensor(this),this.dataId=e.dataId,pr().incRef(this,null)}dispose(){pr().disposeVariable(this),this.isDisposedInternal=!0}}var yr,br,xr,wr,kr;Object.defineProperty(gr,Symbol.hasInstance,{value:e=>e instanceof mr&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(yr||(yr={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(br||(br={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(xr||(xr={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(wr||(wr={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(kr||(kr={}));const vr={float32:wr,int32:br,bool:xr,complex64:kr};function Ir(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return vr[e][t]}function Nr(e){return Ir(e,"int32")}function Sr(e,t){if(e.dtype===t.dtype)return[e,t];const n=Ir(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Cr(e,t){Z(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function $r(e,t){return t.some((t=>t.id===e.id))}function Tr(e){const t=[];return Er(e,t,new Set),t}function Er(e,t,n){if(null==e)return;if(e instanceof mr)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),Er(s,t,n))}}class Ar{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Rr{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ar}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(console.warn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Js(this.backendInstance),!0}setupRegisteredKernels(){Gs(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Gs(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof G||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,console.warn(`Initialization of backend ${e} failed`),console.warn(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return console.warn(`Initialization of backend ${e} failed`),console.warn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t);s.disposeData(t),n.backend=e,e.move(t,r,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Rr.nextTensorId++}nextVariableId(){return Rr.nextVariableId++}clone(e){const t=this.makeTensorFromDataId(e.dataId,e.shape,e.dtype),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t="float32",n={x:e},s={dtype:t};return Fr.runKernelFunc((n=>n.cast(e,t)),n,null,pt,s)}})),[],{}),t}runKernel(e,t,n,s,r){return this.runKernelFunc(null,t,null,e,n,s,r)}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e,t,n,s,r,a,i){let o,l=[];const u=this.isTapeOn();null==s&&(s=null!=this.state.activeScope?this.state.activeScope.name:"");const c=this.state.numBytes,h=this.state.numTensors;let p;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const d=Vs(s,this.backendName);let f,m;if(null!=d)p=()=>{const e=this.backend.numDataIds();f=d.kernelFunc({inputs:t,attrs:r,backend:this.backend});const n=Array.isArray(f)?f:[f];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,e,n);const o=n.map((e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:s}=e;return this.makeTensorFromDataId(t,n,s)}));if(u){let e=this.getTensorsForGradient(s,t,o);if(null==e){null==i&&(i=[]);const t=o.filter(((e,t)=>i[t]));e=(a||[]).slice().concat(t)}l=this.saveTensorsForBackwardMode(e)}return o};else{if(null==e)throw new Error(`Error running ${s}: Neither modular kernel nor forward func passed`);const t=e=>{u&&(l=e.map((e=>this.keep(this.clone(e)))))};p=()=>{const n=this.backend.numDataIds();f=this.tidy((()=>e(this.backend,t)));const r=Array.isArray(f)?f:[f];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(s,n,r),r}}return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(s,t,(()=>p())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),o=m.outputs):o=p()})),u&&this.addTapeNode(s,t,o,n,l,r),this.state.profiling&&this.state.activeProfile.kernels.push({name:s,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(t).map((e=>null!=t[e]?t[e].shape:null)),outputShapes:o.map((e=>e.shape)),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(f)?o:o[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=Us(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(Z(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return null}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&ve(e[0])&&(r=e.map((e=>ur(e))));const a=s.write(r,t,n),i=new mr(t,n,a,this.nextTensorId());if(this.incRef(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=ke(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r=new mr(t,n=n||"float32",e,this.nextTensorId());return this.incRef(r,s),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new gr(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}incRef(e,t){const n=this.state.tensorInfo.has(e.dataId)?this.state.tensorInfo.get(e.dataId).refCount:0;if(this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*we(e.dtype)),this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n,refCount:0}),this.state.numBytes+=n}this.state.tensorInfo.get(e.dataId).refCount++,e instanceof gr||this.track(e)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;this.state.numTensors--,"string"===e.dtype&&this.state.numStringTensors--;const t=this.state.tensorInfo.get(e.dataId);t.refCount<=1?("complex64"!==e.dtype&&(this.state.numBytes-=t.bytes),this.state.numDataBuffers--,t.backend.disposeData(e.dataId),this.state.tensorInfo.delete(e.dataId)):(t.backend.decComplexRef(e.dataId),this.state.tensorInfo.get(e.dataId).refCount--)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=Us(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=De(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Tr(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(Z(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));Z(r instanceof mr,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=Re(ne(e),"float32");return Fr.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!re(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),_r);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return Z(Ce(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;Z(t.every((e=>e instanceof mr)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc(((s,r)=>(n=e(...t,r),Z(n.value instanceof mr,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),Z(Ce(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value)),s,((e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];Z(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),Z(a.every((e=>e instanceof mr)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i}))}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}async time(e){const t=or(),n=await this.backend.time(e);return n.wallMs=or()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ar;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Dr(){const e=Ve();if(null==e._tfengine){const t=new ze(e);e._tfengine=new Rr(t)}var t;return t=e._tfengine.ENV,We=t,pr=()=>e._tfengine,e._tfengine}Rr.nextTensorId=0,Rr.nextVariableId=0;const Fr=Dr();function _r(e,t){const n={a:e,b:t};return Fr.runKernel(qe,n)}function Or(){if("undefined"!=typeof navigator&&null!=navigator){const e=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4))}return!1}function Mr(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Lr=Pe();function zr(e,t){let n=e;if(xe(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||xe(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&Pe().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Pr(e,s,[]),s}function Pr(e,t,n){if(n=n||[],!Array.isArray(e)&&!xe(e))return void Z(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));Z(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),Z(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)Pr(e[t],s,n.concat(t))}function Br(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Wr(e,t,n,s="numeric"){if(e instanceof mr)return Br(s,e.dtype,t,n),e;let r=Se(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Br(s,r,t,n),null==e||!xe(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=zr(e,r);xe(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?ir(e,r):te(e,[],!0);return Fr.makeTensor(i,a,r)}function Vr(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Wr(e,`${t}[${r}]`,n,s)))}Lr.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Lr.registerFlag("IS_BROWSER",(()=>Mr())),Lr.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Lr.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Lr.registerFlag("PROD",(()=>!1)),Lr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Lr.getBool("DEBUG"))),Lr.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Lr.registerFlag("IS_TEST",(()=>!1)),Lr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0));const Ur="__op";function Gr(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Ur;const r=(...e)=>{Fr.startScope(n);try{const t=s(...e);return Le(t)&&console.error("Cannot return a Promise inside of tidy."),Fr.endScope(t),t}catch(e){throw Fr.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const Hr=Gr({complex_:function(e,t){const n=Wr(e,"real","complex"),s=Wr(t,"imag","complex");Q(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Fr.runKernel(mt,r)}});function jr(e,t,n,s){if(null==s&&(s=Se(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!xe(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){_e(t);const e=ne(t),s=ne(n);Z(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==ne(t.slice(e));Z(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return xe(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?ir(e,s):te(e,[],!0),Fr.makeTensor(e,t,s)}function qr(e,t,n){return jr(e,t,zr(e,n),n)}const Kr={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Xr(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:Jr(await Promise.all(s)),specs:n}}function Yr(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=ne(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Kr[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=sa()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=ne(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=Kr[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=qr(e,o,"float32"),i=qr(s,o,"float32");n[t]=Hr(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=qr(u,o,i))}return n}function Jr(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const Zr="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Qr(e){return Zr?Buffer.byteLength(e):new Blob([e]).size}function ea(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function ta(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function na(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:Qr(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:Qr(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function sa(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class ra{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==ra.instance&&(ra.instance=new ra),ra.instance}static registerSaveRouter(e){ra.getInstance().saveRouters.push(e)}static registerLoadRouter(e){ra.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return ra.getHandlers(e,"save")}static getLoadHandlers(e,t){return ra.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?ra.getInstance().loadRouters:ra.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const aa=e=>ra.registerSaveRouter(e),ia=e=>ra.registerLoadRouter(e),oa=e=>ra.getSaveHandlers(e),la=(e,t)=>ra.getLoadHandlers(e,t),ua="tensorflowjs",ca="models_store",ha="model_info_store";function pa(){if(!Pe().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function da(e){const t=e.result;t.createObjectStore(ca,{keyPath:"modelPath"}),t.createObjectStore(ha,{keyPath:"modelPath"})}class fa{constructor(e){if(this.indexedDB=pa(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(ua,1);s.onupgradeneeded=()=>da(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(ca,"readonly"),s=t.objectStore(ca).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=na(t),a=r.transaction(ha,"readwrite");let i=a.objectStore(ha);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=r.transaction(ca,"readwrite");const o=l.objectStore(ca).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=a.objectStore(ha);const t=i.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(o.error)),t.onerror=e=>(r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}fa.URL_SCHEME="indexeddb://";const ma=e=>{return Pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(fa.URL_SCHEME)?(t=e.slice(fa.URL_SCHEME.length),new fa(t)):null;var t};ra.registerSaveRouter(ma),ra.registerLoadRouter(ma);class ga{constructor(){this.indexedDB=pa()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(ua,1);n.onupgradeneeded=()=>da(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(ha,"readonly"),a=r.objectStore(ha).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(fa.URL_SCHEME)?t.slice(fa.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(ua,1);s.onupgradeneeded=()=>da(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(ha,"readwrite"),i=a.objectStore(ha),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(ca,"readwrite");const s=l.objectStore(ca).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const ya="/",ba="tensorflowjs_models",xa="info",wa="model_topology",ka="weight_specs",va="weight_data",Ia="model_metadata";function Na(e){return{info:[ba,e,xa].join(ya),topology:[ba,e,wa].join(ya),weightSpecs:[ba,e,ka].join(ya),weightData:[ba,e,va].join(ya),modelMetadata:[ba,e,Ia].join(ya)}}function Sa(e){const t=e.split(ya);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(ya)}class Ca{constructor(e){if(!Pe().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Na(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=na(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Zr)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Zr){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Ca.URL_SCHEME="localstorage://";const $a=e=>{return Pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ca.URL_SCHEME)?(t=e.slice(Ca.URL_SCHEME.length),new Ca(t)):null;var t};ra.registerSaveRouter($a),ra.registerLoadRouter($a);class Ta{constructor(){Z(Pe().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),Z("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=ba+ya,n=ya+xa;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);r.startsWith(t)&&r.endsWith(n)&&(e[Sa(r)]=JSON.parse(this.LS.getItem(r)))}return e}async removeModel(e){var t;const n=Na(e=(t=e).startsWith(Ca.URL_SCHEME)?t.slice(Ca.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),s}}const Ea="://";class Aa{constructor(){this.managers={}}static getInstance(){return null==Aa.instance&&(Aa.instance=new Aa),Aa.instance}static registerManager(e,t){Z(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Ea)&&(e=e.slice(0,e.indexOf(Ea))),Z(e.length>0,(()=>"scheme must not be an empty string."));const n=Aa.getInstance();Z(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function Ra(e){if(-1===e.indexOf(Ea))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Aa.getSchemes().join(",")}`);return{scheme:e.split(Ea)[0],path:e.split(Ea)[1]}}async function Da(e,t,n=!1){Z(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=ra.getLoadHandlers(e);Z(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),Z(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=ra.getSaveHandlers(t);Z(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),Z(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=Ra(e).scheme,l=Ra(e).path,u=o===Ra(e).scheme,c=await r.load();n&&u&&await Aa.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Aa.getManager(o).removeModel(l),h.modelArtifactsInfo}async function Fa(){const e=Aa.getSchemes(),t={};for(const n of e){const e=await Aa.getManager(n).listModels();for(const s in e)t[n+Ea+s]=e[s]}return t}async function _a(e){const t=Ra(e);return Aa.getManager(t.scheme).removeModel(t.path)}async function Oa(e,t){return Da(e,t,!1)}async function Ma(e,t){return Da(e,t,!0)}class La{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(Pe().get("IS_BROWSER")){Pe().setPlatform("browser",new La);try{Aa.registerManager(Ca.URL_SCHEME,new Ta)}catch(e){}try{Aa.registerManager(fa.URL_SCHEME,new ga)}catch(e){}}let za;function Pa(e,t="float32",n){return t=t||"float32",_e(e),new hr(e,t,n)}Pe().get("IS_NODE")&&Pe().setPlatform("node",new class{constructor(){this.util=n(758),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Pe().global.fetch?Pe().global.fetch(e,t):(null==za&&(za=n(352)),za(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Ba=Gr({cast_:function(e,t){const n=Wr(e,"x","cast");if(!ye(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Fr.runKernel(pt,s,r)}}),Wa=Gr({clone_:function(e){const t={x:Wr(e,"x","clone","string_or_numeric")};return Fr.runKernel(tn,t)}});function Va(e,t=!1){console.log(e.toString(t))}function Ua(e){return new Promise((e=>setTimeout(e))).then(e)}Dr(),dr={buffer:Pa,cast:Ba,clone:Wa,print:Va};class Ga{constructor(e){if(!Pe().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Ga.URL_SCHEME)&&(e=e.slice(Ga.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelTopologyFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer);const r=window.URL.createObjectURL(new Blob([JSON.stringify(s)],{type:"application/json"})),a=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor;if(a.download=this.modelTopologyFileName,a.href=r,await Ua((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ua((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:na(e)}}}}Ga.URL_SCHEME="downloads://";class Ha{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.files=e}async load(){const e=this.files[0],t=this.files.slice(1);return new Promise(((n,s)=>{const r=new FileReader;r.onload=r=>{const a=JSON.parse(r.target.result),i=a.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${e.name}`));0===t.length&&n({modelTopology:i});const o=a.weightsManifest;if(null==o)return void s(new Error(`weightManifest field is missing from file ${e.name}`));let l;try{l=this.checkManifestAndWeightFiles(o,t)}catch(e){return void s(e)}const u=[],c=[],h=[];o.forEach((e=>{e.paths.forEach((e=>{c.push(e),h.push(null)})),u.push(...e.weights)})),o.forEach((e=>{e.paths.forEach((e=>{const t=new FileReader;t.onload=t=>{const s=t.target.result,r=c.indexOf(e);if(h[r]=s,-1===h.indexOf(null)){const e={modelTopology:i,weightSpecs:u,weightData:ea(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy};null!=a.signature&&(e.signature=a.signature),null!=a.userDefinedMetadata&&(e.userDefinedMetadata=a.userDefinedMetadata),null!=a.modelInitializer&&(e.modelInitializer=a.modelInitializer),n(e)}},t.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),t.readAsArrayBuffer(l[e])}))}))},r.onerror=t=>s(`Failed to read model topology and weights manifest JSON from file '${e.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(e)}))}checkManifestAndWeightFiles(e,t){const n=[],s=t.map((e=>ta(e.name))),r={};for(const a of e)a.paths.forEach((e=>{const a=ta(e);if(-1!==n.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(n.push(a),-1===s.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=t[s.indexOf(a)]}));if(n.length!==t.length)throw new Error(`Mismatch in the number of files in weights manifest (${n.length}) and the number of weight files provided (${t.length}).`);return r}}function ja(e){return new Ha(e)}function qa(e,t,n,s){!function(e){Z(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){Z(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),Z(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),Z(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let r=0;return Promise.all(e.map((a=>(a.then((a=>{const i=n+ ++r/e.length*(s-n);return t(i),a})),a))))}async function Ka(e,t){null==t&&(t={});const n=null==t.fetchFunc?Pe().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await qa(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await qa(r,t.onProgress,.5,1)}async function Xa(e,t="",n,s){return Ya((e=>Ka(e,{requestInit:s})))(e,t,n)}function Ya(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=Kr[l]*ne(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length;let s=0;for(let e=0;e<n;e++)s+=c[p+e].byteLength;const r=new ArrayBuffer(s),i=new Uint8Array(r);let o=0;for(let e=0;e<n;e++){const t=new Uint8Array(c[p+e]);i.set(t,o),o+=t.byteLength}a[e].forEach((e=>{const t=Yr(r.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}ra.registerSaveRouter((e=>Pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ga.URL_SCHEME)?function(e="model"){return new Ga(e)}(e.slice(Ga.URL_SCHEME.length)):null));class Ja{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Z("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Pe().platform.fetch,Z(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&Z(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:n};null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),t.body.append("model.json",new Blob([JSON.stringify(s)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:na(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest,r=t.generatedBy,a=t.convertedBy,i=t.format,o=t.signature,l=t.userDefinedMetadata;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);let u,c;if(null!=s){const e=await this.loadWeights(s);[u,c]=e}const h={modelTopology:n,weightSpecs:u,weightData:c,generatedBy:r,convertedBy:a,format:i};null!=o&&(h.signature=o),null!=l&&(h.userDefinedMetadata=l);const p=t.modelInitializer;return p&&(h.modelInitializer=p),h}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),r=this.weightPathPrefix||n,a=[];for(const t of e)a.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[a,ea(await Ka(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Za(e){return null!=e.match(Ja.URL_SCHEME_REGEX)}Ja.URL_SCHEME_REGEX=/^https?:\/\//;const Qa=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Za(e))):Za(e),n)return ei(e,t)}return null};function ei(e,t){return new Ja(e,t)}function ti(e,t){return ei(e,t)}ra.registerSaveRouter(Qa),ra.registerLoadRouter(Qa);class ni{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class si{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function ri(e,t,n,s){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new ni(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ni({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ni({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s}))}function ai(e){return new si(e)}const ii=Gr({matMul_:function(e,t,n=!1,s=!1){let r=Wr(e,"a","matMul"),a=Wr(t,"b","matMul");[r,a]=Sr(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Fr.runKernel(lt,i,o)}}),oi=Gr({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const r={indices:Wr(e,"indices","oneHot","int32")},a={depth:t,onValue:n,offValue:s};return Fr.runKernel(Bn,r,a)}}),li=Gr({transpose_:function(e,t){const n=Wr(e,"x","transpose");if(null==t&&(t=n.shape.map(((e,t)=>t)).reverse()),Z(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`)),t.forEach((e=>{Z(e>=0&&e<n.rank,(()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+` but got ${t}`))})),n.rank<=1)return n.clone();const s={x:n},r={perm:t};return Fr.runKernel(Es,s,r)}}),ui=Gr({confusionMatrix_:function(e,t,n){const s=Wr(e,"labels","confusionMatrix"),r=Wr(t,"predictions","confusionMatrix");Z(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),Z(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),Z(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),Z(s.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),Z(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=oi(Ba(s,"int32"),n),i=oi(Ba(r,"int32"),n),o=li(a),l=ii(o,i);return Ba(l,"int32")}});function ci(e,t,n){if(ee(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=zr(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return jr(e,t,s,n)}let hi;async function pi(e,t){let n=Wr(e,"img","toPixels");if(!(e instanceof mr)){const e=n;n=Ba(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}const di=Gr({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(r){const t=2;if(r&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Vs(Os,Fr.backendName)){const n={pixels:e},s={numChannels:t};return Fr.runKernel(Os,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i?c=e.getContext("2d").getImageData(0,0,l,u).data:s||n?c=e.data:(a||r||o)&&(null==hi&&(hi=document.createElement("canvas").getContext("2d")),hi.canvas.width=l,hi.canvas.height=u,hi.drawImage(e,0,0,l,u),c=hi.getImageData(0,0,l,u).data),4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return ci(h,[u,l,t],"int32")}});function fi(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===ne(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...Te(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}function mi(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function gi(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}mi(n,t,e)}function yi(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:ne(t.shape)/o,sliceSize:i,strides:[...Te(n.slice(0,r)),1],outputSize:ne(n)}}function bi(e,t,n){const s=e.shape.length;Z(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),Z(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)Z(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function xi(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function wi(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function ki(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function vi(e,t,n){return n<=e?n:n-(t-1)}function Ii(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function Ni(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=Si(i,l,u,s,e),h=Ci(o,l,u,r,e),p=ki(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=Ti(i,s,a,e,t,l),h[t]=Ei(o,r,a,e,t,l),p[t]=$i(a,t,l);return{begin:c,end:h,strides:p}}function Si(e,t,n,s,r){const a=[...r],i=Ii(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=vi(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function Ci(e,t,n,s,r){const a=[...r],i=Ii(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=vi(t,n,r);let o=s[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=q(0,a[e],r[e])}return a}function $i(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function Ti(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=q(0,i,l-1),i}function Ei(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?q(0,i,l):q(-1,i,l-1),i}function Ai(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function Ri(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Di(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{Z(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(Z(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function Fi(e,t,n,s,r,a,i,o,l){let u=t.slice(),c=n.slice(),h=s;null==s&&(h=new Array(u.length));const p=xi(i);if(p.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==o)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const d=e.length-u.length,f=xi(o),m=e.slice();f.forEach((e=>{u[e]=0,c[e]=1,m.splice(e,0,1)}));const{begin:g,end:y,strides:b}=Ni(m,p,d,u,c,h,r,a,i);u=g,c=y,h=b;const x=xi(l);x.forEach((e=>{c[e]=u[e]+1,h[e]=1}));const w=wi(u,c,h),k=w.filter(((e,t)=>-1===x.indexOf(t)));return{nonStrided:h.every((e=>1===e)),$begin:u,$end:c,$strides:h,size:w,newShape:m,outShape:k}}class _i{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Oi{constructor(){this.classNameMap={}}static getMap(){return null==Oi.instance&&(Oi.instance=new Oi),Oi.instance}static register(e){Oi.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Mi(e){Z(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),Z("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),Z(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Oi.register(e)}const Li=.1;function zi(e,t,n){return null==n&&(n=Pi()),Bi(e,t,((e,t)=>Gi(e,t,n)))}function Pi(){return 32===Fr.backend.floatPrecision()?.001:Li}function Bi(e,t,n){let s=!0;if((xe(e)||xe(t))&&(s=!1),xe(e)&&xe(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=zr(e),s=zr(t);if(!re(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=xe(e)?e:te(e),a=xe(t)?t:te(t);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=r[e],s=a[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}}function Wi(e,t){e().then((()=>t.fail()),(()=>t()))}function Vi(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return ve(e)||ve(e[0])||ve(t)||ve(t[0])?Bi(e,n,((e,t)=>e==t)):Bi(e,t,((e,t)=>Gi(e,t,0)))}function Ui(e,t,n){if(null==n&&(n=Pi()),!Gi(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function Gi(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Hi(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)}function ji(e,t){expect(new Float32Array(e)).toEqual(new Float32Array(t))}function qi(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?qi(n):e[t]=ur(n)}return e}const Ki="2.8.6";function Xi(){Pe().set("PROD",!0)}function Yi(){Pe().set("DEBUG",!0)}function Ji(){Pe().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Zi(e){Pe().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Qi(){Fr.disposeVariables()}function eo(){return Fr}function to(){return Fr.memory()}function no(e){return Fr.profile(e)}function so(e,t){return Fr.tidy(e,t)}function ro(e){Tr(e).forEach((e=>e.dispose()))}function ao(e){return Fr.keep(e)}function io(e){return Fr.time(e)}function oo(e){return Fr.setBackend(e)}function lo(){return Fr.ready()}function uo(){return Fr.backendName}function co(e){Fr.removeBackend(e)}function ho(e){return Fr.findBackend(e)}function po(e){return Fr.findBackendFactory(e)}function fo(e,t,n=1){return Fr.registerBackend(e,t,n)}function mo(){return Fr.backend}function go(e,t){Pe().setPlatform(e,t)}fr=Zi;const yo=Gr({add_:function(e,t){let n=Wr(e,"a","add"),s=Wr(t,"b","add");[n,s]=Sr(n,s);const r={a:n,b:s};return Fr.runKernel(qe,r)}}),bo=Gr({floorDiv_:function(e,t){let n=Wr(e,"a","floorDiv"),s=Wr(t,"b","floorDiv");[n,s]=Sr(n,s);const r={a:n,b:s};return Fr.runKernel(Xt,r)}}),xo=Gr({div_:function(e,t){let n=Wr(e,"a","div"),s=Wr(t,"b","div");if([n,s]=Sr(n,s),"int32"===n.dtype&&"int32"===s.dtype)return bo(n,s);const r={a:n,b:s};return Fr.runKernel(Lt,r,{})}}),wo=Gr({mul_:function(e,t){let n=Wr(e,"a","mul"),s=Wr(t,"b","mul");[n,s]=Sr(n,s);const r={a:n,b:s};return Fr.runKernel(Fn,r)}}),ko=Gr({sqrt_:function(e){const t={x:Wr(e,"x","sqrt")};return Fr.runKernel(ms,t)}}),vo=Gr({square_:function(e){const t=Wr(e,"x","square");return Fr.runKernel("Square",{x:t},{})}}),Io=Gr({zerosLike_:function(e){const t={x:Wr(e,"x","zerosLike")};return Fr.runKernel(Fs,t)}});function No(e){return Z(Ce(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const s=Wr(t,"x","tf.grad","string_or_numeric"),r=null!=n?Wr(n,"dy","tf.grad"):null;return Fr.tidy((()=>{const{value:t,grads:n}=Fr.gradients((()=>e(s)),[s],r);return null!=r&&Q(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Ao(n),n[0]}))}}function So(e){return Z(Ce(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{Z(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const s=Vr(t,"args","tf.grads","string_or_numeric"),r=null!=n?Wr(n,"dy","tf.grads"):null;return Fr.tidy((()=>{const{value:t,grads:n}=Fr.gradients((()=>e(...s)),s,r);return null!=r&&Q(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Ao(n),n}))}}function Co(e){return Z(Ce(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{Z(t instanceof mr,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),Z(null==n||n instanceof mr,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:r}=Fr.gradients((()=>e(t)),[t],n);return Ao(s),{grad:s[0],value:r}}}function $o(e){return Z(Ce(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{Z(Array.isArray(t)&&t.every((e=>e instanceof mr)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),Z(null==n||n instanceof mr,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=Fr.gradients((()=>e(...t)),t,n);return null!=n&&Q(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Ao(s.grads),s}}function To(e,t){Z(Ce(e),(()=>"The f passed in variableGrads(f) must be a function")),Z(null==t||Array.isArray(t)&&t.every((e=>e instanceof gr)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Fr.registeredVariables)t.push(Fr.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;Z((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Fr.gradients(e,t,null,!0);Z(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),Z(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function Eo(e){return Fr.customGrad(e)}function Ao(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Ro(e,t){if((xe(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&xe(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return jr(e,[],[],t)}class Do extends _i{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return ro(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return To(e,t)}dispose(){null!=this.iterations_&&ro(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Ro(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Do,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Fo extends Do{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Fr.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Fr.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:so((()=>Io(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:so((()=>Io(s).variable(!1)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;so((()=>{const e=yo(wo(a,this.rho),wo(vo(r),1-this.rho)),t=wo(xo(ko(yo(i,this.epsilon)),ko(yo(a,this.epsilon))),r),n=yo(wo(i,this.rho),wo(vo(t),1-this.rho));a.assign(e),i.assign(n);const o=yo(wo(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ro(this.accumulatedGrads.map((e=>e.variable))),ro(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function _o(e,t,n){const s={shape:e,value:t,dtype:n};return Fr.runKernel(jt,{},s)}Fo.className="Adadelta",Mi(Fo);class Oo extends Do{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Fr.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:so((()=>_o(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;so((()=>{const e=yo(a,vo(r));a.assign(e);const t=yo(wo(xo(r,ko(yo(e,Fr.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ro(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Oo.className="Adagrad",Mi(Oo);const Mo=Gr({pow_:function(e,t){let n=Wr(e,"base","pow"),s=Wr(t,"exp","pow");[n,s]=Sr(n,s);const r={a:n,b:s};return Fr.runKernel(Gn,r)}}),Lo=Gr({sub_:function(e,t){let n=Wr(e,"a","sub"),s=Wr(t,"b","sub");[n,s]=Sr(n,s);const r={a:n,b:s};return Fr.runKernel(vs,r)}});class zo extends Do{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],so((()=>{this.accBeta1=Ro(t).variable(),this.accBeta2=Ro(n).variable()})),null==s&&(this.epsilon=Fr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);so((()=>{const n=Lo(1,this.accBeta1),s=Lo(1,this.accBeta2);t.forEach(((t,r)=>{const a=Fr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:so((()=>Io(a).variable(!1)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:so((()=>Io(a).variable(!1)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=yo(wo(o,this.beta1),wo(i,1-this.beta1)),c=yo(wo(l,this.beta2),wo(vo(i),1-this.beta2)),h=xo(u,n),p=xo(c,s);o.assign(u),l.assign(c);const d=yo(wo(xo(h,yo(ko(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(wo(this.accBeta1,this.beta1)),this.accBeta2.assign(wo(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ro(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&ro(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),so((()=>{this.accBeta1.assign(Mo(this.beta1,this.iterations_+1)),this.accBeta2.assign(Mo(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}zo.className="Adam",Mi(zo);const Po=Gr({abs_:function(e){const t=Wr(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Fr.runKernel(gt,e)}{const e={x:t};return Fr.runKernel(Ge,e)}}});function Bo(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function Wo(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function Vo(e,t){const n=[],s=Math.max(e.length,t.length);for(let r=0;r<s;r++){let s=e[e.length-r-1];null==s&&(s=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===s)n.unshift(a);else if(1===a)n.unshift(s);else{if(s!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}const Uo=Gr({maximum_:function(e,t){let n=Wr(e,"a","maximum"),s=Wr(t,"b","maximum");[n,s]=Sr(n,s),"bool"===n.dtype&&(n=Ba(n,"int32"),s=Ba(s,"int32")),Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(kn,r)}});class Go extends Do{constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],so((()=>{this.iteration=Ro(0).variable(),this.accBeta1=Ro(t).variable()})),null==s&&(this.epsilon=Fr.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);so((()=>{const n=Lo(1,this.accBeta1),s=xo(-this.learningRate,yo(wo(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Fr.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Io(a).variable(!1)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Io(a).variable(!1)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=yo(wo(o,this.beta1),wo(i,1-this.beta1)),c=wo(l,this.beta2),h=Po(i),p=Uo(c,h);o.assign(u),l.assign(p);const d=yo(wo(xo(s,n),xo(u,yo(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(yo(this.iteration,1)),this.accBeta1.assign(wo(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ro(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&ro(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Go.className="Adamax",Mi(Go);class Ho extends Do{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Fr.registeredVariables[t];so((()=>{const e=yo(wo(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=ao(Ro(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Ho.className="SGD",Mi(Ho);class jo extends Ho{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Ro(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Fr.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:so((()=>Io(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&so((()=>{let e;const t=yo(wo(this.m,r),a);e=this.useNesterov?yo(wo(this.c,yo(a,wo(t,this.m))),s):yo(wo(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ro(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}jo.className="Momentum",Mi(jo);class qo extends Do{constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Fr.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Fr.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:so((()=>Io(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:so((()=>Io(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:so((()=>Io(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;so((()=>{const e=yo(wo(i,this.decay),wo(vo(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=yo(wo(t,this.decay),wo(a,1-this.decay)),l=xo(wo(a,this.learningRate),ko(Lo(e,yo(vo(r),this.epsilon)))),u=yo(wo(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=Lo(s,u);s.assign(c)}else{const e=yo(wo(i,this.decay),wo(vo(a),1-this.decay)),t=yo(wo(o,this.momentum),xo(wo(a,this.learningRate),ko(yo(e,this.epsilon))));i.assign(e),o.assign(t);const n=Lo(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ro(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&ro(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&ro(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}qo.className="RMSProp",Mi(qo);const Ko=Gr({acos_:function(e){const t={x:Wr(e,"x","acos")};return Fr.runKernel(He,t)}}),Xo=Gr({acosh_:function(e){const t={x:Wr(e,"x","acosh")};return Fr.runKernel(je,t)}}),Yo=Gr({addN_:function(e){Z(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),Z(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Wr(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!re(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Fr.runKernel(Ke,s)}}),Jo=Gr({all_:function(e,t=null,n=!1){const s={x:Wr(e,"x","all","bool")},r={axis:t,keepDims:n};return Fr.runKernel(Xe,s,r)}}),Zo=Gr({any_:function(e,t=null,n=!1){const s={x:Wr(e,"x","any","bool")},r={axis:t,keepDims:n};return Fr.runKernel(Ye,s,r)}}),Qo=Gr({argMax_:function(e,t=0){const n={x:Wr(e,"x","argMax")},s={axis:t};return Fr.runKernel(Je,n,s)}}),el=Gr({argMin_:function(e,t=0){const n={x:Wr(e,"x","argMin")},s={axis:t};return Fr.runKernel(Ze,n,s)}}),tl=Gr({asin_:function(e){const t={x:Wr(e,"x","asin")};return Fr.runKernel(Qe,t)}}),nl=Gr({asinh_:function(e){const t={x:Wr(e,"x","asinh")};return Fr.runKernel(et,t)}}),sl=Gr({atan_:function(e){const t={x:Wr(e,"x","atan")};return Fr.runKernel(tt,t)}}),rl=Gr({atan2_:function(e,t){let n=Wr(e,"a","atan2"),s=Wr(t,"b","atan2");[n,s]=Sr(n,s);const r={a:n,b:s};return Fr.runKernel(st,r)}}),al=Gr({atanh_:function(e){const t={x:Wr(e,"x","atanh")};return Fr.runKernel(nt,t)}});function il(e,t,n,s,r="NHWC",a){return ul(e,[...t,e[3]],n,a,s,null,null,bl(r))}function ol(e,t,n,s,r,a,i="channelsLast"){const[o,l]=pl(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return ul(e,u,n,s,r,a,!1,i)}function ll(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=dl(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return cl(e,c,n,s,r,!1,h,a)}function ul(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=pl(n),[y,b]=pl(s),x=fl(p,y),w=fl(d,b),{padInfo:k,outHeight:v,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=hl(e,t,n));const a=e[1];return[ml((e[0]-t+2*s)/n+1,r),ml((a-t+2*s)/n+1,r)]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=ml((t-a+p+d)/s+1,o),h=ml((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[l,N,v,I]:"channelsLast"===o&&(S=[l,v,I,N]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function cl(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=dl(n),[w,k,v]=dl(s),I=fl(d,w),N=fl(f,k),S=fl(m,v),{padInfo:C,outDepth:$,outHeight:T,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,r,a){null==r&&(r=hl(e,t,s));const i=e[1],o=e[2];return[ml((e[0]-t+2*r)/s+1,a),ml((i-t+2*r)/s+1,a),ml((o-t+2*r)/s+1,a),1]}([t,n,s,1],o,0,r,e,c);p=a[0],d=a[1],f=a[2]}else if("same"===e){p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/r),d=Math.ceil((n-l+1)/a),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,I,N,S,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,$,T,E]:"channelsLast"===i&&(R=[l,$,T,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:$,outHeight:T,outWidth:E,outChannels:A,padInfo:C,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function hl(e,t,n,s=1){const r=fl(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function pl(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function dl(e){return"number"==typeof e?[e,e,e]:e}function fl(e,t){return t<=1?e:e+(e-1)*(t-1)}function ml(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function gl(e){const[t,n,s]=pl(e);return 1===t&&1===n&&1===s}function yl(e,t){return gl(e)||gl(t)}function bl(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}const xl=Gr({reshape_:function(e,t){const n={x:Wr(e,"x","reshape","string_or_numeric")},s={shape:t};return Fr.runKernel(Jn,n,s)}}),wl=Gr({avgPool_:function(e,t,n,s,r){const a=Wr(e,"x","avgPool","float32");Z(yl(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=xl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),null!=r&&Z(ae(s),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Fr.runKernel(rt,l,u);return c=Ba(c,a.dtype),o?xl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),kl=Gr({avgPool3d_:function(e,t,n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:Zi("dilations is deprecated, this field will be gone in v3.0.0.");const o=Wr(e,"x","avgPool3d","float32");let l=o,u=!1;4===o.rank&&(u=!0,l=xl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===l.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${l.rank}.`)),Z("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Z(yl(n,i),(()=>`Error in avgPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=r&&Z(ae(s),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:l},h={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i};let p=Fr.runKernel(it,c,h);return p=Ba(p,l.dtype),u?xl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),vl=Gr({concat_:function(e,t=0){Z(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Vr(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Wa(n[0]);const s=n,r={axis:t};return Fr.runKernel(yt,s,r)}}),Il=Gr({sigmoid_:function(e){const t={x:Wr(e,"x","sigmoid")};return Fr.runKernel(ds,t)}}),Nl=Gr({slice_:function(e,t,n){const s=Wr(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Fr.runKernel(us,r,a)}}),Sl=Gr({tanh_:function(e){const t={x:Wr(e,"x","tanh")};return Fr.runKernel(Cs,t)}}),Cl=Gr({basicLSTMCell_:function(e,t,n,s,r,a){const i=Wr(e,"forgetBias","basicLSTMCell"),o=Wr(t,"lstmKernel","basicLSTMCell"),l=Wr(n,"lstmBias","basicLSTMCell"),u=Wr(s,"data","basicLSTMCell"),c=Wr(r,"c","basicLSTMCell"),h=Wr(a,"h","basicLSTMCell"),p=vl([u,h],1),d=ii(p,o),f=yo(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Nl(f,[0,0],y),x=Nl(f,[0,g],y),w=Nl(f,[0,2*g],y),k=Nl(f,[0,3*g],y),v=yo(wo(Il(b),Sl(x)),wo(c,Il(yo(i,w))));return[v,wo(Sl(v),Il(k))]}}),$l=Gr({batchToSpaceND_:function(e,t,n){const s=Wr(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));Z(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),Z(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),Z(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Fr.runKernel(ut,a,i)}}),Tl=Gr({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Wr(e,"x","batchNorm"),o=Wr(t,"mean","batchNorm"),l=Wr(n,"variance","batchNorm");let u,c;null!=r&&(u=Wr(r,"scale","batchNorm")),null!=s&&(c=Wr(s,"offset","batchNorm")),Z(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Z(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Z(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h={x:function(e){let t;return t=0===e.rank||1===e.rank?xl(e,[1,1,1,e.size]):2===e.rank?xl(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?xl(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),scale:u,offset:c,mean:o,variance:l},p={varianceEpsilon:a},d=Fr.runKernel(Yt,h,p);return xl(d,i.shape)}}),El=Gr({batchNorm2d_:function(e,t,n,s,r,a){const i=Wr(e,"x","batchNorm"),o=Wr(t,"mean","batchNorm"),l=Wr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Wr(r,"scale","batchNorm")),null!=s&&(c=Wr(s,"offset","batchNorm")),Z(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),Z(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),Z(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&Z(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&Z(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Tl(i,o,l,c,u,a)}}),Al=Gr({batchNorm3d_:function(e,t,n,s,r,a){const i=Wr(e,"x","batchNorm"),o=Wr(t,"mean","batchNorm"),l=Wr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Wr(r,"scale","batchNorm")),null!=s&&(c=Wr(s,"offset","batchNorm")),Z(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),Z(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),Z(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&Z(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&Z(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Tl(i,o,l,c,u,a)}}),Rl=Gr({batchNorm4d_:function(e,t,n,s,r,a){const i=Wr(e,"x","batchNorm"),o=Wr(t,"mean","batchNorm"),l=Wr(n,"variance","batchNorm");let u,c;return null!=r&&(u=Wr(r,"scale","batchNorm")),null!=s&&(c=Wr(s,"offset","batchNorm")),Z(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),Z(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),Z(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&Z(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&Z(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Tl(i,o,l,c,u,a)}}),Dl=Gr({bincount_:function(e,t,n){const s=Wr(e,"x","bincount"),r=Wr(t,"weights","bincount");Z("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),Z(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Z(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Fr.runKernel(ct,a,i)}}),Fl=Gr({broadcastTo_:function(e,t){let n=Wr(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=xl(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Wa(n);const i={x:n},o={reps:a};return Fr.runKernel($s,i,o)}}),_l=Gr({ceil_:function(e){const t={x:Wr(e,"x","ceil")};return Fr.runKernel(dt,t)}}),Ol=Gr({clipByValue_:function(e,t,n){const s=Wr(e,"x","clipByValue");Z(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const r={x:s},a={clipValueMin:t,clipValueMax:n};return Fr.runKernel(ft,r,a)}}),Ml=Gr({concat1d_:function(e){return vl(e,0)}}),Ll=Gr({concat2d_:function(e,t){return vl(e,t)}}),zl=Gr({concat3d_:function(e,t){return vl(e,t)}}),Pl=Gr({concat4d_:function(e,t){return vl(e,t)}}),Bl=Gr({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Wr(e,"x","conv2d"),l=Wr(t,"filter","conv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=xl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Z(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),Z(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=i&&Z(ae(s),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];Z(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),Z(yl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Fr.runKernel(bt,p,d);return c?xl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Wl=Gr({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Wr(e,"x","conv1d"),l=Wr(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=xl(o,[1,o.shape[0],o.shape[1]])),Z(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),Z(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=i&&Z(ae(s),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),Z(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),Z(yl(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),Z("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=xl(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=xl(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Bl(p,h,[1,n],s,"NHWC",[1,a],i);return xl(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),Vl=Gr({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){Z(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=xl(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),Z(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),Z(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),Z(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];Z(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),Z(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=i&&Z(ae(r),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Fr.runKernel(wt,p,d);return u?xl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Ul=Gr({conv2dTranspose_:function(e,t,n,s,r,a){const i=Wr(e,"x","conv2dTranspose"),o=Wr(t,"filter","conv2dTranspose");return Vl(n,i,o,s,r,"NHWC",a)}}),Gl=Gr({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Wr(e,"x","conv3d"),o=Wr(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=xl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),Z(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),Z(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),Z(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),Z(yl(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Z("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=Fr.runKernel(kt,c,h);return u?xl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Hl=Gr({conv3DBackpropInput_:function(e,t,n,s,r){Z(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=xl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];Z(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),Z(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),Z(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),Z(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),Z(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},p=Fr.runKernel(It,c,h);return o?xl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),jl=Gr({conv3dTranspose_:function(e,t,n,s,r){const a=Wr(e,"x","conv3dTranspose"),i=Wr(t,"filter","conv3dTranspose");return Hl(n,a,i,s,r)}}),ql=Gr({cos_:function(e){const t={x:Wr(e,"x","cos")};return Fr.runKernel(Nt,t)}}),Kl=Gr({cosh_:function(e){const t={x:Wr(e,"x","cosh")};return Fr.runKernel(St,t)}}),Xl=Gr({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Wr(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Fr.runKernel(Ct,r,a)}}),Yl=Gr({denseBincount_:function(e,t,n,s=!1){const r=Wr(e,"x","denseBincount"),a=Wr(t,"weights","denseBincount");Z("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),Z(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),Z(n>=0,(()=>`size must be non-negative, but got ${n}.`)),Z(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return Fr.runKernel(Tt,i,o)}}),Jl=Gr({depthToSpace_:function(e,t,n="NHWC"){const s=Wr(e,"x","depthToSpace"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];Z(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),Z(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),Z(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return Fr.runKernel(Et,o,l)}}),Zl=Gr({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Wr(e,"x","depthwiseConv2d"),l=Wr(t,"filter","depthwiseConv2d");let u=o,c=!1;3===o.rank&&(c=!0,u=xl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),Z(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),Z(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),Z(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=i&&Z(ae(s),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},d=Fr.runKernel(At,h,p);return c?xl(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Ql=Gr({diag_:function(e){const t={x:Wr(e,"x","diag")};return Fr.runKernel(Ft,t)}}),eu=Gr({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Wr(e,"x","dilation2d"),o=Wr(t,"filter","dilation2d");Z(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),Z(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),Z("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=xl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=Fr.runKernel(_t,c,h);return u?xl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),tu=Gr({equal_:function(e,t){let n=Wr(e,"a","equal"),s=Wr(t,"b","equal");[n,s]=Sr(n,s),Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(Wt,r)}}),nu=Gr({where_:function(e,t,n){const s=Wr(t,"a","where"),r=Wr(n,"b","where"),a=Wr(e,"condition","where","bool"),i=Vo(s.shape,r.shape),o=Fl(s,i),l=Fl(r,i);1===a.rank&&Z(a.shape[0]===s.shape[0],(()=>"The first dimension of `a` must match the size of `condition`.")),1!==a.rank&&Q(a.shape,l.shape,"Error in where: ");const u={condition:a,t:o,e:l};return Fr.runKernel(os,u)}}),su=Gr({divNoNan_:function(e,t){let n=Wr(e,"a","div"),s=Wr(t,"b","div");[n,s]=Sr(n,s);const r=xo(n,s),a=Io(r),i=tu(s,a);return nu(i,a,r)}}),ru=Gr({dot_:function(e,t){const n=Wr(e,"t1","dot"),s=Wr(t,"t2","dot");Z(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(Z(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=xl(n,[1,-1]),t=xl(s,[-1,1]),r=ii(e,t);return xl(r,[])}if(1===n.rank&&2===s.rank){const e=xl(n,[1,-1]),t=xl(s,[s.shape[0],s.shape[1]]),r=ii(e,t);return xl(r,[r.size])}if(2===n.rank&&1===s.rank){const e=xl(s,[-1,1]),t=ii(n,e);return xl(t,[t.size])}{const e=xl(s,[s.shape[0],s.shape[1]]);return ii(n,e)}}}),au=Gr({elu_:function(e){const t={x:Wr(e,"x","elu")};return Fr.runKernel(zt,t)}}),iu=Gr({erf_:function(e){let t=Wr(e,"x","erf");Z("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Ba(t,"float32"));const n={x:t};return Fr.runKernel(Bt,n)}}),ou=Gr({exp_:function(e){const t={x:Wr(e,"x","exp")};return Fr.runKernel(Vt,t)}}),lu=Gr({expandDims_:function(e,t=0){const n=Wr(e,"x","expandDims","string_or_numeric");Z(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Fr.runKernel(Ut,s,r)}}),uu=Gr({expm1_:function(e){const t={x:Wr(e,"x","expm1")};return Fr.runKernel(Gt,t)}}),cu=Gr({tile_:function(e,t){const n=Wr(e,"x","tile","string_or_numeric");Z(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Fr.runKernel($s,s,r)}}),hu=Gr({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=Pa([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=xl(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return cu(lu(i,0),[n[0],1,1]);if(2===n.length)return cu(lu(lu(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return cu(lu(lu(lu(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),pu=Gr({floor_:function(e){const t={x:Wr(e,"x","floor")};return Fr.runKernel(Kt,t)}}),du=Gr({gather_:function(e,t,n=0,s=0){const r={x:Wr(e,"x","gather"),indices:Wr(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Fr.runKernel(Jt,r,a)}}),fu=Gr({greater_:function(e,t){let n=Wr(e,"a","greater"),s=Wr(t,"b","greater");[n,s]=Sr(n,s),Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(Qt,r)}}),mu=Gr({greaterEqual_:function(e,t){let n=Wr(e,"a","greaterEqual"),s=Wr(t,"b","greaterEqual");[n,s]=Sr(n,s),Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(en,r)}}),gu=Gr({imag_:function(e){const t={input:Wr(e,"input","imag")};return Fr.runKernel(sn,t)}}),yu=Gr({isFinite_:function(e){const t={x:Wr(e,"x","isFinite")};return Fr.runKernel(rn,t)}}),bu=Gr({isInf_:function(e){const t={x:Wr(e,"x","isInf")};return Fr.runKernel(an,t)}}),xu=Gr({isNaN_:function(e){const t={x:Wr(e,"x","isNaN")};return Fr.runKernel(on,t)}}),wu=Gr({leakyRelu_:function(e,t=.2){const n={x:Wr(e,"x","leakyRelu")},s={alpha:t};return Fr.runKernel(ln,n,s)}}),ku=Gr({less_:function(e,t){let n=Wr(e,"a","less"),s=Wr(t,"b","less");[n,s]=Sr(n,s),Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(un,r)}}),vu=Gr({lessEqual_:function(e,t){let n=Wr(e,"a","lessEqual"),s=Wr(t,"b","lessEqual");[n,s]=Sr(n,s),Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(cn,r)}});function Iu(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Fr.runKernel(hn,{},s)}const Nu=Gr({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Wr(e,"x","localResponseNormalization");Z(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),Z(ae(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=xl(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=Fr.runKernel(bn,l,u);return o?xl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Su=Gr({log_:function(e){const t={x:Wr(e,"x","log")};return Fr.runKernel(pn,t)}}),Cu=Gr({log1p_:function(e){const t={x:Wr(e,"x","log1p")};return Fr.runKernel(dn,t)}}),$u=Gr({neg_:function(e){const t={x:Wr(e,"x","neg")};return Fr.runKernel(_n,t)}}),Tu=Gr({softplus_:function(e){const t={x:Wr(e,"x","softplus")};return Fr.runKernel(fs,t)}}),Eu=Gr({logSigmoid_:function(e){const t=Wr(e,"x","logSigmoid");return Eo((e=>({value:$u(Tu($u(e))),gradFunc:t=>wo(t,Il($u(e)))})))(t)}}),Au=Gr({max_:function(e,t=null,n=!1){const s={x:Wr(e,"x","max")},r={reductionIndices:t,keepDims:n};return Fr.runKernel(wn,s,r)}}),Ru=Gr({sum_:function(e,t=null,n=!1){let s=Wr(e,"x","sum");"bool"===s.dtype&&(s=Ba(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Fr.runKernel(gs,r,a)}}),Du=Gr({logSoftmax_:function(e,t=-1){const n=Wr(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Eo(((e,n)=>{const s=Au(e,t,!0),r=Lo(e,s),a=Lo(Ba(r,"float32"),Su(Ru(ou(r),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[s]=n,r=ou(s);return Lo(e,wo(Ru(e,t,!0),r))}}}))(n)}});function Fu(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function _u(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function Ou(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Mu(e,t){return _u(e,t.map((e=>1)),t)}function Lu(e,t,n){Z(Fu(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function zu(e,t){if(Fu(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function Pu(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Bu(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const Wu=Gr({logSumExp_:function(e,t=null,n=!1){const s=Wr(e,"x","logSumExp"),r=pe(t,s.shape),a=Au(s,r,!0),i=Lo(s,a),o=ou(i),l=Ru(o,r),u=Su(l),c=yo(xl(a,u.shape),u);if(n){const e=Mu(c.shape,r);return xl(c,e)}return c}}),Vu=Gr({logicalAnd_:function(e,t){const n=Wr(e,"a","logicalAnd","bool"),s=Wr(t,"b","logicalAnd","bool");Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(fn,r)}}),Uu=Gr({logicalNot_:function(e){const t={x:Wr(e,"x","logicalNot","bool")};return Fr.runKernel(mn,t)}}),Gu=Gr({logicalOr_:function(e,t){const n=Wr(e,"a","logicalOr","bool"),s=Wr(t,"b","logicalOr","bool");Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(gn,r)}}),Hu=Gr({logicalXor_:function(e,t){const n=Wr(e,"a","logicalXor","bool"),s=Wr(t,"b","logicalXor","bool");return Vo(n.shape,s.shape),Vu(Gu(e,t),Uu(Vu(e,t)))}}),ju=Gr({maxPool_:function(e,t,n,s,r){const a=Wr(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=xl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),Z(yl(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=r&&Z(ae(s),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Fr.runKernel(vn,l,u);return o?xl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),qu=Gr({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC",i){null==i?i=[1,1,1]:Zi("dilations is deprecated, this field will be gone in v3.0.0.");const o=Wr(e,"x","maxPool3d");let l=o,u=!1;4===o.rank&&(u=!0,l=xl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),Z(5===l.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${l.rank}.`)),Z("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Z(yl(n,i),(()=>`Error in maxPool3d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=r&&Z(ae(s),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`));const c={x:l},h={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a,dilations:i},p=Fr.runKernel(Nn,c,h);return u?xl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Ku=Gr({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:Wr(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Fr.runKernel(Cn,a,i);return{result:o[0],indexes:o[1]}}}),Xu=Gr({mean_:function(e,t=null,n=!1){const s={x:Wr(e,"x","mean")},r={axis:t,keepDims:n};return Fr.runKernel($n,s,r)}}),Yu=Gr({min_:function(e,t=null,n=!1){const s={x:Wr(e,"x","min")},r={axis:t,keepDims:n};return Fr.runKernel(Tn,s,r)}}),Ju=Gr({minimum_:function(e,t){let n=Wr(e,"a","minimum"),s=Wr(t,"b","minimum");[n,s]=Sr(n,s),"bool"===n.dtype&&(n=Ba(n,"int32"),s=Ba(s,"int32")),Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(En,r)}}),Zu=Gr({mirrorPad_:function(e,t,n){Z("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Wr(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");Z(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)Z(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Z(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Fr.runKernel(An,i,a)}}),Qu=Gr({mod_:function(e,t){let n=Wr(e,"a","mod"),s=Wr(t,"b","mod");[n,s]=Sr(n,s);const r={a:n,b:s};return Fr.runKernel(Rn,r)}}),ec=Gr({moments_:function(e,t=null,n=!1){const s=pe(t,(e=Wr(e,"x","moments")).shape),r=Xu(e,s,n);let a=r.shape;n||(a=Mu(r.shape,s));const i=vo(Lo(Ba(e,"float32"),xl(r,a)));return{mean:r,variance:Xu(i,s,n)}}}),tc=Gr({multiRNNCell_:function(e,t,n,s){const r=Wr(t,"data","multiRNNCell"),a=Vr(n,"c","multiRNNCell"),i=Vr(s,"h","multiRNNCell");let o=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}}),nc=Gr({multinomial_:function(e,t,n,s=!1){const r=Wr(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?xl(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Fr.runKernel(Dn,o,l);return 1===i?xl(u,[u.size]):u}}),sc=Gr({notEqual_:function(e,t){let n=Wr(e,"a","notEqual"),s=Wr(t,"b","notEqual");[n,s]=Sr(n,s),Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(On,r)}});function rc(e,t="float32"){if("complex64"===t){const t=rc(e,"float32"),n=rc(e,"float32");return Hr(t,n)}const n=De(ne(e),t);return Fr.makeTensor(n,e,t)}function ac(e,t="float32"){if("complex64"===t){const t=ac(e,"float32"),n=rc(e,"float32");return Hr(t,n)}const n=Re(ne(e),t);return Fr.makeTensor(n,e,t)}const ic=Gr({onesLike_:function(e){const t={x:Wr(e,"x","onesLike")};return Fr.runKernel(Pn,t)}}),oc=Gr({outerProduct_:function(e,t){const n=Wr(e,"v1","outerProduct"),s=Wr(t,"v2","outerProduct");Z(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=xl(n,[-1,1]),a=xl(s,[1,-1]);return ii(r,a)}}),lc=Gr({pad_:function(e,t,n=0){const s=Wr(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Fr.runKernel(Vn,a,r)}}),uc=Gr({pad1d_:function(e,t,n=0){return Z(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),lc(e,[t],n)}}),cc=Gr({pad2d_:function(e,t,n=0){return Z(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),lc(e,t,n)}}),hc=Gr({pad3d_:function(e,t,n=0){return Z(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),lc(e,t,n)}}),pc=Gr({pad4d_:function(e,t,n=0){return Z(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),lc(e,t,n)}}),dc=Gr({spaceToBatchND_:function(e,t,n){const s=Wr(e,"x","spaceToBatchND");Z(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),Z(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),Z(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Fr.runKernel(ys,r,a)}}),fc=Gr({pool_:function(e,t,n,s,r,a){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const i=Wr(e,"x","maxPool");let o=i,l=!1;3===i.rank&&(l=!0,o=xl(i,[1,i.shape[0],i.shape[1],i.shape[2]])),Z(yl(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const u=ol(o.shape,t,a,r,s),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const p=1===c[0]&&1===c[1],[d,f]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[s[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([u.inHeight,u.inWidth],c,h),m=p?s:"valid",g=p?o:dc(o,c,d),y=("avg"===n?()=>wl(g,t,a,m):()=>ju(g,t,a,m))(),b=p?y:$l(y,c,f);return l?xl(b,[b.shape[1],b.shape[2],b.shape[3]]):b}}),mc=Gr({prelu_:function(e,t){const n={x:Wr(e,"x","prelu"),alpha:Wr(t,"alpha","prelu")};return Fr.runKernel(Hn,n)}}),gc=Gr({prod_:function(e,t=null,n=!1){let s=Wr(e,"x","prod");"bool"===s.dtype&&(s=Ba(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Fr.runKernel(jn,r,a)}}),yc=Gr({rand_:function(e,t,n){const s=ne(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return Fr.makeTensor(r,e,n)}});var bc=n(377);class xc{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=bc.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class wc{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=bc.alea(r.toString()),this.randn=new xc(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class kc{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=bc.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const vc=Gr({randomGamma_:function(e,t,n=1,s="float32",r){if(null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new wc(t,n,s,r),i=Pa(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Ic=Gr({randomNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new xc(t,n,s,!1,r),i=Pa(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),Nc=Gr({randomUniform_:function(e,t=0,n=1,s="float32",r){const a=Pa(e,s),i=new kc(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});function Sc(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Fr.runKernel(qn,{},r)}const Cc=Gr({real_:function(e){const t={input:Wr(e,"input","real")};return Fr.runKernel(Kn,t)}}),$c=Gr({reciprocal_:function(e){const t={x:Wr(e,"x","reciprocal")};return Fr.runKernel(Xn,t)}}),Tc=Gr({relu_:function(e){const t={x:Wr(e,"x","relu")};return Fr.runKernel(Yn,t)}}),Ec=Gr({relu6_:function(e){const t={x:Wr(e,"x","relu6")};return Fr.runKernel(ns,t)}}),Ac=Gr({reverse_:function(e,t){const n={x:Wr(e,"x","reverse")},s={dims:t};return Fr.runKernel(ss,n,s)}}),Rc=Gr({reverse1d_:function(e){const t=Wr(e,"x","reverse");return Z(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Ac(t,0)}}),Dc=Gr({reverse2d_:function(e,t){const n=Wr(e,"x","reverse");return Z(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Ac(n,t)}}),Fc=Gr({reverse3d_:function(e,t){const n=Wr(e,"x","reverse");return Z(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Ac(n,t)}}),_c=Gr({reverse4d_:function(e,t){const n=Wr(e,"x","reverse");return Z(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Ac(n,t)}}),Oc=Gr({round_:function(e){const t={x:Wr(e,"x","round")};return Fr.runKernel(rs,t)}}),Mc=Gr({rsqrt_:function(e){const t={x:Wr(e,"x","rsqrt")};return Fr.runKernel(as,t)}}),Lc=Gr({selu_:function(e){const t={x:Wr(e,"x","selu")};return Fr.runKernel(ls,t)}}),zc=Gr({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Wr(e,"x","separableConv2d"),l=Wr(t,"depthwiseFilter","separableConv2d"),u=Wr(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=xl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");Z(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),Z(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),Z(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),Z(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),Z(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];Z(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=Zl(c,l,s,r,i,a),m=Bl(f,u,1,"valid",i);return h?xl(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Pc=async function(e,t){const n=Wr(e,"x","setdiff1d"),s=Wr(t,"y","setdiff1d");Z(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),Z(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),Z(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new hr([o],n.dtype),u=new hr([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]},Bc=Gr({sign_:function(e){const t={x:Wr(e,"x","sign")};return Fr.runKernel(ps,t)}}),Wc=Gr({sin_:function(e){const t={x:Wr(e,"x","sin")};return Fr.runKernel(cs,t)}}),Vc=Gr({sinh_:function(e){const t={x:Wr(e,"x","sinh")};return Fr.runKernel(hs,t)}}),Uc=Gr({slice1d_:function(e,t,n){const s=Wr(e,"x","slice1d");return Z(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),Nl(s,[t],[n])}}),Gc=Gr({slice2d_:function(e,t,n){const s=Wr(e,"x","slice2d");return Z(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),Nl(s,t,n)}}),Hc=Gr({slice3d_:function(e,t,n){const s=Wr(e,"x","slice3d");return Z(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),Nl(s,t,n)}}),jc=Gr({slice4d_:function(e,t,n){const s=Wr(e,"x","slice4d");return Z(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),Nl(s,t,n)}}),qc=Gr({softmax_:function(e,t=-1){const n=Wr(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Fr.runKernel(xs,s,r)}}),Kc=Gr({fft_:function(e){Z("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Fr.runKernel(Ht,t)}}),Xc=Gr({ifft_:function(e){Z("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Fr.runKernel(nn,t)}}),Yc=Gr({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=xl(e,[n,t]);s=Xc(r)}else{const r=[n,2*(t-1)],a=xl(Cc(e),[n,t]),i=xl(gu(e),[n,t]),o=Ac(Nl(a,[0,1],[n,t-2]),1),l=wo(Ac(Nl(i,[0,1],[n,t-2]),1),Ro(-1)),u=vl([a,o],1),c=vl([i,l],1),h=xl(Hr(u,c),[r[0],r[1]]);s=Xc(h)}if(s=Cc(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=xl(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}}),Jc=Gr({split_:function(e,t,n=0){const s={x:Wr(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Fr.runKernel(bs,s,r)}}),Zc=Gr({rfft_:function(e,t){Z("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=Nl(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=vl([e,rc(s)],e.shape.length-1),n=t}else r=e;const a=Io(r),i=xl(Hr(r,a),[s,n]),o=Kc(i),l=Math.floor(n/2)+1,u=Cc(o),c=gu(o),h=Jc(u,[l,n-l],u.shape.length-1),p=Jc(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,xl(Hr(h[0],p[0]),d)}}),Qc=Gr({squaredDifference_:function(e,t){let n=Wr(e,"a","squaredDifference"),s=Wr(t,"b","squaredDifference");[n,s]=Sr(n,s),Vo(n.shape,s.shape);const r={a:n,b:s};return Fr.runKernel(ws,r,{})}}),eh=Gr({squeeze_:function(e,t){const n=Wr(e,"x","squeeze");return xl(n,de(n.shape,t).newShape)}}),th=Gr({stack_:function(e,t=0){const n=Vr(e,"tensors","stack","string_or_numeric");Z(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&Z(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Fr.runKernel(Wn,s,r)}}),nh=Gr({step_:function(e,t=0){const n={x:Wr(e,"x","step")},s={alpha:t};return Fr.runKernel(_s,n,s)}}),sh=Gr({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:Wr(e,"x","stridedSlice")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Fr.runKernel(Ns,u,c)}}),rh=Gr({tan_:function(e){const t={x:Wr(e,"x","tan")};return Fr.runKernel(Ss,t)}});function ah(e,t){ee(e);const n=zr(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return jr(e,null,n,t)}function ih(e,t,n){if(ee(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=zr(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return jr(e,t,s,n)}function oh(e,t,n){if(ee(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=zr(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return jr(e,t,s,n)}function lh(e,t,n){if(ee(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=zr(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return jr(e,t,s,n)}function uh(e,t,n){if(ee(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=zr(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return jr(e,t=t||s,s,n)}const ch=Gr({topk_:function(e,t=1,n=!0){const s=Wr(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Fr.runKernel(Ts,a,i);return{values:o,indices:l}}}),hh=Gr({truncatedNormal_:function(e,t=0,n=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new xc(t,n,s,!0,r),i=Pa(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}}),ph=Gr({unique_:function(e,t=0){const n=Wr(e,"x","unique","string_or_numeric");Z(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Fr.runKernel(As,s,r);return{values:a,indices:i}}}),dh=Gr({unsortedSegmentSum_:function(e,t,n){const s=Wr(e,"x","unsortedSegmentSum"),r=Wr(t,"segmentIds","unsortedSegmentSum","int32");Z(ae(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Fr.runKernel(Ds,a,i)}}),fh=Gr({unstack_:function(e,t=0){const n=Wr(e,"x","unstack","string_or_numeric");Z(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Fr.runKernel(Rs,s,r)}});function mh(e,t=!0,n,s){return Fr.makeVariable(e,t,n,s)}function gh(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=Pa(e,"int32"),r=Pa([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}const yh=async function(e){const t=Wr(e,"condition","whereAsync","bool"),n=await t.data(),s=gh(t.shape,n);return e!==t&&t.dispose(),s},bh=async function(e,t,n){const s=Wr(e,"tensor","boolMask"),r=Wr(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;Z(i>0,(()=>"mask cannot be scalar")),Q(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+i;e++)l*=o[e];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=xl(s,u),h=xl(r,[-1]),p=await yh(h),d=eh(p,[1]),f=du(c,d,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f},xh=Gr({equalStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","equalStrict"),s=Wr(t,"b","equalStrict");return Q(n.shape,s.shape,"Error in equalStrict: "),tu(n,s)}}),wh=Gr({greaterEqualStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","greaterEqualStrict"),s=Wr(t,"b","greaterEqualStrict");return Q(n.shape,s.shape,"Error in greaterEqualStrict: "),mu(n,s)}}),kh=Gr({greaterStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","greaterStrict"),s=Wr(t,"b","greaterStrict");return Q(n.shape,s.shape,"Error in greaterStrict: "),fu(n,s)}}),vh=Gr({lessEqualStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","lessEqualStrict"),s=Wr(t,"b","lessEqualStrict");return Q(n.shape,s.shape,"Error in lessEqualStrict: "),vu(n,s)}}),Ih=Gr({lessStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","lessStrict"),s=Wr(t,"b","lessStrict");return Q(n.shape,s.shape,"Error in lessStrict: "),ku(n,s)}}),Nh=Gr({notEqualStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","notEqualStrict"),s=Wr(t,"b","notEqualStrict");return Q(n.shape,s.shape,"Error in notEqualStrict: "),sc(n,s)}}),Sh=Gr({addStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","addStrict"),s=Wr(t,"b","addStrict");return Q(n.shape,s.shape,"Error in addStrict: "),yo(n,s)}}),Ch=Gr({divStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","div"),s=Wr(t,"b","div");return Q(n.shape,s.shape,"Error in divideStrict: "),xo(n,s)}}),$h=Gr({maximumStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","maximumStrict"),s=Wr(t,"b","maximumStrict");return Q(n.shape,s.shape,"Error in maximumStrict: "),Uo(n,s)}}),Th=Gr({minimumStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","minimumStrict"),s=Wr(t,"b","minimumStrict");return Q(n.shape,s.shape,"Error in minimumStrict: "),Ju(n,s)}}),Eh=Gr({modStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","modStrict"),s=Wr(t,"b","modStrict");return Q(n.shape,s.shape,"Error in modStrict: "),Qu(n,s)}}),Ah=Gr({mulStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","mul"),s=Wr(t,"b","mul");return Q(n.shape,s.shape,"Error in multiplyStrict: "),wo(n,s)}}),Rh=Gr({powStrict_:function(e,t){return Zi("strict variants of ops have been deprecated and will be removed in future"),Q(e.shape,t.shape,"Error in powStrict: "),Mo(e,t)}}),Dh=Gr({squaredDifferenceStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","squaredDifferenceStrict"),s=Wr(t,"b","squaredDifferenceStrict");return Q(n.shape,s.shape,"Error in squaredDifferenceStrict: "),Qc(n,s)}}),Fh=Gr({subStrict_:function(e,t){Zi("strict variants of ops have been deprecated and will be removed in future");const n=Wr(e,"a","subStrict"),s=Wr(t,"b","subStrict");return Q(n.shape,s.shape,"Error in subStrict: "),Lo(n,s)}});function _h(e,t,n=null){if(0===e.rank)return Po(e);if(1!==e.rank&&null===n)return _h(xl(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Ru(Po(e),n);if(t===1/0)return Au(Po(e),n);if(t===-1/0)return Yu(Po(e),n);if("euclidean"===t||2===t)return ko(Ru(Mo(Po(e),Ro(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Au(Ru(Po(e),n[0]),n[1]-1);if(t===1/0)return Au(Ru(Po(e),n[1]),n[0]);if(t===-1/0)return Yu(Ru(Po(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return ko(Ru(vo(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Oh=Gr({norm_:function(e,t="euclidean",n=null,s=!1){const r=_h(e=Wr(e,"x","norm"),t,n);let a=r.shape;if(s){const t=pe(n,e.shape);a=Mu(r.shape,t)}return xl(r,a)}}),Mh=Gr({movingAverage_:function(e,t,n,s,r=!0){const a=Wr(e,"v","movingAverage"),i=Wr(t,"x","movingAverage"),o=Wr(n,"decay","movingAverage");Cr(a,i),Z(re(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=Ro(1),u=Lo(l,o);let c=wo(Lo(i,a),u);if(r){Z(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=Wr(s,"step","movingAverage");c=xo(c,Lo(l,Mo(o,e)))}return yo(a,c)}}),Lh=Gr({scatterND_:function(e,t,n){const s=Wr(e,"indices","scatterND","int32"),r=Wr(t,"updates","scatterND");gi(r,s,n);const a={indices:s,updates:r},i={shape:n};return Fr.runKernel(is,a,i)}}),zh=Gr({sparseToDense_:function(e,t,n,s=0){const r=Wr(e,"sparseIndices","sparseToDense","int32"),a=Wr(t,"sparseValues","sparseToDense"),i=Wr(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Fr.runKernel(Is,o,l)}}),Ph=Gr({gatherND_:function(e,t){const n=Wr(t,"indices","gatherND","int32"),s={params:Wr(e,"x","gatherND"),indices:n};return Fr.runKernel(Zt,s)}}),Bh=Gr({dropout_:function(e,t,n,s){const r=Wr(e,"x","dropout");if(Z("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),Z(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof mr?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(re(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=xo(pu(yo(Nc(a,0,1,"float32",s),i)),i);return wo(r,o)}});function Wh(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Vh(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return ah(r,"float32")}const Uh=async function(e,t,n=1){const s=Wr(e,"predictions","inTopK"),r=Wr(t,"targets","inTopK");Z(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),Z(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),Q(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];Z(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],c=fe("bool",l);for(let e=0;e<l;e++){const t=e*u,s=i.subarray(t,t+u),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){c[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),qr(c,r.shape,"bool")},Gh=Gr({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=xl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=xl(t,[1,t.shape[0],t.shape[1],t.shape[2]])),Z(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),Z(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),Z(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];Z(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),Z(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=i&&Z(ae(r),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${i} but got pad ${r}.`));const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Fr.runKernel(xt,h,p)}});function Hh(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return wo(e,nh(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function jh(e,t){let n=t;const s=Wo(e.shape,t.shape);return s.length>0&&(n=Ru(n,s)),xl(n,e.shape)}function qh(e,t,n,s){if("linear"===t)return e;if("relu"===t)return Tc(e);if("elu"===t)return au(e);if("relu6"===t)return Ec(e);if("prelu"===t)return mc(e,n);if("leakyrelu"===t)return wu(e,s);throw new Error(`Unknown fused activation ${t}.`)}const Kh=(e,t)=>!(e>0)||"linear"===t,Xh=Gr({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===Kh(Fr.state.gradientDepth,l)){let h=Bl(e,t,n,s,r,a,i);return null!=o&&(h=yo(h,o)),qh(h,l,u,c)}const h=Wr(e,"x","conv2d"),p=Wr(t,"filter","conv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=xl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),Z(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),Z(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),null!=i&&Z(ae(s),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`)),Z(d.shape[3]===p.shape[2],(()=>`Error in conv2d: depth of input (${d.shape[3]}) must match input depth for filter ${p.shape[2]}.`)),Z(yl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Z("NHWC"===r,(()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`));const m=ul(d.shape,p.shape,n,a,s,i);let g,y;null!=o&&(g=Wr(o,"bias","fused conv2d"),[g]=Sr(g,h),Vo(m.outShape,g.shape)),null!=u&&(y=Wr(u,"prelu weights","fused conv2d"));const b=(e,t)=>{const[r,i,o,u]=t,c=Hh(e,o,l);Z(gl(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const h=[Vl(i.shape,c,r,n,s),Gh(i,c,r.shape,n,s)];if(null!=u){const e=jh(u,c);h.push(e)}return h},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==o?Eo(((e,t,n)=>{let s=Fr.runKernel(zs,x,w);return n([t,e,s]),f&&(s=xl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p):Eo(((e,t,n,s)=>{let r=Fr.runKernel(zs,x,w);return s([t,e,r,n]),f&&(r=xl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p,g)}}),Yh=Gr({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=xl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=xl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Fr.runKernel(Rt,u,c)}}),Jh=Gr({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=xl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Fr.runKernel(Dt,u,c);return l?xl(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Zh=Gr({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Kh(Fr.state.gradientDepth,l)){let h=Zl(e,t,n,s,r,a,i);return null!=o&&(h=yo(h,o)),qh(h,l,u,c)}const h=Wr(e,"x","depthwiseConv2d"),p=Wr(t,"filter","depthwiseConv2d");let d=h,f=!1;3===h.rank&&(f=!0,d=xl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),Z(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),Z(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),Z(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),Z(yl(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),null!=i&&Z(ae(s),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${i} but got pad ${s}.`));const m=ul(d.shape,p.shape,n,a,s,i,!0);let g,y;null!=o&&(g=Wr(o,"bias","fused conv2d"),[g]=Sr(g,h),Vo(m.outShape,g.shape)),null!=u&&(y=Wr(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{Z(gl(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,c]=t,h=Hh(e,u,l),p=Jh(o.shape,h,r,n,s,a,i),d=Yh(o,h,r.shape,n,s,a,i);return null!=c?[p,d,jh(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};return null==o?Eo(((e,t,n)=>{let s=Fr.runKernel(Ps,x,w);return n([t,e,s]),f&&(s=xl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p):Eo(((e,t,n,s)=>{let r=Fr.runKernel(Ps,x,w);return s([t,e,r,n]),f&&(r=xl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p,g)}}),Qh=Gr({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===Kh(Fr.state.gradientDepth,a)){let l=ii(e,t,n,s);return null!=r&&(l=yo(l,r)),qh(l,a,i,o)}let l=Wr(e,"a","fused matMul"),u=Wr(t,"b","fused matMul");[l,u]=Sr(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=ne(f),y=ne(m);Z(l.rank>=2&&u.rank>=2&&l.rank===u.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`)),Z(re(f,m),(()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and ${u.shape} must match.`)),Z(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=l.shape.slice(0,-2).concat([p,d]),x=xl(l,n?[g,c,p]:[g,p,c]),w=xl(u,s?[y,d,h]:[y,h,d]);let k,v;null!=r&&(k=Wr(r,"bias","fused matMul"),[k]=Sr(k,l),Vo(b,k.shape)),null!=i&&(v=Wr(i,"prelu weights","fused matMul"));const I=(e,t)=>{const[i,o,l,u]=t,c=Hh(xl(e,l.shape),l,a);let h,p;return n||s?!n&&s?(h=ii(c,o,!1,!1),p=ii(c,i,!0,!1)):n&&!s?(h=ii(o,c,!1,!0),p=ii(i,c,!1,!1)):(h=ii(o,c,!0,!0),p=ii(c,i,!0,!0)):(h=ii(c,o,!1,!0),p=ii(i,c,!0,!1)),null!=r?[h,p,jh(u,c)]:[h,p]},N={a:x,b:w,bias:k,preluActivationWeights:v},S={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};return null==r?Eo(((e,t,n)=>{const s=Fr.runKernel(Ls,N,S);return n([e,t,s]),{value:xl(s,b),gradFunc:I}}))(x,w):Eo(((e,t,n,s)=>{const r=Fr.runKernel(Ls,N,S);return s([e,t,r,n]),{value:xl(r,b),gradFunc:I}}))(x,w,k)}}),ep=Gr({hammingWindow_:function(e){return Vh(e,.54,.46)}}),tp=Gr({hannWindow_:function(e){return Vh(e,.5,.5)}}),np=Gr({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(Nl(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=vl([Nl(e,a,t-s),_o([s],r)]);i.push(o),a+=n}return 0===i.length?ih([],[0,t]):xl(vl(i),[i.length,t])}}),sp=Gr({stft_:function(e,t,n,s,r=tp){null==s&&(s=Wh(t));const a=np(e,t,n),i=wo(a,r(t)),o=[];for(let e=0;e<a.shape[0];e++)o.push(Zc(Nl(i,[e,0],[1,t]),s));return vl(o)}}),rp=Gr({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Wr(e,"image","cropAndResize"),o=Wr(t,"boxes","cropAndResize","float32"),l=Wr(n,"boxInd","cropAndResize","int32"),u=o.shape[0];Z(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),Z(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),Z(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),Z(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),Z(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),Z("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Fr.runKernel($t,c,h)}}),ap=Gr({flipLeftRight_:function(e){const t=Wr(e,"image","flipLeftRight","float32");Z(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Fr.runKernel(qt,n,{})}}),ip=Gr({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Wr(e,"image","rotateWithOffset","float32");Z(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Fr.runKernel(Ms,a,i)}});function op(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),Z(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),Z(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),Z(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),Z(1===t.rank,(()=>"scores must be a 1D tensor")),Z(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),Z(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const lp=Gr({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Wr(e,"boxes","nonMaxSuppression"),i=Wr(t,"scores","nonMaxSuppression"),o=op(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Fr.runKernel(Mn,{boxes:a,scores:i},l)}});function up(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||cp)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function cp(e,t){return e>t?1:e<t?-1:0}function hp(e,t,n,s,r){return fp(e,t,n,s,r,0)}function pp(e,t,n,s,r,a){return fp(e,t,n,s,r,0,!1,a,!0)}function dp(e,t,n,s,r,a){return fp(e,t,n,s,r,a,!0)}function fp(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(yp);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=mp(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*gp(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&up(u,t,yp))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function mp(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function gp(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function yp(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const bp=Gr({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Wr(e,"boxes","nonMaxSuppression"),o=Wr(t,"scores","nonMaxSuppression"),l=op(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Fr.runKernel(zn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),xp=Gr({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Wr(e,"boxes","nonMaxSuppression"),o=Wr(t,"scores","nonMaxSuppression"),l=op(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Fr.runKernel(Ln,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),wp=Gr({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Wr(e,"images","resizeBilinear");Z(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),Z(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),Z(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=xl(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Fr.runKernel(es,o,l);return i?xl(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),kp=Gr({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Wr(e,"images","resizeNearestNeighbor");Z(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),Z(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),Z("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),Z(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=xl(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Fr.runKernel(Zn,o,l);return i?xl(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),vp=Gr({bandPart_:function(e,t,n){Z(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),Z(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Wr(e,"a","bandPart");Z(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=a),n<0&&(n=i);const o=xl(Sc(0,a,1,"int32"),[-1,1]),l=Sc(0,i,1,"int32"),u=Lo(o,l),c=Vu(vu(u,Ro(+t,"int32")),mu(u,Ro(-n,"int32"))),h=rc([a,i],s.dtype);return xl(th(fh(xl(s,[-1,a,i])).map((e=>nu(c,e,h)))),r)}}),Ip=Gr({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,Z(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)Z(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Jc(e,e.shape[0],0).map((e=>eh(e,[0])));Z(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Fr.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=wo(Ru(wo(n[s],e)),n[s]);e=Lo(e,t)}return xo(e,Oh(e,"euclidean"))})));return t?th(n,0):n}});function Np(e,t=!1){return Fr.tidy((()=>{Z(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=hu(n),a=Wa(e);const i=ih([[1]],[1,1]);let o=Wa(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Fr.tidy((()=>{const t=Nl(a,[e,e],[n-e,1]),l=Oh(t),u=Nl(a,[e,e],[1,1]),c=nu(fu(u,0),ih([[-1]]),ih([[1]])),h=Lo(u,wo(c,l)),p=xo(t,h);o=1===p.shape[0]?Wa(i):vl([i,Nl(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=$u(xo(ii(c,h),l)),f=Nl(a,[e,0],[n-e,s]),m=wo(d,o),g=li(o);if(0===e)a=Lo(f,ii(m,ii(g,f)));else{const t=Lo(f,ii(m,ii(g,f)));a=vl([Nl(a,[0,0],[e,s]),t],0)}const y=li(m),b=Nl(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Lo(b,ii(ii(b,o),y));else{const t=Lo(b,ii(ii(b,o),y));r=vl([Nl(r,[0,0],[n,e]),t],1)}return[o,a,r]})),ro([t,l,u])}return!t&&n>s&&(r=Nl(r,[0,0],[n,s]),a=Nl(a,[0,0],[s,s])),[r,a]}))}const Sp=Gr({qr_:function(e,t=!1){if(Z(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Np(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=fh(xl(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];return s.forEach((e=>{const[n,s]=Np(e,t);r.push(n),a.push(s)})),[xl(th(r,0),e.shape),xl(th(a,0),e.shape)]}}});var Cp;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Cp||(Cp={}));const $p=Gr({computeWeightedLoss_:function(e,t,n=Cp.SUM_BY_NONZERO_WEIGHTS){const s=Wr(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Wr(t,"weights","computeWeightedLoss"));const a=null==r?s:wo(s,r);if(n===Cp.NONE)return a;if(n===Cp.SUM)return Ru(a);if(n===Cp.MEAN){if(null==r)return Xu(a);{const e=s.size/r.size,t=xo(Ru(a),Ru(r));return e>1?xo(t,Ro(e)):t}}if(n===Cp.SUM_BY_NONZERO_WEIGHTS){if(null==r)return xo(Ru(a),Ro(s.size));{const e=wo(r,ac(s.shape)),t=Ba(Ru(sc(e,Ro(0))),"float32");return xo(Ru(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),Tp=Gr({absoluteDifference_:function(e,t,n,s=Cp.SUM_BY_NONZERO_WEIGHTS){const r=Wr(e,"labels","absoluteDifference"),a=Wr(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Wr(n,"weights","absoluteDifference")),Q(r.shape,a.shape,"Error in absoluteDifference: ");const o=Po(Lo(r,a));return $p(o,i,s)}}),Ep=Gr({cosineDistance_:function(e,t,n,s,r=Cp.SUM_BY_NONZERO_WEIGHTS){const a=Wr(e,"labels","cosineDistance"),i=Wr(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Wr(s,"weights","cosineDistance")),Q(a.shape,i.shape,"Error in cosineDistance: ");const l=Ro(1),u=Lo(l,Ru(wo(a,i),n,!0));return $p(u,o,r)}}),Ap=Gr({hingeLoss_:function(e,t,n,s=Cp.SUM_BY_NONZERO_WEIGHTS){let r=Wr(e,"labels","hingeLoss");const a=Wr(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Wr(n,"weights","hingeLoss")),Q(r.shape,a.shape,"Error in hingeLoss: ");const o=Ro(1);r=Lo(wo(Ro(2),r),o);const l=Tc(Lo(o,wo(r,a)));return $p(l,i,s)}}),Rp=Gr({huberLoss_:function(e,t,n,s=1,r=Cp.SUM_BY_NONZERO_WEIGHTS){const a=Wr(e,"labels","huberLoss"),i=Wr(t,"predictions","huberLoss");let o=null;null!=n&&(o=Wr(n,"weights","huberLoss")),Q(a.shape,i.shape,"Error in huberLoss: ");const l=Ro(s),u=Po(Lo(i,a)),c=Ju(u,l),h=Lo(u,c),p=yo(wo(Ro(.5),vo(c)),wo(l,h));return $p(p,o,r)}}),Dp=Gr({logLoss_:function(e,t,n,s=1e-7,r=Cp.SUM_BY_NONZERO_WEIGHTS){const a=Wr(e,"labels","logLoss"),i=Wr(t,"predictions","logLoss");let o=null;null!=n&&(o=Wr(n,"weights","logLoss")),Q(a.shape,i.shape,"Error in logLoss: ");const l=Ro(1),u=Ro(s),c=$u(wo(a,Su(yo(i,u)))),h=wo(Lo(l,a),Su(yo(Lo(l,i),u))),p=Lo(c,h);return $p(p,o,r)}}),Fp=Gr({meanSquaredError_:function(e,t,n,s=Cp.SUM_BY_NONZERO_WEIGHTS){const r=Wr(e,"labels","meanSquaredError"),a=Wr(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Wr(n,"weights","meanSquaredError")),Q(r.shape,a.shape,"Error in meanSquaredError: ");const o=Qc(r,a);return $p(o,i,s)}}),_p=Gr({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Cp.SUM_BY_NONZERO_WEIGHTS){let a=Wr(e,"multiClassLabels","sigmoidCrossEntropy");const i=Wr(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Wr(n,"weights","sigmoidCrossEntropy")),Q(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=Ro(s),t=Ro(1),n=Ro(.5);a=yo(wo(a,Lo(t,e)),wo(n,e))}const l=function(e,t){const n=Wr(e,"labels","sigmoidCrossEntropyWithLogits"),s=Wr(t,"logits","sigmoidCrossEntropyWithLogits");Q(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Tc(s),a=wo(s,n),i=Cu(ou($u(Po(s))));return yo(Lo(r,a),i)}(a,i);return $p(l,o,r)}}),Op=Gr({softmaxCrossEntropy_:function(e,t,n,s=0,r=Cp.SUM_BY_NONZERO_WEIGHTS){let a=Wr(e,"onehotLabels","softmaxCrossEntropy");const i=Wr(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Wr(n,"weights","softmaxCrossEntropy")),Q(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=Ro(s),t=Ro(1),n=Ro(a.shape[1]);a=yo(wo(a,Lo(t,e)),xo(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return Eo(((e,t,s)=>{const r=Wu(t,[n],!0),a=Lo(Ba(t,"float32"),r);s([e,a]);const i=$u(wo(a,e));return{value:Ru(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Mu(e.shape,[n]);return[wo(xl(e,a),Lo(Ba(s,"float32"),ou(r))),wo(xl(e,a),Lo(ou(r),Ba(s,"float32")))]}}}))(e,t)}(a,i);return $p(l,o,r)}}),Mp={fft:Kc,ifft:Xc,rfft:Zc,irfft:Yc},Lp={hammingWindow:ep,hannWindow:tp,frame:np,stft:sp},zp={flipLeftRight:ap,resizeNearestNeighbor:kp,resizeBilinear:wp,rotateWithOffset:ip,cropAndResize:rp,nonMaxSuppression:lp,nonMaxSuppressionAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Wr(e,"boxes","nonMaxSuppressionAsync"),i=Wr(t,"scores","nonMaxSuppressionAsync"),o=op(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=hp(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),ah(h,"int32")},nonMaxSuppressionWithScore:bp,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Wr(e,"boxes","nonMaxSuppressionAsync"),o=Wr(t,"scores","nonMaxSuppressionAsync"),l=op(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=dp(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:ah(p,"int32"),selectedScores:ah(d)}},nonMaxSuppressionPadded:xp,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Wr(e,"boxes","nonMaxSuppressionAsync"),o=Wr(t,"scores","nonMaxSuppressionAsync"),l=op(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=pp(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:ah(f,"int32"),validOutputs:Ro(m,"int32")}}},Pp={bandPart:vp,gramSchmidt:Ip,qr:Sp},Bp={absoluteDifference:Tp,computeWeightedLoss:$p,cosineDistance:Ep,hingeLoss:Ap,huberLoss:Rp,logLoss:Dp,meanSquaredError:Fp,sigmoidCrossEntropy:_p,softmaxCrossEntropy:Op};class Wp{static sgd(e){return new Ho(e)}static momentum(e,t,n=!1){return new jo(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new qo(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new zo(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Fo(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new Go(e,t,n,s,r)}static adagrad(e,t=.1){return new Oo(e,t)}}const Vp={sgd:Wp.sgd,momentum:Wp.momentum,adadelta:Wp.adadelta,adagrad:Wp.adagrad,rmsprop:Wp.rmsprop,adamax:Wp.adamax,adam:Wp.adam},Up="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Gp(){return new Promise((e=>Up((()=>e()))))}function Hp(e,t){const n=e[0].length;e.forEach(((e,t)=>{Z(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),Z(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)Z(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function jp(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}const qp=30;function Kp(e){return e<=qp?e:$e(e,Math.floor(Math.sqrt(e)))}function Xp(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function Yp(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function Jp(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Zp(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function Qp(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function ed(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}const td=1.7580993408473768,nd=1.0507009873554805,sd=.3275911,rd=.254829592,ad=-.284496736,id=1.421413741,od=-1.453152027,ld=1.061405429;function ud(...e){Pe().getBool("IS_TEST")||console.warn(...e)}function cd(...e){Pe().getBool("IS_TEST")||console.log(...e)}function hd(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function pd(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function dd(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function fd(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function md(e,t){return{real:e[2*t],imag:e[2*t+1]}}function gd(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function yd(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function bd(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}function xd(e,t,n=0){let s=[];if("number"==typeof t)Z(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{Z(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}Z(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function wd(e,t){let n,s=!1;for(e<=qp?(n=e,s=!0):n=$e(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=$e(e,n+1);return n}function kd(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function vd(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function Id(e,t,n){if("complex64"===t){if("complex64"===e.dtype)return e.clone();const t=rc(e.shape),s=Ba(e,"float32"),r=n.complex(s,t);return t.dispose(),s.dispose(),r}if(!be(e.dtype,t))return Fr.makeTensorFromDataId(e.dataId,e.shape,t);if("complex64"===e.dtype){const s=n.real(e),r=Ba(s,t);return s.dispose(),r}if("int32"===t)return n.int(e);if("bool"===t){const t=Ro(0,e.dtype),s=n.notEqual(e,t);return t.dispose(),s}throw new Error(`Error in Cast: failed to cast ${e.dtype} to ${t}`)}function Nd(e,t){return Fr.makeTensorFromDataId(e.dataId,t,e.dtype)}function Sd(e){try{return e.map((e=>cr(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Cd(e){return e.map((e=>ur(e)))}const $d={kernelName:Ge,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(e,nh(Ba(n,"float32"),-1))}}},Td={kernelName:He,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=vo(Ba(n,"float32")),s=ko(Lo(Ro(1),t));return $u(xo(e,s))}}}},Ed={kernelName:je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ko(Lo(vo(Ba(n,"float32")),1));return xo(e,t)}}}},Ad={kernelName:qe,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Vo(n.shape,s.shape);return{a:()=>{let t=e;const s=Wo(n.shape,r);return s.length>0&&(t=Ru(t,s)),xl(t,n.shape)},b:()=>{let t=e;const n=Wo(s.shape,r);return n.length>0&&(t=Ru(t,n)),xl(t,s.shape)}}}},Rd={kernelName:Ke,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},Dd={kernelName:Je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Io(n)}}},Fd={kernelName:Ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Io(n)}}},_d={kernelName:Qe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,ko(Lo(Ro(1),vo(Ba(n,"float32")))))}}},Od={kernelName:et,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ko(yo(Ro(1),vo(Ba(n,"float32"))));return xo(e,t)}}}},Md={kernelName:st,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Vo(n.shape,s.shape);return{a:()=>{const t=yo(vo(n),vo(s));let a=wo(e,xo(s,t));const i=Wo(n.shape,r);return i.length>0&&(a=Ru(a,i)),xl(a,n.shape)},b:()=>{const t=yo(vo(n),vo(s));let a=$u(wo(e,xo(n,t)));const i=Wo(s.shape,r);return i.length>0&&(a=Ru(a,i)),xl(a,s.shape)}}}},Ld={kernelName:tt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,yo(vo(Ba(n,"float32")),1))}}},zd={kernelName:nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,Lo(Ro(1),vo(Ba(n,"float32"))))}}},Pd=Gr({avgPool3dGrad_:function(e,t,n,s,r=[1,1,1],a,i){const o=Wr(e,"dy","avgPool3dGrad"),l=Wr(t,"input","avgPool3dGrad");let u=o,c=l,h=!1;4===l.rank&&(h=!0,u=xl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),c=xl(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),Z(5===u.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`)),Z(5===c.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`)),Z(yl(s,r),(()=>`Error in avgPool3dGrad: Either strides or dilations must be 1. Got strides ${s} and dilations '${r}'`)),null!=i&&Z(ae(a),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const p={dy:u,input:c},d={filterSize:n,strides:s,dilations:r,pad:a,dimRoundingMode:i},f=Fr.runKernel(ot,p,d);return h?xl(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Bd={kernelName:it,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,dilations:i,pad:o,dimRoundingMode:l}=n,u=null==i?[1,1,1]:i;return{x:()=>Pd(e,s,r,a,u,o,l)}}},Wd=Gr({avgPoolGrad_:function(e,t,n,s,r){const a=Wr(e,"dy","avgPoolGrad"),i=Wr(t,"input","avgPoolGrad");Z(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=xl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=xl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),Z(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),Z(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=Fr.runKernel(at,c,h);return u?xl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Vd={kernelName:rt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>Wd(e,s,r,a,i)}}},Ud={kernelName:lt,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>ii(e,r,!1,!1),b:()=>ii(e,s,!0,!1)}:a&&!i?{a:()=>ii(r,e,!1,!0),b:()=>ii(s,e,!1,!1)}:{a:()=>ii(r,e,!0,!0),b:()=>ii(e,s,!0,!0)}:{a:()=>ii(e,r,!1,!0),b:()=>ii(s,e,!0,!1)}}},Gd={kernelName:ut,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>dc(e,s,r)}}},Hd={kernelName:ht,gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>Ru(e,o,!0)}}},jd={kernelName:pt,gradFunc:e=>({x:()=>e.clone()})},qd={kernelName:dt,gradFunc:e=>({x:()=>Io(e)})},Kd={kernelName:ft,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>nu(Vu(mu(s,r),vu(s,a)),e,Io(e))}}},Xd={kernelName:gt,inputsToSave:["x"],gradFunc:$d.gradFunc},Yd={kernelName:yt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=pe(r,t[0].shape)[0],i=s.map((e=>e[a]));return Jc(e,i,a).map((e=>()=>e))}},Jd={kernelName:bt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return Z(gl(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>Vl(s.shape,e,r,i,o,l),filter:()=>Gh(s,e,r.shape,i,o,l)}}},Zd={kernelName:wt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Bl(e,r,a,i,o,1,l),filter:()=>Gh(e,s,r.shape,a,i,o,l)}}},Qd=Gr({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=xl(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=xl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),Z(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),Z(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),Z(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),Z(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),Z(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Fr.runKernel(vt,o,l)}}),ef={kernelName:kt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;Z(gl(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>Hl(i.shape,e,o,r,a),filter:()=>Qd(i,e,o.shape,r,a)}}},tf={kernelName:Nt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo($u(Wc(Ba(n,"float32"))),e)}}},nf={kernelName:St,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(Vc(Ba(n,"float32")),e)}}},sf={kernelName:Ct,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=zu([r],s.rank);let n=Xl(e,r,a,!i);return null!=t&&(n=li(n,t)),n}}}},rf={kernelName:At,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;Z(gl(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return Z(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),Z(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),Z(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),Z(yl(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),null!=i&&Z(ae(a),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`)),{x:()=>Jh(l.shape,e,u,r,a,s,i),filter:()=>Yh(l,e,u.shape,r,a,s,i)}}},af={kernelName:_t,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Fr.runKernel(Ot,a,n),filter:()=>Fr.runKernel(Mt,i,n)}}},of={kernelName:zt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Fr.runKernel(Pt,s)}}},lf={kernelName:Bt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=wo(ou($u(vo(n))),2/Math.sqrt(Math.PI));return{x:()=>wo(e,s)}}},uf={kernelName:Vt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(e,n)}}},cf={kernelName:Ut,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>xl(e,n.shape)}}},hf={kernelName:Gt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(e,ou(n))}}},pf={kernelName:Kt,gradFunc:e=>({x:()=>Io(e)})},df={kernelName:Xt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Vo(n.shape,s.shape);return{a:()=>{const t=xo(e,Ba(s,"float32")),a=Wo(n.shape,r);return a.length>0?xl(Ru(t,a),n.shape):t},b:()=>{let t=wo(e,Ba(n,"float32"));const a=Wo(s.shape,r);a.length>0&&(t=xl(Ru(t,a),s.shape));const i=vo(s);return $u(xo(t,Ba(i,"float32")))}}}},ff={kernelName:Yt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?Ro(1):o,u=Wo(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Lo(r,a),p=wo(e,l),d=Mc(yo(i,Ro(s))),f=wo(wo(wo(d,d),d),Ro(-.5));return{x:()=>1===a.rank?xl(wo(wo(e,cu(xl(d,[1,1,1,a.shape[0]]),c)),l),r.shape):xl(wo(wo(e,d),l),r.shape),mean:()=>{let e=wo(wo(d,Ro(-1)),p);return 1===a.rank&&(e=Ru(e,u)),xl(e,a.shape)},variance:()=>{let e=wo(wo(f,h),p);return 1===a.rank&&(e=Ru(e,u)),xl(e,a.shape)},scale:()=>{const t=wo(h,d);let n=wo(e,t);return 1===a.rank&&(n=Ru(n,u)),xl(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Ru(t,u)),xl(t,a.shape)}}}},mf={kernelName:Jt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=pe(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=gf(0,l),p=gf(l+1,l+1+c),d=yf([o,[n],u]),f=xl(e,d),m=xl(r,[n]),g=yf([[l],h,p]),y=li(f,g);let b=dh(y,m,s.shape[i]);const x=Pu(g);return b=li(b,x),b},indices:()=>r}}};function gf(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function yf(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const bf={kernelName:en,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Io(n),b:()=>Io(s)}}},xf={kernelName:tn,gradFunc:e=>({x:()=>Ba(e,"float32")})},wf={kernelName:rn,gradFunc:e=>({x:()=>Io(e)})},kf={kernelName:an,gradFunc:e=>({x:()=>Io(e)})},vf={kernelName:on,gradFunc:e=>({x:()=>Io(e)})},If={kernelName:ln,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=fu(s,0);return{x:()=>nu(a,e,wo(e,r))}}},Nf={kernelName:dn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,yo(n,1))}}},Sf={kernelName:pn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,Ba(n,"float32"))}}},Cf={kernelName:yn,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=ou(s);return Lo(e,wo(Ru(e,r,!0),t))}}}},$f=Gr({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Fr.runKernel(xn,o,l)}}),Tf={kernelName:bn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>$f(s,r,e,a,i,o,l)}}};function Ef(e,t,n,s){return t.rank<n.rank&&(t=xl(t,Mu(t.shape,s))),e.rank<n.rank&&(e=xl(e,Mu(e.shape,s))),{x:()=>wo(e,Ba(tu(n,t),e.dtype))}}const Af={kernelName:wn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=Ef(e,t[1],a,pe(r,a.shape));return{x:()=>i.x()}}},Rf={kernelName:kn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>wo(e,Ba(mu(n,s),"float32")),b:()=>wo(e,Ba(ku(n,s),"float32"))}}},Df=Gr({maxPool3dGrad_:function(e,t,n,s,r,a=[1,1,1],i,o){const l=Wr(e,"dy","maxPool3dGrad"),u=Wr(t,"input","maxPool3dGrad"),c=Wr(n,"output","maxPool3dGrad");let h=l,p=u,d=c,f=!1;4===u.rank&&(f=!0,h=xl(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=xl(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),d=xl(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),Z(5===h.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`)),Z(5===p.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`)),Z(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),Z(yl(r,a),(()=>`Error in maxPool3dGrad: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`)),null!=o&&Z(ae(i),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${i}.`));const m={dy:h,input:p,output:d},g={filterSize:s,strides:r,dilations:a,pad:i,dimRoundingMode:o},y=Fr.runKernel(Sn,m,g);return f?xl(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}}),Ff={kernelName:Nn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,dilations:o,pad:l,dimRoundingMode:u}=n,c=null==o?[1,1,1]:o;return{x:()=>Df(e,s,r,a,i,c,l,u)}}},_f=Gr({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Wr(e,"dy","maxPoolGrad"),l=Wr(t,"input","maxPoolGrad"),u=Wr(n,"output","maxPoolGrad");Z(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),Z(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),Z(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),null!=i&&Z(ae(a),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${a}.`));const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Fr.runKernel(In,c,h)}}),Of={kernelName:Vn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Nl(e,a,s.shape)}}},Mf={kernelName:ys,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>$l(e,s,r)}}},Lf={kernelName:bs,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>vl(e,s)}}},zf=[$d,Td,Ed,Ad,Rd,Dd,Fd,_d,Od,Md,Ld,zd,Bd,Vd,Ud,Gd,Hd,jd,qd,Kd,Xd,Yd,Zd,Jd,ef,tf,nf,sf,rf,af,{kernelName:Lt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Vo(n.shape,s.shape);return{a:()=>{const t=xo(e,Ba(s,"float32")),a=Wo(n.shape,r);return a.length>0?xl(Ru(t,a),n.shape):t},b:()=>{let t=wo(e,Ba(n,"float32"));const a=Wo(s.shape,r);a.length>0&&(t=xl(Ru(t,a),s.shape));const i=vo(s);return $u(xo(t,Ba(i,"float32")))}}}},of,lf,uf,cf,hf,df,pf,ff,mf,bf,xf,wf,kf,vf,If,Nf,Sf,Cf,Tf,Af,Af,Rf,Ff,{kernelName:vn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>_f(e,s,r,a,i,o)}}},{kernelName:$n,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=pe(r,s.shape),i=ne(Ou(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=xl(e,t);return xo(wo(n,ac(s.shape,"float32")),i)}}}},{kernelName:Tn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=Ef(e,i,a,pe(r,a.shape));return{x:()=>o.x()}}},{kernelName:En,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>wo(e,Ba(vu(n,s),"float32")),b:()=>wo(e,Ba(fu(n,s),"float32"))}}},{kernelName:An,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Nl(e,a,s.shape)}}},{kernelName:Rn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Vo(n.shape,s.shape);return{a:()=>{const t=Wo(n.shape,r);return t.length>0?xl(Ru(e,t),n.shape):e},b:()=>{const t=wo(e,$u(pu(xo(n,s)))),a=Wo(s.shape,r);return a.length>0?xl(Ru(t,a),s.shape):t}}}},{kernelName:Fn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Vo(n.shape,s.shape);return{a:()=>{const t=wo(e,Ba(s,"float32")),a=Wo(n.shape,r);return a.length>0?xl(Ru(t,a),n.shape):t},b:()=>{const t=wo(e,Ba(n,"float32")),a=Wo(s.shape,r);return a.length>0?xl(Ru(t,a),s.shape):t}}}},{kernelName:_n,gradFunc:e=>({x:()=>$u(e)})},{kernelName:Bn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>rc(n.shape,"float32")}}},{kernelName:Pn,gradFunc:e=>({x:()=>Io(e)})},{kernelName:Wn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return fh(e,s).map((e=>()=>e))}},Of,Of,{kernelName:Gn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=Vo(a.shape,i.shape);return{a:()=>{const t=Ba(i,"float32");let n=wo(e,wo(t,Mo(a,Lo(t,Ro(1)))));const s=Wo(a.shape,o);return s.length>0&&(n=Ru(n,s)),xl(n,a.shape)},b:()=>{const t=fu(a,0),n=nu(t,Su(a),Io(a));let s=wo(e,wo(r,n));const l=Wo(i.shape,o);return l.length>0&&(s=Ru(s,l)),xl(s,i.shape)}}}},{kernelName:Hn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=fu(n,0);return{x:()=>nu(r,e,wo(e,s)),alpha:()=>{let t=nu(r,Io(e),wo(e,n));const a=Wo(s.shape,e.shape);return a.length>0&&(t=Ru(t,a)),xl(t,s.shape)}}}},{kernelName:Xn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,$u(vo(n)))}}},{kernelName:ns,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=wo(vu(n,6),nh(n));return{x:()=>wo(e,Ba(s,"float32"))}}},{kernelName:Yn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(e,Ba(nh(n),"float32"))}}},{kernelName:Jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xl(e,n.shape)}}},{kernelName:es,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Fr.runKernel(ts,r,n)}}},{kernelName:Zn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Fr.runKernel(Qn,r,n)}}},{kernelName:ss,gradFunc:(e,t,n)=>{const{dims:s}=n,r=pe(s,e.shape);return{x:()=>Ac(e,r)}}},{kernelName:rs,gradFunc:e=>({x:()=>Io(e)})},{kernelName:as,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>$u(xo(e,wo(Mo(n,1.5),2)))}}},{kernelName:os,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Ba(Io(n),"float32"),t:()=>wo(e,Ba(n,e.dtype)),e:()=>wo(e,Ba(Uu(n),e.dtype))}}},{kernelName:ls,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=fu(n,Ro(0)),s=Ro(td),r=Ro(nd),a=wo(e,r),i=wo(wo(e,s),ou(Ba(n,"float32")));return nu(t,a,i)}}}},{kernelName:ds,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(e,wo(n,Lo(Ro(1),n)))}}},{kernelName:ps,gradFunc:e=>({x:()=>Io(e)})},{kernelName:cs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(ql(Ba(n,"float32")),e)}}},{kernelName:hs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(Kl(Ba(n,"float32")),e)}}},{kernelName:us,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Di(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>lc(e,u)}}},{kernelName:xs,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=wo(e,s);return{logits:()=>Lo(a,wo(Ru(a,[r],!0),s))}}},{kernelName:fs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(e,Il(n))}}},Mf,Mf,Lf,Lf,{kernelName:ms,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,wo(ko(Ba(n,"float32")),2))}}},{kernelName:ws,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ro(2);return{a:()=>wo(e,wo(r,Lo(n,s))),b:()=>wo(e,wo(r,Lo(s,n)))}}},{kernelName:ks,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(e,wo(Ba(n,"float32"),2))}}},{kernelName:_s,gradFunc:e=>({x:()=>Io(e)})},{kernelName:vs,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Vo(n.shape,s.shape);return{a:()=>{let t=e;const s=Wo(n.shape,r);return s.length>0&&(t=Ru(t,s)),xl(t,n.shape)},b:()=>{let t=e;const n=Wo(s.shape,r);return n.length>0&&(t=Ru(t,n)),xl($u(t),s.shape)}}}},{kernelName:gs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;pe(a,s.shape).forEach((e=>{r[e]=1}));const i=xl(e,r),o=wo(i,ac(s.shape,"float32"));return{x:()=>o}}},{kernelName:Ss,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,vo(ql(n)))}}},{kernelName:Cs,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>wo(Lo(Ro(1),vo(n)),e)}}},{kernelName:$s,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=Io(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=yo(t,Nl(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=yo(t,Nl(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=yo(t,Nl(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=yo(t,Nl(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:Es,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=Pu(r);return{x:()=>li(e,a)}}},{kernelName:Rs,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>th(e,r)}}},{kernelName:Ds,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Uo(t,Io(t)),s=du(e,n);let r=mu(t,Ro(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=lu(r,e+1);r=Vu(r,ac(s.shape,"bool"));const i=Io(s);return nu(r,s,i)}(e,n)}}},{kernelName:Fs,gradFunc:e=>({x:()=>Io(e)})}];for(const e of zf)js(e);let Pf;function Bf(){return null==Pf&&(Pf=mo().epsilon()),Pf}mr.prototype.abs=function(){return this.throwIfDisposed(),Po(this)},mr.prototype.acos=function(){return this.throwIfDisposed(),Ko(this)},mr.prototype.acosh=function(){return this.throwIfDisposed(),Xo(this)},mr.prototype.addStrict=function(e){return this.throwIfDisposed(),Sh(this,e)},mr.prototype.add=function(e){return this.throwIfDisposed(),yo(this,e)},mr.prototype.all=function(e,t){return this.throwIfDisposed(),Jo(this,e,t)},mr.prototype.any=function(e,t){return this.throwIfDisposed(),Zo(this,e,t)},mr.prototype.argMax=function(e){return this.throwIfDisposed(),Qo(this,e)},mr.prototype.argMin=function(e){return this.throwIfDisposed(),el(this,e)},mr.prototype.asScalar=function(){return this.throwIfDisposed(),Z(1===this.size,(()=>"The array must have only 1 element.")),xl(this,[])},mr.prototype.asType=function(e){return this.throwIfDisposed(),Ba(this,e)},mr.prototype.as1D=function(){return this.throwIfDisposed(),xl(this,[this.size])},mr.prototype.as2D=function(e,t){return this.throwIfDisposed(),xl(this,[e,t])},mr.prototype.as3D=function(e,t,n){return this.throwIfDisposed(),xl(this,[e,t,n])},mr.prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),xl(this,[e,t,n,s])},mr.prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),xl(this,[e,t,n,s,r])},mr.prototype.asin=function(){return this.throwIfDisposed(),tl(this)},mr.prototype.asinh=function(){return this.throwIfDisposed(),nl(this)},mr.prototype.atan=function(){return this.throwIfDisposed(),sl(this)},mr.prototype.atan2=function(e){return this.throwIfDisposed(),rl(this,e)},mr.prototype.atanh=function(){return this.throwIfDisposed(),al(this)},mr.prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),wl(this,e,t,n,s)},mr.prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),$l(this,e,t)},mr.prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),Tl(this,e,t,n,s,r)},mr.prototype.broadcastTo=function(e){return this.throwIfDisposed(),Fl(this,e)},mr.prototype.cast=function(e){return this.throwIfDisposed(),Ba(this,e)},mr.prototype.ceil=function(){return this.throwIfDisposed(),_l(this)},mr.prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Ol(this,e,t)},mr.prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof mr&&(e=[e]),vl([this,...e],t)},mr.prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Wl(this,e,t,n,s,r,a)},mr.prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),Ul(this,e,t,n,s,r)},mr.prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Bl(this,e,t,n,s,r,a)},mr.prototype.cos=function(){return this.throwIfDisposed(),ql(this)},mr.prototype.cosh=function(){return this.throwIfDisposed(),Kl(this)},mr.prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Xl(this,e,t,n)},mr.prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Jl(this,e,t)},mr.prototype.depthwiseConv2D=function(e,t,n,s,r,a){return Zi("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Zl(this,e,t,n,s,r,a)},mr.prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Zl(this,e,t,n,s,r,a)},mr.prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),eu(this,e,t,n,s,r)},mr.prototype.divNoNan=function(e){return this.throwIfDisposed(),su(this,e)},mr.prototype.divStrict=function(e){return this.throwIfDisposed(),Ch(this,e)},mr.prototype.div=function(e){return this.throwIfDisposed(),xo(this,e)},mr.prototype.dot=function(e){return this.throwIfDisposed(),ru(this,e)},mr.prototype.elu=function(){return this.throwIfDisposed(),au(this)},mr.prototype.equalStrict=function(e){return this.throwIfDisposed(),xh(this,e)},mr.prototype.equal=function(e){return this.throwIfDisposed(),tu(this,e)},mr.prototype.erf=function(){return this.throwIfDisposed(),iu(this)},mr.prototype.exp=function(){return this.throwIfDisposed(),ou(this)},mr.prototype.expandDims=function(e){return this.throwIfDisposed(),lu(this,e)},mr.prototype.expm1=function(){return this.throwIfDisposed(),uu(this)},mr.prototype.fft=function(){return this.throwIfDisposed(),Kc(this)},mr.prototype.flatten=function(){return this.throwIfDisposed(),xl(this,[this.size])},mr.prototype.floor=function(){return this.throwIfDisposed(),pu(this)},mr.prototype.floorDiv=function(e){return this.throwIfDisposed(),bo(this,e)},mr.prototype.gather=function(e,t){return this.throwIfDisposed(),du(this,e,t)},mr.prototype.greaterEqualStrict=function(e){return this.throwIfDisposed(),wh(this,e)},mr.prototype.greaterEqual=function(e){return this.throwIfDisposed(),mu(this,e)},mr.prototype.greaterStrict=function(e){return this.throwIfDisposed(),kh(this,e)},mr.prototype.greater=function(e){return this.throwIfDisposed(),fu(this,e)},mr.prototype.ifft=function(){return this.throwIfDisposed(),Xc(this)},mr.prototype.irfft=function(){return this.throwIfDisposed(),Yc(this)},mr.prototype.isFinite=function(){return this.throwIfDisposed(),yu(this)},mr.prototype.isInf=function(){return this.throwIfDisposed(),bu(this)},mr.prototype.isNaN=function(){return this.throwIfDisposed(),xu(this)},mr.prototype.leakyRelu=function(e){return this.throwIfDisposed(),wu(this,e)},mr.prototype.lessEqualStrict=function(e){return this.throwIfDisposed(),vh(this,e)},mr.prototype.lessEqual=function(e){return this.throwIfDisposed(),vu(this,e)},mr.prototype.lessStrict=function(e){return this.throwIfDisposed(),Ih(this,e)},mr.prototype.less=function(e){return this.throwIfDisposed(),ku(this,e)},mr.prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Nu(this,e,t,n,s)},mr.prototype.logSigmoid=function(){return this.throwIfDisposed(),Eu(this)},mr.prototype.logSoftmax=function(e){return this.throwIfDisposed(),Du(this,e)},mr.prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Wu(this,e,t)},mr.prototype.log=function(){return this.throwIfDisposed(),Su(this)},mr.prototype.log1p=function(){return this.throwIfDisposed(),Cu(this)},mr.prototype.logicalAnd=function(e){return this.throwIfDisposed(),Vu(this,e)},mr.prototype.logicalNot=function(){return this.throwIfDisposed(),Uu(this)},mr.prototype.logicalOr=function(e){return this.throwIfDisposed(),Gu(this,e)},mr.prototype.logicalXor=function(e){return this.throwIfDisposed(),Hu(this,e)},mr.prototype.matMul=function(e,t,n){return this.throwIfDisposed(),ii(this,e,t,n)},mr.prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),ju(this,e,t,n,s)},mr.prototype.max=function(e,t){return this.throwIfDisposed(),Au(this,e,t)},mr.prototype.maximumStrict=function(e){return this.throwIfDisposed(),$h(this,e)},mr.prototype.maximum=function(e){return this.throwIfDisposed(),Uo(this,e)},mr.prototype.mean=function(e,t){return this.throwIfDisposed(),Xu(this,e,t)},mr.prototype.min=function(e,t){return this.throwIfDisposed(),Yu(this,e,t)},mr.prototype.minimumStrict=function(e){return this.throwIfDisposed(),Th(this,e)},mr.prototype.minimum=function(e){return this.throwIfDisposed(),Ju(this,e)},mr.prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Zu(this,e,t)},mr.prototype.modStrict=function(e){return this.throwIfDisposed(),Eh(this,e)},mr.prototype.mod=function(e){return this.throwIfDisposed(),Qu(this,e)},mr.prototype.mulStrict=function(e){return this.throwIfDisposed(),Ah(this,e)},mr.prototype.mul=function(e){return this.throwIfDisposed(),wo(this,e)},mr.prototype.neg=function(){return this.throwIfDisposed(),$u(this)},mr.prototype.norm=function(e,t,n){return this.throwIfDisposed(),Oh(this,e,t,n)},mr.prototype.notEqualStrict=function(e){return this.throwIfDisposed(),Nh(this,e)},mr.prototype.notEqual=function(e){return this.throwIfDisposed(),sc(this,e)},mr.prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),oi(this,e,t,n)},mr.prototype.onesLike=function(){return this.throwIfDisposed(),ic(this)},mr.prototype.pad=function(e,t){return this.throwIfDisposed(),lc(this,e,t)},mr.prototype.pool=function(e,t,n,s,r){return this.throwIfDisposed(),fc(this,e,t,n,s,r)},mr.prototype.powStrict=function(e){return this.throwIfDisposed(),Rh(this,e)},mr.prototype.pow=function(e){return this.throwIfDisposed(),Mo(this,e)},mr.prototype.prelu=function(e){return this.throwIfDisposed(),mc(this,e)},mr.prototype.prod=function(e,t){return this.throwIfDisposed(),gc(this,e,t)},mr.prototype.reciprocal=function(){return this.throwIfDisposed(),$c(this)},mr.prototype.relu=function(){return this.throwIfDisposed(),Tc(this)},mr.prototype.relu6=function(){return this.throwIfDisposed(),Ec(this)},mr.prototype.reshapeAs=function(e){return this.throwIfDisposed(),xl(this,e.shape)},mr.prototype.reshape=function(e){return this.throwIfDisposed(),xl(this,e)},mr.prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),wp(this,e,t,n)},mr.prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),kp(this,e,t,n)},mr.prototype.reverse=function(e){return this.throwIfDisposed(),Ac(this,e)},mr.prototype.rfft=function(){return this.throwIfDisposed(),Zc(this)},mr.prototype.round=function(){return this.throwIfDisposed(),Oc(this)},mr.prototype.rsqrt=function(){return this.throwIfDisposed(),Mc(this)},mr.prototype.selu=function(){return this.throwIfDisposed(),Lc(this)},mr.prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),zc(this,e,t,n,s,r,a)},mr.prototype.sigmoid=function(){return this.throwIfDisposed(),Il(this)},mr.prototype.sign=function(){return this.throwIfDisposed(),Bc(this)},mr.prototype.sin=function(){return this.throwIfDisposed(),Wc(this)},mr.prototype.sinh=function(){return this.throwIfDisposed(),Vc(this)},mr.prototype.slice=function(e,t){return this.throwIfDisposed(),Nl(this,e,t)},mr.prototype.softmax=function(e){return this.throwIfDisposed(),qc(this,e)},mr.prototype.softplus=function(){return this.throwIfDisposed(),Tu(this)},mr.prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),dc(this,e,t)},mr.prototype.split=function(e,t){return this.throwIfDisposed(),Jc(this,e,t)},mr.prototype.sqrt=function(){return this.throwIfDisposed(),ko(this)},mr.prototype.square=function(){return this.throwIfDisposed(),vo(this)},mr.prototype.squaredDifference=function(e){return this.throwIfDisposed(),Qc(this,e)},mr.prototype.squaredDifferenceStrict=function(e){return this.throwIfDisposed(),Dh(this,e)},mr.prototype.squeeze=function(e){return this.throwIfDisposed(),eh(this,e)},mr.prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof mr?[this,e]:[this,...e];return th(n,t)},mr.prototype.step=function(e){return this.throwIfDisposed(),nh(this,e)},mr.prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),sh(this,e,t,n,s,r,a,i,o)},mr.prototype.subStrict=function(e){return this.throwIfDisposed(),Fh(this,e)},mr.prototype.sub=function(e){return this.throwIfDisposed(),Lo(this,e)},mr.prototype.sum=function(e,t){return this.throwIfDisposed(),Ru(this,e,t)},mr.prototype.tan=function(){return this.throwIfDisposed(),rh(this)},mr.prototype.tanh=function(){return this.throwIfDisposed(),Sl(this)},mr.prototype.tile=function(e){return this.throwIfDisposed(),cu(this,e)},mr.prototype.toBool=function(){return this.throwIfDisposed(),Ba(this,"bool")},mr.prototype.toFloat=function(){return this.throwIfDisposed(),Ba(this,"float32")},mr.prototype.toInt=function(){return this.throwIfDisposed(),Ba(this,"int32")},mr.prototype.topk=function(e,t){return this.throwIfDisposed(),ch(this,e,t)},mr.prototype.transpose=function(e){return this.throwIfDisposed(),li(this,e)},mr.prototype.unique=function(e){return this.throwIfDisposed(),ph(this,e)},mr.prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),dh(this,e,t)},mr.prototype.unstack=function(e){return this.throwIfDisposed(),fh(this,e)},mr.prototype.where=function(e,t){return this.throwIfDisposed(),nu(e,this,t)},mr.prototype.zerosLike=function(){return this.throwIfDisposed(),Io(this)};class Wf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Wf.prototype)}}class Vf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Vf.prototype)}}class Uf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Uf.prototype)}}class Gf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Gf.prototype)}}class Hf extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Hf.prototype)}}function jf(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function qf(e,t){if(!e)throw new Hf(t)}function Kf(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Xf(e){return 1===e.length?e[0]:e}function Yf(e){return Array.isArray(e)?e:[e]}function Jf(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function Zf(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}Error;let Qf={};function em(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function tm(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>tm(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?tm(t):e[n]=t.value)}}}function nm(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in Qf)a=Qf[r];else if(a=t[r],null==a)throw new Uf(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new Uf(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in Qf?[o,l]=Qf.className:i in t&&([o,l]=t[i]),null==o)throw new Uf(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(Qf))e[t]=Qf[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},Qf);for(const e of Object.keys(n))Qf[e]=n[e];tm(a.config);const s=l(o,a.config,n,r);return Qf=Object.assign({},t),s}{const e=Object.assign({},Qf);for(const e of Object.keys(n))Qf[e]=n[e];const t=new o(a.config);return Qf=Object.assign({},e),t}}}function sm(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function rm(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function am(e){if(null==e)throw new Uf(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function im(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Uf(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function om(e,t,n=0,s=1/0){return qf(n>=0),qf(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function lm(e,t){Array.isArray(e)?(Z(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>lm(e,`element ${n+1} of ${t}`)))):Z(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${um(e)}.`))}function um(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>um(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function cm(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}function hm(e,t){return so((()=>ko(Ru(wo(e,e),t,!0))))}class pm extends _i{getConfig(){return{}}}class dm extends pm{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return so((()=>{const t=hm(e,this.axis),n=Ol(t,0,this.maxValue);return wo(e,xo(n,yo(Bf(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}dm.className="MaxNorm",Mi(dm);class fm extends pm{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return so((()=>xo(e,yo(Bf(),hm(e,this.axis)))))}getConfig(){return{axis:this.axis}}}fm.className="UnitNorm",Mi(fm);class mm extends pm{apply(e){return Tc(e)}}mm.className="NonNeg",Mi(mm);class gm extends pm{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return so((()=>{const t=hm(e,this.axis),n=yo(wo(this.rate,Ol(t,this.minValue,this.maxValue)),wo(1-this.rate,t));return wo(e,xo(n,yo(Bf(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}gm.className="MinMaxNorm",Mi(gm);const ym={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function bm(e){return em(e)}function xm(e,t={}){return nm(e,Oi.getMap().classNameMap,t,"constraint")}function wm(e){return null==e?null:"string"==typeof e?xm({className:e in ym?ym[e]:e,config:{}}):e instanceof pm?e:xm(e)}function km(e){return new dm(e)}function vm(e){return new fm(e)}function Im(){return new mm}function Nm(e){return new gm(e)}const Sm=["channelsFirst","channelsLast"],Cm=["nearest","bilinear"],$m=["valid","same","causal"],Tm=["max","avg"],Em=["sum","mul","concat","ave"],Am=new Map;function Rm(e){im(Sm,"DataFormat",e)}function Dm(e){im($m,"PaddingMode",e)}function Fm(e){im(Tm,"PoolMode",e)}const _m=[];function Om(e,t){_m.push(e);try{const e=t();return _m.pop(),e}catch(e){throw _m.pop(),e}}function Mm(e){if(!Pm(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===_m.length?"":_m.join("/")+"/")+e}function Lm(e){if(!Pm(e))throw new Error("Not a valid tensor name: '"+e+"'");Am.has(e)||Am.set(e,0);const t=Am.get(e);if(Am.set(e,Am.get(e)+1),t>0){const n=`${e}_${t}`;return Am.set(n,1),n}return e}const zm=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Pm(e){return!!e.match(zm)}function Bm(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function Wm(e){return ah(e=Array.isArray(e)?new Float32Array(e):e)}function Vm(e){return Yu(Wm(e)).dataSync()[0]}function Um(e){return Au(Wm(e)).dataSync()[0]}function Gm(e,t){if(t<e)throw new Uf(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Hm(e,t){return e.asType(t)}function jm(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),e.reshape(n)}function qm(e,t,n){return so((()=>{switch(e.rank){case 1:return Uc(e,t,n);case 2:return Gc(e,[t,0],[n,e.shape[1]]);case 3:return Hc(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return jc(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Nl(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Nl(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Uf(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Km(e,t,n){return so((()=>{switch(e.rank){case 1:return Uc(e,t,n);case 2:return Gc(e,[0,t],[e.shape[0],n]);case 3:return Hc(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return jc(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Uf(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Xm(e,t,n,s){return so((()=>{switch(e.rank){case 1:return Uc(e,t,n);case 2:switch(s){case 1:return qm(e,t,n);case 2:return Km(e,t,n);default:throw new Uf(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return qm(e,t,n);case 2:return Hc(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return Km(e,t,n);default:throw new Uf(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return qm(e,t,n);case 2:return jc(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return jc(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return Km(e,t,n);default:throw new Uf(`The axis is not within the rank of the tensor ${s}`)}default:throw new Uf(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Ym(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),vl(e,t)}function Jm(e,t){switch(e.rank){case 1:return Ml([e,t]);case 2:return Ll([e,t],0);case 3:return zl([e,t],0);case 4:return Pl([e,t],0);default:throw new Uf(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function Zm(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Uf(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return cu(e,t)}function Qm(e,t=0,n=1,s,r){return Ic(e,t,n,s,r)}function eg(e,t,n,s){if(e.rank<2||t.rank<2)throw new Gf(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Gf(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return Qh({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?sg(e.rank,s,"channelsLast"):null,activation:n});{const r=e.shape.slice(),a=r.pop();e=e.reshape([-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=t.transpose(c).reshape([l,-1]);const h=[...r,...u];return Qh({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?sg(e.rank,s,"channelsLast"):null,activation:n}).reshape(h)}}function tg(e,t,n){return so((()=>(t=Array.isArray(t)?ah(t,"int32"):t.toInt(),du(e,t,n))))}function ng(e){return wo(e,e)}function sg(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Uf(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1,1]):t.reshape([1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,1,s[0]]):t.reshape([1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1,1]):t.reshape([1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,1,s[0]]):t.reshape([1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?t.reshape([1,s[0],1]):t.reshape([1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?t.reshape([1,1,s[0]]):t.reshape([1].concat(s))}else if(e<3)return t;throw new Uf(`Unsupported input rank by biasAdd: ${t.rank}`)}function rg(e,t,n){return so((()=>(null==n&&(n="channelsLast"),Rm(n),e.add(sg(e.rank,t,n)))))}function ag(e,t,n,s){return so((()=>Bh(e,t,n,s)))}function ig(e,t,n=!1){return n?e():t()}const og=["fanIn","fanOut","fanAvg"],lg=["normal","uniform","truncatedNormal"];class ug extends _i{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class cg extends ug{apply(e,t){return rc(e,t)}}cg.className="Zeros",Mi(cg);class hg extends ug{apply(e,t){return ac(e,t)}}hg.className="Ones",Mi(hg);class pg extends ug{constructor(e){if(super(),"object"!=typeof e)throw new Uf(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Uf(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return so((()=>wo(Ro(this.value),ac(e,t))))}getConfig(){return{value:this.value}}}pg.className="Constant",Mi(pg);class dg extends ug{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Nc(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}dg.className="RandomUniform",Mi(dg);class fg extends ug{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Gf(`randomNormal does not support dType ${t}.`);return Qm(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}fg.className="RandomNormal",Mi(fg);class mg extends ug{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Gf(`truncatedNormal does not support dType ${t}.`);return hh(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}mg.className="TruncatedNormal",Mi(mg);class gg extends ug{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return so((()=>{if(2!==e.length||e[0]!==e[1])throw new Uf("Identity matrix initializer can only be used for 2D square matrices.");return wo(this.gain,hu(e[0]))}))}getConfig(){return{gain:this.gain}}}gg.className="Identity",Mi(gg);class yg extends ug{constructor(e){if(super(),e.scale<0)throw new Uf(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,im(og,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){im(lg,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(Rm(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Bm(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Bm(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Bm(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Gf(`${this.getClassName()} does not support dType ${t}.`);return hh(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return Nc(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}yg.className="VarianceScaling",Mi(yg);class bg extends yg{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return yg.className}}bg.className="GlorotUniform",Mi(bg);class xg extends yg{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return yg.className}}xg.className="GlorotNormal",Mi(xg);class wg extends yg{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return yg.className}}wg.className="HeNormal",Mi(wg);class kg extends yg{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return yg.className}}kg.className="HeUniform",Mi(kg);class vg extends yg{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return yg.className}}vg.className="LeCunNormal",Mi(vg);class Ig extends yg{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return yg.className}}Ig.className="LeCunNormal",Mi(Ig);class Ng extends ug{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Gf("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return so((()=>{if(e.length<2)throw new Gf("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Qm(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Pp.gramSchmidt(t);return e[0]>e[1]&&(n=n.transpose()),wo(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}Ng.className="Orthogonal",Mi(Ng);const Sg={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Cg(e,t={}){return nm(e,Oi.getMap().classNameMap,t,"initializer")}function $g(e){return em(e)}function Tg(e){if("string"==typeof e){const t=e in Sg?Sg[e]:e;if("GlorotNormal"===t)return new xg;if("GlorotUniform"===t)return new bg;if("HeNormal"===t)return new wg;if("HeUniform"===t)return new kg;if("LeCunNormal"===t)return new vg;if("LeCunUniform"===t)return new Ig;{const e={};return e.className=t,e.config={},Cg(e)}}return e instanceof ug?e:Cg(e)}function Eg(){return new cg}function Ag(){return new hg}function Rg(e){return new pg(e)}function Dg(e){return new dg(e)}function Fg(e){return new fg(e)}function _g(e){return new mg(e)}function Og(e){return new gg(e)}function Mg(e){return new yg(e)}function Lg(e){return new bg(e)}function zg(e){return new xg(e)}function Pg(e){return new wg(e)}function Bg(e){return new kg(e)}function Wg(e){return new vg(e)}function Vg(e){return new Ig(e)}function Ug(e){return new Ng(e)}let Gg=0;function Hg(){return Gg++}const jg={};function qg(e=""){return e in jg||(jg[e]=0),jg[e]+=1,e+jg[e].toString()}function Kg(e){return Array.isArray(e)&&Array.isArray(e[0])}function Xg(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function Yg(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Uf(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function Jg(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return(e=e)[0];throw new Uf(`Expected exactly 1 Shape; got ${e.length}`)}return e}function Zg(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class Qg{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=Hg(),n=null==n?"Variable":n,this.originalName=Mm(n),this.name=Lm(this.originalName),this.trainable_=s,this.constraint=r,this.val=mh(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function ey(e){return e.map((e=>e.read()))}function ty(e){e.forEach((e=>{e[0].write(e[1])}))}class ny{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class sy{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=Hg(),null!=a&&(this.originalName=Mm(a),this.name=Lm(this.originalName)),this.rank=t.length}}let ry=0;class ay{constructor(e,t){this.callArgs=t,this.id=ry++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let iy=0;class oy extends _i{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=iy++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Jf(e)+"_"+qg(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Vf(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Uf(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Xf(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Xf(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Wf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Wf(`Layer ${this.name} is not connected, no input to return.`);return Xf(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Wf(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Wf(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Xf(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Yf(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Yf(this.inputSpec);if(e.length!==t.length)throw new Uf(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new Uf(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new Uf(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new Uf(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new Uf(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new Uf(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new Uf(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Yf(e);let s=!0;for(const e of n)if(!(e instanceof sy)){s=!1;break}let r=!0;for(const e of n)if(e instanceof sy){r=!1;break}if(s===r)throw new Uf("Arguments to apply() must be all SymbolicTensors or all Tensors");return Om(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Yf(e))t.push(n.shape);this.build(Xf(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=Yf(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=Xf(a),null!=this.activityRegularizer)throw new Gf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=Yf(e);const t=[];for(const n of e)t.push(n.shape);return Xf(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new sy(a,n,this,Yf(e),t,this.name,s))):new sy(a,s,this,Yf(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Gf("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Wf(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Wf(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Vf(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Zg(this.weights)}build(e){this.built=!0}getWeights(e=!1){return ey(e?this.trainableWeights:this.weights)}setWeights(e){so((()=>{const t=this.weights;if(t.length!==e.length)throw new Uf(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=ey(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!re(a.shape,o.shape))throw new Uf(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}ty(n)}))}addWeight(e,t,n,s,r,a,i){if(-1!==this._addedWeightNames.indexOf(e))throw new Uf(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=Tg("zeros"));const o=s.apply(t,n),l=new Qg(o,n,e,a,i);return o.dispose(),null!=r&&this.addLoss((()=>r.apply(l.read()))),null==a&&(a=!0),a?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Yf(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=Yf(e);t=Yf(t),n=Yf(n),s=Yf(s),r=Xg(r),a=Xg(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new ay({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function ly(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=ly(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class uy extends oy{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:qg("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Uf("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Uf("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Uf("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new sy(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new ay({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Uf(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function cy(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Uf("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new uy({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}async function hy(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];ro(s)}}function py(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var dy;uy.className="InputLayer",Mi(uy),function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(dy||(dy={}));class fy{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class my{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class gy extends fy{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=so((()=>yo(this.totals[e],wo(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:so((()=>{const n=wo(xo(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),ao(t[e])})))}}class yy extends fy{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class by extends fy{constructor(e,t){if(super(),this.currentEpoch=0,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Ne(this.yieldEvery)&&(this.maybeWait=function(e,t){let n,s=or();return(...r)=>{const a=or();return a-s<t||(s=a,n=e(...r)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await hy(n),s.push(this.yield(e,t,n))),s.push(Gp()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await hy(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await hy(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(Gp()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await hy(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await hy(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(Gp()):Ne(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await hy(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await hy(e),await this.trainEnd(e))}}function xy(e,t){return null==e&&(e={}),e instanceof fy?[e]:Array.isArray(e)&&e[0]instanceof fy?e:Yf(e).map((e=>new by(e,t)))}class wy{constructor(){}static registerCallbackConstructor(e,t){Z(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),wy.checkForDuplicate(t),null==wy.constructors[e]&&(wy.constructors[e]=[]),wy.constructors[e].push(t)}static checkForDuplicate(e){for(const t in wy.constructors)wy.constructors[+t].forEach((t=>{if(t===e)throw new Uf("Duplicate callback constructor.")}))}static clear(){wy.constructors={}}static createCallbacks(e){const t=[];for(const n in wy.constructors){const s=+n;e>=s&&t.push(...wy.constructors[s])}return t.map((e=>new e))}}function ky(e,t,n,s,r,a,i,o,l){const u=new yy,c=[new gy,...wy.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new my(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function vy(e,t={},n=!1){return nm(e,Oi.getMap().classNameMap,t,"layer",n)}function Iy(e,t){return so((()=>{"float32"!==e.dtype&&(e=e.asType("float32"));const n=Ru(ng(e),t,!0),s=_o(n.shape,Bf()),r=ko(Uo(n,s));return xo(e,r)}))}function Ny(e,t){return so((()=>Xu(ng(Lo(t,e)),-1)))}function Sy(e,t){return so((()=>Xu(Po(Lo(t,e)),-1)))}function Cy(e,t){return so((()=>{const n=Lo(e,t),s=Ol(Po(e),Bf(),Number.MAX_VALUE),r=Po(xo(n,s));return wo(100,Xu(r,-1))}))}function $y(e,t,n=!1){return so((()=>{if(n)t=qc(t);else{const e=Ru(t,t.shape.length-1,!0);t=xo(t,e)}return t=Ol(t,Bf(),1-Bf()),$u(Ru(wo(e.toFloat(),Su(t)),t.shape.length-1))}))}function Ty(e,t,n=!1){return so((()=>{const s=pu(function(e){const t=[Bm(e.shape)];return e.reshape(t)}(e)).toInt(),r=(t=Ol(t,Bf(),1-Bf())).shape;return $y(oi(s,r[r.length-1]).reshape(r),t,n)}))}function Ey(e,t){return so((()=>{let n;return n=Ol(t,Bf(),1-Bf()),n=Su(xo(n,Lo(1,n))),Xu(function(e,t){if(!re(e.shape,t.shape))throw new Uf(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return so((()=>{const n=t.relu(),s=t.abs().neg();return n.sub(t.mul(e)).add(s.exp().log1p())}))}(e,n),-1)}))}function Ay(e,t){return so((()=>{const n=Iy(e,-1),s=Iy(t,-1),r=wo(n,s);return $u(Ru(r,-1))}))}wy.constructors={};const Ry={meanSquaredError:Ny,meanAbsoluteError:Sy,meanAbsolutePercentageError:Cy,meanSquaredLogarithmicError:function(e,t){return so((()=>{const n=Ol(t,Bf(),Number.MAX_VALUE),s=Su(yo(1,n)),r=Ol(e,Bf(),Number.MAX_VALUE),a=Su(yo(1,r));return Xu(ng(Lo(s,a)),-1)}))},squaredHinge:function(e,t){return so((()=>{const n=Uo(0,Lo(1,wo(e,t)));return Xu(ng(n),-1)}))},hinge:function(e,t){return so((()=>{const n=Uo(0,Lo(1,wo(e,t)));return Xu(n,-1)}))},categoricalHinge:function(e,t){return so((()=>{const n=Ru(wo(e,t),-1),s=Au(wo(Lo(1,e),t),-1);return Uo(0,yo(1,Lo(s,n)))}))},logcosh:function(e,t){return so((()=>{const n=Math.log(2),s=Lo(t,e),r=Lo(yo(s,Tu(wo(-2,s))),n);return Xu(r,-1)}))},categoricalCrossentropy:$y,sparseCategoricalCrossentropy:Ty,binaryCrossentropy:Ey,kullbackLeiblerDivergence:function(e,t){return so((()=>{const n=Ol(e,Bf(),1),s=Ol(t,Bf(),1);return Ru(wo(e,Su(xo(n,s))),-1)}))},poisson:function(e,t){return so((()=>{const n=Su(yo(Bf(),t));return Xu(Lo(t,wo(e,n)),-1)}))},cosineProximity:Ay};function Dy(e){if("string"==typeof e){if(e in Ry)return Ry[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Uf(t)}return e}function Fy(e,t){return so((()=>{const n=wo(.5,ic(t)),s=Hm(fu(t,n),e.dtype);return Xu(tu(e,s),-1)}))}function _y(e,t){return so((()=>Hm(tu(Qo(e,-1),Qo(t,-1)),"float32")))}function Oy(e,t){return so((()=>Vu(e.equal(1),t.equal(1)).sum().cast("float32")))}function My(e,t){return so((()=>{const n=Oy(e,t),s=function(e,t){return so((()=>Vu(e.equal(0),t.equal(1)).sum().cast("float32")))}(e,t),r=n.add(s);return nu(fu(r,0),n.div(r),0).cast("float32")}))}function Ly(e,t){return Ey(e,t)}function zy(e,t){return e.rank===t.rank&&(e=e.squeeze([e.rank-1])),(t=t.argMax(-1)).dtype!==e.dtype&&(t=t.asType(e.dtype)),tu(e,t).asType("float32")}const Py=$y,By=Ty,Wy={binaryAccuracy:Fy,categoricalAccuracy:_y,precision:My,categoricalCrossentropy:Py,sparseCategoricalCrossentropy:By,mse:Ny,MSE:Ny,mae:Sy,MAE:Sy,mape:Cy,MAPE:Cy,cosine:Ay};function Vy(e){if("string"==typeof e&&e in Wy)return Wy[e];if("string"!=typeof e&&null!=e)return e;throw new Uf(`Unknown metric ${e}`)}function Uy(e){if(qf(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(Ry))if(Ry[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(Wy))if(Wy[n]===e){t=n;break}return void 0!==t?t:e.name}}function Gy(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Hy(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Hy(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Hy(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Hy(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function jy(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function qy(e,t,n){let s;try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}jy([`${e.name} (${e.getClassName()})`,s,e.countParams().toString()],t,n)}function Ky(e,t,n,s){let r;try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const a=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];a.push(`${n}[${s}][${r}]`)}const i=e.name,o=e.getClassName(),l=0===a.length?"":a[0];jy([`${i} (${o})`,r,e.countParams().toString(),l],t,s);for(let e=1;e<a.length;++e)jy(["","","",a[e]],t,s)}function Xy(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Yy(e,t){if(null===e)return null;if("string"==typeof e)return Zf(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Xy(t,r,s)?n.push(s):n.push(Yy(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=Zf(n);t[e]=Yy(s,e)}}return t}}function Jy(e,t){if(null==e)return null;if("string"==typeof e)return Jf(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];Xy(t,r,s)?n.push(s):n.push(Jy(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[Jf(n)]="name"!==n&&"className"!==n||"string"!=typeof s?Jy(s,n):s}return t}}const Zy="2.8.6";class Qy{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Qy)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Uf(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Ba(t,e.dtype)}catch(n){throw new Uf(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof sy){if(null==this.id2Value[e.id])throw new Uf(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Uf(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof sy){if(null==this.id2Value[e.id])throw new Uf(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Uf(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&ro(this.id2Mask)}}const eb={},tb={};function nb(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().join(",");let h,p;if(null==eb[c]){const e=function(e,t){Z(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=rb(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=rb(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:sb(s)}}(i,t);h=e.sorted,p=e.recipientCounts,eb[c]=h,tb[c]=p}h=eb[c],p={},r||Object.assign(p,tb[c]);const d=new Qy(t);for(let e=0;e<h.length;++e){if(null!=s){const e=to().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=h[e],i=a.sourceLayer;if(i instanceof uy)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),s=d.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),r||(p[e.name]--,0!==p[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Yf(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=ab(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}r||ro(f)}return d.disposeMasks(),a?l:l[0]}function sb(e){const t={};for(const n in e)t[n]=e[n].size;return t}function rb(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function ab(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}class ib extends oy{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=qg(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],rm(this.inputs).length!==this.inputs.length)throw new Uf(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);rm(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;qf(0===n,"input layer has >1 nodes"),qf(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof uy))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new Vf(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(ib.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(sm);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof ib&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(sm);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Vf(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Vf(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new ay({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Uf("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Uf(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new Uf(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Uf(`${e.length} of ${s} weights are not set: ${e}`)}ty(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${Zy}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Jy(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return so((()=>{e=Yf(e);const n=new Qy;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return nb(this.outputs,n,t)}))}computeMask(e,t){return so((()=>{let n;return e=Yf(e),n=null==t?jf(null,e.length):Yf(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=Xg(e);if(t.length!==this.inputLayers.length)throw new Uf(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(sm);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=Xg(t.computeOutputShape(Xf(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++)n[`${t.name}_${a}_${e}`]=r[e]}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];qf(t in n),r.push(n[t])}return Xf(r)}runInternalGraph(e,t){null==t&&(t=jf(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(sm);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=Yf(t.call(e,u)),l=Yf(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=Yf(t.call(s,u)),l=Yf(t.computeMask(s,i));if(t.activityRegularizer)throw new Gf("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){qf(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof ib?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=ib.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Uf(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Uf("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Uf(`No such layer: ${e}`)}calculateLosses(){return so((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=ib.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=ib.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[ib.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=ib.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=ib.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Xf(n),s)}function l(e){const n=e.name,a=vy(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Uf(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!am(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];qf(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];qf(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Uf("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){so((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function ob(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function lb(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=so((()=>{if(1===e.shape.length)return e.clone();if(2===e.shape.length){if(e.shape[1]>1){const t=1;return e.argMax(t)}if(1===e.shape[1])return e.reshape([e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());ro(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),ah(r,"float32")}return null}function ub(e,t){return wo(e,t)}function cb(e,t){let n,s;const r=t;n=r.xs,s=r.ys,Z(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=hb("input",e.inputNames,n),i=hb("output",e.outputNames,s),o=a[0].shape[0];Z(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Z(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Z(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)Z(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function hb(e,t,n){if(n instanceof mr)return[n];if(Array.isArray(n))return Z(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new Uf(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}function pb(e){return"function"==typeof e.iterator}function db(e){Z(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function fb(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>qm(e,t,n-t))):qm(e,t,n-t)}function mb(e,t){return so((()=>null==e?null:Array.isArray(e)?e.map((e=>mb(e,t))):tg(e,"int32"===t.dtype?t:t.toInt())))}function gb(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function yb(e){const t=[];e instanceof mr&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(jm(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function bb(e,t){if(null==e)return;const n=[];if(t instanceof mr)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof mr)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function xb(e){return Array.isArray(e)}function wb(e){return!function(e){return e instanceof mr}(e)&&!xb(e)}function kb(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(xb(e)&&e.length>0)t=!0;else if(wb(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Uf(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(wb(e)){e=e,a=[];for(const n of t){if(null==e[n])throw new Uf(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(xb(e)){if((e=e).length!==t.length)throw new Uf(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(e=e,t.length>1)throw new Uf(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=yb(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Uf(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l>=0&&o!==l)throw new Uf(`Error when checking ${r}: expected ${t[e]} to have shape [${n[e]}], but got array with shape [${i.shape}].`)}}return a}function vb(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new Uf(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new Uf(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new Uf(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new Uf(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Ib extends ib{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Uf("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Output shape","Param #"];let i;if(r?(t=t||65,n=n||[.45,.85,1]):(t=t||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),jy(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?qy(o[e],n,s):Ky(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?Zg(e.collectedTrainableWeights):Zg(e.trainableWeights),t}(e),u=Zg(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Vp.adagrad(.01),Adadelta:()=>Vp.adadelta(1,.95,Bf()),Adam:()=>Vp.adam(.001,.9,.999,Bf()),Adamax:()=>Vp.adamax(.002,.9,.999,Bf(),0),RMSProp:()=>Vp.rmsprop(.001,.9,0,Bf()),SGD:()=>Vp.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Uf(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Do))throw new Uf("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Uf(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>Dy(e)))}else{const n=Dy(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Uf(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(Dy(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Om("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};Om("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===Ey?-1!==["accuracy","acc"].indexOf(i)?s=Fy:-1!==["crossentropy","ce"].indexOf(i)&&(s=Ly):this.lossFunctions[e]===Ty?-1!==["accuracy","acc"].indexOf(i)?s=zy:-1!==["crossentropy","ce"].indexOf(i)&&(s=By):-1!==["accuracy","acc"].indexOf(i)?s=_y:-1!==["crossentropy","ce"].indexOf(i)&&(s=Py),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=Vy(i);a=e,n=""+Uy(i)}let t;Om(n,(()=>{t=a})),r(e,n,t)}})(s[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;db(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return Xf(this.testLoop(i,a,s,n.verbose,n.steps))}finally{bb(r[0],e),bb(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new Gf("Verbose mode is not implemented yet.");Z(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=so((()=>{if(t.value){const{xs:n,ys:s}=cb(e,t.value),i=n.concat(s),u=so((()=>r(i)));if(ro(i),0===l)for(let e=0;e<u.length;++e)a.push(Ro(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=so((()=>yo(a[e],wo(c,t)))),l>0&&ro(n)}ro(u),o+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=xo(a[e],o),ro(t)}return Xf(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new Uf(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Uf(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Uf("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new Qy;if(e instanceof mr&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Uf(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Uf(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=nb(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=jf(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Uf(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return so((()=>{const s=this.checkNumSamples(e);if(n)throw new Gf("Verbose predictLoop() is not implemented yet.");const r=gb(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t)so((()=>{const n=r[t][0],s=r[t][1],a=fb(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new Qy(i);return nb(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)));return Xf(a.map((e=>vl(e,0))))}))}predict(e,t={}){const n=yb(e);vb(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return db(s),this.predictLoop(n,s)}finally{bb(n,e)}}predictOnBatch(e){vb(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Vf("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===Ty?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=rm(e.map((e=>e.shape[0])));s.sort();const r=rm(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new Uf(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new Uf(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!re(s,r))throw new Uf(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=kb(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=kb(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[Ny,Ey,$y];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===$y&&1===a.shape[a.shape.length-1])throw new Uf(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new Uf(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Uf(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=ob(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await lb(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return so((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new Gf("Verbose mode is not implemented yet.");if(null!=r)throw new Gf("steps mode in testLoop() is not implemented yet");{const s=gb(a,n),r=ah(Gm(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=qm(r,a,o-a),u=mb(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(Ro(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=yo(i[e],wo(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=xo(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;Kf(e,s)>1&&(r+=`_${Kf(e.slice(0,n),s)}`),t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Qy(e),o=nb(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=ub(n,r[e]));const a=Xu(n);t.push(a),l=0===e?n:yo(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=Xu(t(s[r],o[r]))}ao(n),a.push(n)}return l=Xu(l),this.calculateLosses().forEach((e=>{l=yo(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>so((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new Qy(a),o=nb(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Xu(s(r[e],o[e]));n=0===e?a:yo(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Xu(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,a,i,o,l,u,c;e.isTraining=!0;try{const h=null==s.batchSize?32:s.batchSize;db(h);const p=!1,d=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,p,h);r=d[0],a=d[1],c=d[2];let f,m=!1;if(null!=s.validationData&&s.validationData.length>0){if(m=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Gf("validationData including sample weights is not supported yet."):new Uf(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);i=s.validationData[0],o=s.validationData[1];const t=!0,n=await e.standardizeUserData(i,o,null,null,t,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){m=!0;const e=Math.floor(r[0].shape[0]*(1-s.validationSplit)),t=r[0].shape[0];l=fb(r,e,t),r=fb(r,0,e),u=fb(a,e,t),a=fb(a,0,e),f=l.concat(u)}else null!=s.validationSteps&&(m=!0);const g=r.concat(a).concat(c);e.checkTrainableWeightsConsistency();const y=e.makeTrainFunction(),b=e.getDedupedMetricsNames();let x,w;m?(e.makeTestFunction(),x=e.testFunction,w=b.slice().concat(b.map((e=>"val_"+e)))):(x=null,f=[],w=b.slice());const k=xy(s.callbacks,s.yieldEvery);return await async function(e,t,n,s,r,a,i,o,l,u,c,h,p,d,f){null==r&&(r=32),null==a&&(a=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;null!=l&&null!=u&&(m=!0);const g=e.checkNumSamples(n,r,d,"steps_per_epoch");let y;null!=g&&(y=Gm(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=ky(o,i,a,p,g,d,r,m,h);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<a;++i){await b.onEpochBegin(i);const a={};{if("batch"===c)throw new Gf("batch shuffling is not implemneted yet");c&&j(y);const i=ah(y),o=gb(g,r);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),so((()=>{const p=o[c][0],d=o[c][1],f=qm(i,p,d-p);h.batch=c,h.size=d-p;const g=mb(n,f),y=t(g);for(let e=0;e<s.length;++e){const t=s[e],n=y[e];h[t]=n,ao(n)}if(c===o.length-1&&m){const t=e.testLoop(l,u,r);for(let e=0;e<s.length;++e){const n=s[e],r=t[e];ao(r),a["val_"+n]=r}}})),await b.onBatchEnd(c,h),py(h),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,a),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,y,g,b,h,s.epochs,s.verbose,k,x,f,s.shuffle,w,s.initialEpoch,null)}finally{e.isTraining=!1,bb(r,t),bb(a,n),bb(l,i),bb(u,o),null!=c&&ro(c)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(Z(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Z(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Z(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Z(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Z(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(pb(n.validationData))Z(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Gf("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=xy(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=ky(c,h,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,r,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=cb(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=ob(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await lb(r[e],null,t[e]))}const u=s.concat(r).concat(i),d=o(u);ro(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,ao(n)}await p.onBatchEnd(h,a),py(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=pb(n.validationData)?Yf(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Yf(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return ro(a),Xf(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=to().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-to().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Jf(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Jf(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Jf(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Jf(Uy(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Jf(Uy(e))));{const e={};for(const t in this.metrics)e[t]=Jf(Uy(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=vy(Yy(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=Zf(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>Zf(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=Zf(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>Zf(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=Zf(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=oa(e);if(0===t.length)throw new Uf(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Uf(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Uf("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Xr(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${Zy}`,convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await Xr(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=ea([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Gy(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){Gy(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Ib.className="Model",Mi(Ib);class Nb extends Ib{}async function Sb(e,t){"modelTopology"in e||(e={modelTopology:e});let n=(e=e).modelTopology;null!=n.model_config&&(n=n.model_config);const s=vy(Yy(n),t);if(null!=e.weightsManifest){const t=await Xa(e.weightsManifest,e.pathPrefix,s.weights.map((e=>e.originalName))),n={};for(const e of s.weights)n[e.originalName]=t[e.originalName];s.loadWeights(n),ro(t)}return s}Nb.className="Functional",Mi(Nb);class Cb extends Ib{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:qg("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Uf(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Cb||e instanceof Ib;let n;if(t){if(n=e,1!==n.outputs.length)throw new Uf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Uf("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Uf("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=cy({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Uf(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Uf("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=ly(this.outputs[0])}this.inboundNodes=[],new ay({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:jf(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(Jg(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Ib({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Vf("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Vf("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Vf("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Vf("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Uf("Legacy serialization format not supported yet.");r=t}else Z(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof Cb))throw new Gf(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=vy(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Uf("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Uf("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}function $b(e){return new Ib(e)}function Tb(e){return new Cb(e)}function Eb(e,t){return null==t&&(t={}),async function(e,t){if(null==t&&(t={}),"string"==typeof e){const n=la(e,t);if(0===n.length)n.push(ti(e,t));else if(n.length>1)throw new Uf(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){if(null==n&&(n={}),null==e.load)throw new Uf("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=vy(Yy(r),void 0,i),l=s.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata),null!=s.weightData){if(null==s.weightSpecs)throw new Uf("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=Yr(e,t),s={},r=[];return t.forEach((e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]})),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),ro(e),ro(t.map((e=>e.tensor)))}return o}(e,0,t)}(e,t)}function Ab(e){return cy(e)}function Rb(e,t){wy.registerCallbackConstructor(e,t)}Cb.className="Sequential",Mi(Cb);class Db extends _i{getConfig(){return{}}}class Fb extends Db{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Gf(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return au(e)}(e,t)}}Fb.className="elu",Mi(Fb);class _b extends Db{apply(e){return Lc(e)}}_b.className="selu",Mi(_b);class Ob extends Db{apply(e){return Tc(e)}}Ob.className="relu",Mi(Ob);class Mb extends Db{apply(e){return so((()=>Ju(6,Tc(e))))}}Mb.className="relu6",Mi(Mb);class Lb extends Db{apply(e){return e}}Lb.className="linear",Mi(Lb);class zb extends Db{apply(e){return Il(e)}}zb.className="sigmoid",Mi(zb);class Pb extends Db{apply(e){return function(e){return so((()=>{const t=yo(.5,wo(.2,e));return Ol(t,0,1)}))}(e)}}Pb.className="hardSigmoid",Mi(Pb);class Bb extends Db{apply(e){return Tu(e)}}Bb.className="softplus",Mi(Bb);class Wb extends Db{apply(e){return function(e){return so((()=>xo(e,Po(e).add(1))))}(e)}}Wb.className="softsign",Mi(Wb);class Vb extends Db{apply(e){return Sl(e)}}Vb.className="tanh",Mi(Vb);class Ub extends Db{apply(e,t=-1){return qc(e,t)}}Ub.className="softmax",Mi(Ub);class Gb extends Db{apply(e,t=-1){return Du(e,t)}}Gb.className="logSoftmax",Mi(Gb);class Hb extends Db{apply(e,t=1){return so((()=>Il(e.mul(t)).mul(e)))}}function jb(e){return e.getClassName()}function qb(e,t={}){return nm(e,Oi.getMap().classNameMap,t,"activation")}function Kb(e){if(null==e){return qb({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},qb(t)}return e instanceof Db?e:qb(e)}function Xb(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}Hb.className="swish",Mi(Hb);class Yb extends _i{}class Jb extends Yb{constructor(e){super(),Xb(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return so((()=>{let t=rc([1]);return this.hasL1&&(t=yo(t,Ru(wo(this.l1,Po(e))))),this.hasL2&&(t=yo(t,Ru(wo(this.l2,ng(e))))),t.asScalar()}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Jb.className="L1L2",Mi(Jb);const Zb={l1l2:"L1L2"};function Qb(e){return em(e)}function ex(e,t={}){return nm(e,Oi.getMap().classNameMap,t,"regularizer")}function tx(e){return null==e?null:"string"==typeof e?ex({className:e in Zb?Zb[e]:e,config:{}}):e instanceof Yb?e:ex(e)}class nx extends oy{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=Yg(e);let n=Tc(e);return null!=this.maxValue&&(n=Ol(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}nx.className="ReLU",Mi(nx);class sx extends oy{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Yg(e);return wu(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}sx.className="LeakyReLU",Mi(sx);class rx extends oy{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=Tg(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=tx(e.alphaRegularizer),this.alphaConstraint=wm(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Uf(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=Jg(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new ny({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=Yg(e),mc(e,this.alpha.read())}getConfig(){const e={alphaInitializer:$g(this.alphaInitializer),alphaRegularizer:Qb(this.alphaRegularizer),alphaConstraint:bm(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}rx.className="PReLU",Mi(rx);class ax extends oy{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Gf(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=Yg(e);return au(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}ax.className="ELU",Mi(ax);class ix extends oy{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=Yg(e);return n.mul(Hm(n.greater(this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}ix.className="ThresholdedReLU",Mi(ix);class ox extends oy{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Ub).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=Yg(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function lx(e,t,n){if("number"==typeof e)return jf(e,t);if(e.length!==t)throw new Uf(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new Uf(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function ux(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function cx(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+Um([n-t,0]);else{if("same"!==s)throw new Uf(`Unsupport padding mode: ${s}.`);e*=t}return e}function hx(e,t){return so((()=>(Rm(t),"channelsFirst"===t?li(e,[0,2,3,1]):e)))}function px(e,t){return so((()=>(Rm(t),"channelsFirst"===t?li(e,[0,2,3,4,1]):e)))}function dx(e,t,n,s=[1,1],r="valid",a,i,o=null){return so((()=>{if(null==a&&(a="channelsLast"),Rm(a),3!==e.rank&&4!==e.rank)throw new Uf(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Uf(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=hx(e,a);if("causal"===r)throw new Gf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Xh({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=li(l,[0,3,1,2])),l}))}ox.className="Softmax",Mi(ox);class fx extends oy{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",fx.verifyArgs(t),this.rank=e,lm(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Gf(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=lx(t.kernelSize,e,"kernelSize"),this.strides=lx(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,Dm(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rm(this.dataFormat),this.activation=Kb(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=Tg(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=wm(t.biasConstraint),this.biasRegularizer=tx(t.biasRegularizer),this.activityRegularizer=tx(t.activityRegularizer),this.dilationRate=lx(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Uf(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Uf(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Uf(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(qf("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!om(e.kernelSize,"number",1,3))throw new Uf(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:jb(this.activation),useBias:this.useBias,biasInitializer:$g(this.biasInitializer),biasRegularizer:Qb(this.biasRegularizer),activityRegularizer:Qb(this.activityRegularizer),biasConstraint:bm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class mx extends fx{constructor(e,t){super(e,t),this.kernel=null,mx.verifyArgs(t),this.filters=t.filters,lm(this.filters,"filters"),this.kernelInitializer=Tg(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=wm(t.kernelConstraint),this.kernelRegularizer=tx(t.kernelRegularizer)}build(e){e=Jg(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Uf(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return so((()=>{let t;e=Yg(e);const n=null==this.bias?null:this.bias.read(),s=cm(this.activation.getClassName());if(null!=s&&2===this.rank)t=dx(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,r="valid",a,i=1){return so((()=>{if(null==a&&(a="channelsLast"),Rm(a),3!==e.shape.length)throw new Uf(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Uf(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Uf(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=li(e,[0,2,1])),"causal"===r)throw new Gf("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Wl(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=rg(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=dx(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Gf("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],r="valid",a,i){return so((()=>{if(null==a&&(a="channelsLast"),Rm(a),4!==e.rank&&5!==e.rank)throw new Uf(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Uf(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=px(e,a);if("causal"===r)throw new Gf("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Gl(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=rg(o,n)),"channelsFirst"===a&&(o=li(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=Jg(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=ux(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:$g(this.kernelInitializer),kernelRegularizer:Qb(this.kernelRegularizer),kernelConstraint:bm(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Uf(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class gx extends mx{constructor(e){super(2,e),gx.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!om(e.kernelSize,"number",1,2))throw new Uf(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}gx.className="Conv2D",Mi(gx);class yx extends mx{constructor(e){super(3,e),yx.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Uf(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}yx.className="Conv3D",Mi(yx);class bx extends gx{constructor(e){if(super(e),this.inputSpec=[new ny({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Uf(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=Jg(e)).length)throw new Uf("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Uf("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new ny({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return so((()=>{let t=Yg(e);if(4!==t.shape.length)throw new Uf(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,cx(i,c,l,this.padding),cx(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=li(t,[0,2,3,1]));let d=Ul(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=li(d,[0,3,1,2])),null!=this.bias&&(d=rg(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=Jg(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=cx(t[s],o,a,this.padding),t[r]=cx(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}bx.className="Conv2DTranspose",Mi(bx);class xx extends mx{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Uf("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Uf("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Uf(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=Tg(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=tx(t.depthwiseRegularizer),this.depthwiseConstraint=wm(t.depthwiseConstraint),this.pointwiseInitializer=Tg(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=tx(t.pointwiseRegularizer),this.pointwiseConstraint=wm(t.pointwiseConstraint)}build(e){if((e=Jg(e)).length<this.rank+2)throw new Uf(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Uf(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new ny({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return so((()=>{let t;if(e=Yg(e),1===this.rank)throw new Gf("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=li(e,[0,2,3,1])),t=zc(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=rg(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=li(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=$g(this.depthwiseInitializer),e.pointwiseInitializer=$g(this.pointwiseInitializer),e.depthwiseRegularizer=Qb(this.depthwiseRegularizer),e.pointwiseRegularizer=Qb(this.pointwiseRegularizer),e.depthwiseConstraint=bm(this.depthwiseConstraint),e.pointwiseConstraint=bm(this.pointwiseConstraint),e}}xx.className="SeparableConv";class wx extends xx{constructor(e){super(2,e)}}wx.className="SeparableConv2D",Mi(wx);class kx extends mx{constructor(e){super(1,e),kx.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!om(e.kernelSize,"number",1,1))throw new Uf(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}kx.className="Conv1D",Mi(kx);class vx extends oy{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return so((()=>{if(e=Yg(e),"channelsLast"===this.dataFormat){const t=Xm(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Xm(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Xm(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Xm(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}vx.className="Cropping2D",Mi(vx);class Ix extends oy{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Rm(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,im(Cm,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return so((()=>{let t=Yg(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=li(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s]);return li(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?t.resizeNearestNeighbor([e,s]):t.resizeBilinear([e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Ix.className="UpSampling2D",Mi(Ix);class Nx extends fx{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=Tg(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=wm(e.depthwiseConstraint),this.depthwiseRegularizer=tx(e.depthwiseRegularizer)}build(e){if((e=Jg(e)).length<4)throw new Uf(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Uf(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return so((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return so((()=>{null==r&&(r="channelsLast"),Rm(r);let i=hx(e,r);if(4!==e.rank)throw new Uf(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Uf(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Zl(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=li(i,[0,3,1,2])),i}))}(e=Yg(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=rg(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=Jg(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=ux(t,this.kernelSize[0],this.padding,this.strides[0]),a=ux(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=$g(this.depthwiseInitializer),e.depthwiseRegularizer=Qb(this.depthwiseRegularizer),e.depthwiseConstraint=bm(this.depthwiseRegularizer),e}}function Sx(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Uf("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function Cx(e,t,n,s=!1,r,a,i=!1,o=!1){return so((()=>{const l=t.shape.length;if(l<3)throw new Uf(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Gm(2,l));if(t=li(t,u),null!=a)throw new Gf("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=r.asType("bool").asType("float32")).rank===l-1&&(r=lu(r,-1)),r=li(r,u)),s&&(t=Ac(t,0),null!=r&&(r=Ac(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=fh(t);let m,g;null!=r&&(m=fh(r));for(let t=0;t<d;++t){const n=f[t],s=so((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=so((()=>{const e=m[t],n=ic(e).sub(e);return{output:s[0].mul(e).add(p[0].mul(n)),newStates:p.map(((t,r)=>s[1][r].mul(e).add(t.mul(n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=th(c,1)),[h,g,p]}))}Nx.className="DepthwiseConv2D",Mi(Nx);class $x extends oy{constructor(e){let t;if(super(e),null==e.cell)throw new Uf("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new Ox({cells:e.cell}):e.cell,null==t.stateSize)throw new Uf("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new ny({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Gm(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){Kg(e)&&(e=e[0]),e=e;let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return so((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Gf("Constants support is not implemented in RNN yet.");Kg(e)&&(e=e[0]),e=e;const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new ny({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!re(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new Uf(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new ny({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){so((()=>{if(!this.stateful)throw new Wf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Uf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>rc([n,e]))):this.states_=[rc([n,this.cell.stateSize])];else if(null==e)ro(this.states_),null!=this.keptStates&&(ro(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>rc([n,e]))):this.states_[0]=rc([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Uf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):ro(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!re(s.shape,a))throw new Uf(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>ao(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Sx(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new ny({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length),a[0]instanceof sy){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return so((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=Yg(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new Uf(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Cx(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return so((()=>{let t=rc(e.shape);return t=Ru(t,[1,2]),t=jm(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?Zm(t,[1,e]):t)):this.cell.stateSize>1?[Zm(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===$x.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=vy(t.cell,n);return new e(Object.assign(t,{cell:s}))}}$x.className="RNN",Mi($x);class Tx extends oy{}class Ex extends Tx{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,lm(this.units,"units"),this.activation=Kb(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Tg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Tg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Tg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=tx(e.kernelRegularizer),this.recurrentRegularizer=tx(e.recurrentRegularizer),this.biasRegularizer=tx(e.biasRegularizer),this.kernelConstraint=wm(e.kernelConstraint),this.recurrentConstraint=wm(e.recurrentConstraint),this.biasConstraint=wm(e.biasConstraint),this.dropout=Vm([1,Um([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Vm([1,Um([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=Jg(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return so((()=>{if(2!==(e=e).length)throw new Uf(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Mx({ones:()=>ic(e),rate:this.dropout,training:s})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Mx({ones:()=>ic(n),rate:this.recurrentDropout,training:s}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=eg(null!=a?wo(e,a):e,this.kernel.read()),null!=this.bias&&(r=rg(r,this.bias.read())),null!=i&&(n=wo(n,i));let o=yo(r,eg(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:jb(this.activation),useBias:this.useBias,kernelInitializer:$g(this.kernelInitializer),recurrentInitializer:$g(this.recurrentInitializer),biasInitializer:$g(this.biasInitializer),kernelRegularizer:Qb(this.kernelRegularizer),recurrentRegularizer:Qb(this.recurrentRegularizer),biasRegularizer:Qb(this.biasRegularizer),activityRegularizer:Qb(this.activityRegularizer),kernelConstraint:bm(this.kernelConstraint),recurrentConstraint:bm(this.recurrentConstraint),biasConstraint:bm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Ex.className="SimpleRNNCell",Mi(Ex);class Ax extends $x{constructor(e){e.cell=new Ex(e),super(e)}call(e,t){return so((()=>{null!=this.cell.dropoutMask&&(ro(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ro(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}Ax.className="SimpleRNN",Mi(Ax);class Rx extends Tx{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Uf("GRUCell does not support reset_after parameter set to true.");this.units=e.units,lm(this.units,"units"),this.activation=Kb(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Kb(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Tg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Tg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Tg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=tx(e.kernelRegularizer),this.recurrentRegularizer=tx(e.recurrentRegularizer),this.biasRegularizer=tx(e.biasRegularizer),this.kernelConstraint=wm(e.kernelConstraint),this.recurrentConstraint=wm(e.recurrentConstraint),this.biasConstraint=wm(e.biasConstraint),this.dropout=Vm([1,Um([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Vm([1,Um([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=Jg(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return so((()=>{if(2!==(e=e).length)throw new Uf(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Mx({ones:()=>ic(e),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Mx({ones:()=>ic(s),rate:this.recurrentDropout,training:n,count:3}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=wo(e,r[0]));let u=eg(e,this.kernel.read());this.useBias&&(u=rg(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=wo(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=Jc(c,[2*this.units,this.units],c.rank-1),d=eg(s,h),[f,m,g]=Jc(u,3,u.rank-1),[y,b]=Jc(d,2,d.rank-1);i=this.recurrentActivation.apply(yo(f,y)),o=this.recurrentActivation.apply(yo(m,b));const x=eg(wo(o,s),p);l=this.activation.apply(yo(g,x));const w=yo(wo(i,s),wo(yo(1,$u(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:jb(this.activation),recurrentActivation:jb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:$g(this.kernelInitializer),recurrentInitializer:$g(this.recurrentInitializer),biasInitializer:$g(this.biasInitializer),kernelRegularizer:Qb(this.kernelRegularizer),recurrentRegularizer:Qb(this.recurrentRegularizer),biasRegularizer:Qb(this.biasRegularizer),activityRegularizer:Qb(this.activityRegularizer),kernelConstraint:bm(this.kernelConstraint),recurrentConstraint:bm(this.recurrentConstraint),biasConstraint:bm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Rx.className="GRUCell",Mi(Rx);class Dx extends $x{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Rx(e),super(e)}call(e,t){return so((()=>{null!=this.cell.dropoutMask&&(ro(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ro(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}Dx.className="GRU",Mi(Dx);class Fx extends Tx{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,lm(this.units,"units"),this.activation=Kb(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Kb(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=Tg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=Tg(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=Tg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=tx(e.kernelRegularizer),this.recurrentRegularizer=tx(e.recurrentRegularizer),this.biasRegularizer=tx(e.biasRegularizer),this.kernelConstraint=wm(e.kernelConstraint),this.recurrentConstraint=wm(e.recurrentConstraint),this.biasConstraint=wm(e.biasConstraint),this.dropout=Vm([1,Um([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Vm([1,Um([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=Jg(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends ug{apply(t,s){const r=e.apply([n]),a=(new hg).apply([n]),i=e.apply([2*n]);return Jm(Jm(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return so((()=>{const n=null!=t.training&&t.training;if(3!==(e=e).length)throw new Uf(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Mx({ones:()=>ic(e),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Mx({ones:()=>ic(s),rate:this.recurrentDropout,training:n,count:4}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=wo(e,a[0]));let h=eg(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=wo(s,i[0])),h=yo(h,eg(s,this.recurrentKernel.read())),this.useBias&&(h=rg(h,this.bias.read()));const[p,d,f,m]=Jc(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=yo(wo(l,r),wo(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=wo(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:jb(this.activation),recurrentActivation:jb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:$g(this.kernelInitializer),recurrentInitializer:$g(this.recurrentInitializer),biasInitializer:$g(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Qb(this.kernelRegularizer),recurrentRegularizer:Qb(this.recurrentRegularizer),biasRegularizer:Qb(this.biasRegularizer),activityRegularizer:Qb(this.activityRegularizer),kernelConstraint:bm(this.kernelConstraint),recurrentConstraint:bm(this.recurrentConstraint),biasConstraint:bm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}Fx.className="LSTMCell",Mi(Fx);class _x extends $x{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Fx(e),super(e)}call(e,t){return so((()=>{null!=this.cell.dropoutMask&&(ro(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ro(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}_x.className="LSTM",Mi(_x);class Ox extends Tx{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return so((()=>{let n=(e=e).slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;Kg(e)&&(e=e[0]),e=e,this.cells.forEach(((n,s)=>{Om(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(vy(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return ey(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}ty(t)}}function Mx(e){const{ones:t,rate:n,training:s=!1,count:r=1}=e,a=()=>ag(t(),n),i=()=>ig(a,t,s);return!r||r<=1?ao(i().clone()):Array(r).fill(void 0).map(i).map((e=>ao(e.clone())))}Ox.className="StackedRNNCells",Mi(Ox);class Lx extends $x{constructor(e){if(e.unroll)throw new Gf("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Gf("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new ny({ndim:5})]}call(e,t){return so((()=>{if(null!=this.cell.dropoutMask&&(ro(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ro(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Uf("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return so((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=rc([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){so((()=>{if(!this.stateful)throw new Wf("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new Uf("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>rc(r))):this.states_=[rc(r)];else if(null==e)ro(this.states_),null!=this.keptStates&&(ro(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>rc(r))):this.states_[0]=rc(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Uf(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):ro(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!re(n.shape,s))throw new Uf(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>ao(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=ux(l,s[0],r,a[0],i[0]),h=ux(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Lx.className="ConvRNN2D";class zx extends Fx{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,lm(this.filters,"filters"),this.kernelSize=lx(n,2,"kernelSize"),this.kernelSize.forEach((e=>lm(e,"kernelSize"))),this.strides=lx(s||1,2,"strides"),this.strides.forEach((e=>lm(e,"strides"))),this.padding=r||"valid",Dm(this.padding),this.dataFormat=a||"channelsLast",Rm(this.dataFormat),this.dilationRate=lx(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>lm(e,"dilationRate")))}build(e){var t;e=Jg(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Uf(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends ug{apply(e,t){return Ym([n.apply([s]),ac([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return so((()=>{if(3!==e.length)throw new Uf(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=Mx({ones:()=>ic(s),rate:this.dropout,training:n,count:4}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?wo(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=Mx({ones:()=>ic(r),rate:this.recurrentDropout,training:n,count:4}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=Jc(this.kernel.read(),4,3),[k,v,I,N]=this.useBias?Jc(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,C,$,T]=Jc(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,C),m=this.recurrentConv(m,$),g=this.recurrentConv(g,T);const E=this.recurrentActivation.apply(yo(l,d)),A=this.recurrentActivation.apply(yo(u,f)),R=yo(wo(A,a),wo(E,this.activation.apply(yo(c,m)))),D=wo(this.recurrentActivation.apply(yo(h,g)),this.activation.apply(R));return[D,D,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const r=Bl(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?rg(r,n,this.dataFormat):r}recurrentConv(e,t){return Bl(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}zx.className="ConvLSTM2DCell",Mi(zx);class Px extends Lx{constructor(e){const t=new zx(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}Px.className="ConvLSTM2D",Mi(Px);class Bx extends oy{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return so((()=>{this.invokeCallHook(e,t);const n=Yg(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return ig((()=>ag(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}Bx.className="Dropout",Mi(Bx);class Wx extends Bx{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}Wx.className="SpatialDropout1D",Mi(Wx);class Vx extends oy{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,lm(this.units,"units"),this.activation=Kb(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=Tg(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=Tg(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=wm(e.kernelConstraint),this.biasConstraint=wm(e.biasConstraint),this.kernelRegularizer=tx(e.kernelRegularizer),this.biasRegularizer=tx(e.biasRegularizer),this.activityRegularizer=tx(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=Jg(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=Jg(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return so((()=>{this.invokeCallHook(e,t);const n=Yg(e),s=cm(this.activation.getClassName());let r;return null!=s?r=eg(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=eg(n,this.kernel.read()),null!=this.bias&&(r=rg(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:jb(this.activation),useBias:this.useBias,kernelInitializer:$g(this.kernelInitializer),biasInitializer:$g(this.biasInitializer),kernelRegularizer:Qb(this.kernelRegularizer),biasRegularizer:Qb(this.biasRegularizer),activityRegularizer:Qb(this.activityRegularizer),kernelConstraint:bm(this.kernelConstraint),biasConstraint:bm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Vx.className="Dense",Mi(Vx);class Ux extends oy{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=Jg(e);for(const t of e.slice(1))if(null==t)throw new Uf(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Bm(e,1)]}call(e,t){return so((()=>{this.invokeCallHook(e,t);let n=Yg(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=n.transpose(e)}return function(e){if(e.rank<=1)throw new Uf(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Bm(e.shape,1)];return e.reshape(t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}Ux.className="Flatten",Mi(Ux);class Gx extends oy{constructor(e){super(e),this.supportsMasking=!0,this.activation=Kb(e.activation)}call(e,t){return so((()=>{this.invokeCallHook(e,t);const n=Yg(e);return this.activation.apply(n)}))}getConfig(){const e={activation:jb(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}Gx.className="Activation",Mi(Gx);class Hx extends oy{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return so((()=>{return e=Yg(e),t=e,n=this.n,so((()=>{if(2!==t.shape.length)throw new Uf(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Zm(jm(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}Hx.className="RepeatVector",Mi(Hx);class jx extends oy{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new Uf("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=Bm(e);if(null!==a){if(0===r||i%r!=0)throw new Uf(n);s[a]=i/r}else if(i!==r)throw new Uf(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return so((()=>{this.invokeCallHook(e,t);const n=Yg(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return n.reshape(r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}jx.className="Reshape",Mi(jx);class qx extends oy{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Gm(1,e.dims.length+1);if(!re(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new ny({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=Jg(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return li(Yg(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}qx.className="Permute",Mi(qx);class Kx extends oy{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=Yg(e);return Zo(sc(n,this.maskValue),-1)}call(e,t){return so((()=>{this.invokeCallHook(e,t);const n=Yg(e),s=Zo(sc(n,this.maskValue),-1,!0);return n.mul(s.asType(n.dtype))}))}}Kx.className="Masking",Mi(Kx);class Xx extends oy{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Yf(e.inputLength))}this.inputDim=e.inputDim,lm(this.inputDim,"inputDim"),this.outputDim=e.outputDim,lm(this.outputDim,"outputDim"),this.embeddingsInitializer=Tg(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=tx(e.embeddingsRegularizer),this.activityRegularizer=tx(e.activityRegularizer),this.embeddingsConstraint=wm(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return so((()=>this.maskZero?(e=Yg(e),sc(e,Io(e))):null))}computeOutputShape(e){if(e=Jg(e),null==this.inputLength)return[...e,this.outputDim];const t=Yf(this.inputLength);if(t.length!==e.length-1)throw new Uf(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new Uf(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return so((()=>{this.invokeCallHook(e,t);let n=Yg(e);return"int32"!==n.dtype&&(n=Hm(n,"int32")),tg(this.embeddings.read(),n.as1D()).reshape(Jg(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:$g(this.embeddingsInitializer),embeddingsRegularizer:Qb(this.embeddingsRegularizer),activityRegularizer:Qb(this.activityRegularizer),embeddingsConstraint:bm(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}Xx.className="Embedding",Mi(Xx);class Yx extends oy{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Gf}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new Uf("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[Jg(e)]),(e=e).length<2)throw new Uf(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=rm(t),t.length>1)throw new Uf(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===rm(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return so((()=>{if(e=e,this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=Um(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=jm(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=s.reshape([r].concat(Bm(e.slice(1))));i=li(i,[1,0]),i=i.reshape(a),t.push(i),n=!0}else if(e>1){const r=Gm(1,e).concat([0]);t.push(li(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=li(s.reshape([-1,t]),[1,0]).reshape(n)}else if(r>1){const e=[r-1].concat(Gm(0,r-1));s=li(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==(e=e)[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=rm(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return so((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Uf("`mask` should be an Array");if(!Array.isArray(e))throw new Uf("`inputs` should be an Array");if(t.length!==e.length)throw new Uf(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:lu(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Vu(n,t[e]);return n}))}}class Jx extends Yx{constructor(e){super(e)}mergeFunction(e){return so((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=yo(t,e[n]);return t}))}}Jx.className="Add",Mi(Jx);class Zx extends Yx{constructor(e){super(e)}mergeFunction(e){return so((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=wo(t,e[n]);return t}))}}Zx.className="Multiply",Mi(Zx);class Qx extends Yx{constructor(e){super(e)}mergeFunction(e){return so((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=yo(t,e[n]);return wo(1/e.length,t)}))}}Qx.className="Average",Mi(Qx);class ew extends Yx{constructor(e){super(e)}mergeFunction(e){return so((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Uo(t,e[n]);return t}))}}ew.className="Maximum",Mi(ew);class tw extends Yx{constructor(e){super(e)}mergeFunction(e){return so((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Ju(t,e[n]);return t}))}}tw.className="Minimum",Mi(tw);class nw extends Yx{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Uf("A `Concatenate` layer should be called on a list of at least 2 inputs");e=e;let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(re(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new Uf("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return so((()=>Ym(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Uf("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Uf("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Uf("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Uf(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return so((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(ic(e[n]).asType("bool")):t[n].rank<e[n].rank?s.push(lu(t[n],-1)):s.push(t[n]);const r=vl(s,this.axis);return Jo(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function sw(e,t){for(;e<0;)e+=t;return e}nw.className="Concatenate",Mi(nw);class rw extends Yx{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Z(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Gf("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Uf(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Uf(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>sw(t,e[n].shape.length))):[sw(this.axes,n.shape.length),sw(this.axes,s.shape.length)],this.normalize&&(n=Iy(n,t[0]),s=Iy(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Gf("batchDot is not implemented for tensors of 4D or higher rank yet");if(Z(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Z(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Gf("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return so((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=t.reshape(t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=e.reshape(e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?e.mul(t).sum(a[0]):e.transpose([1,0]).mul(t).sum(a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=e.matMul(t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=i.squeeze(t)}return 1===i.shape.length&&(i=i.expandDims(1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[sw(this.axes,e.length),sw(this.axes,t.length)],n}computeOutputShape(e){Z(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Gf("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}rw.className="Dot",Mi(rw);class aw extends oy{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return so((()=>{this.invokeCallHook(e,t);const n=Yg(e);return ig((()=>Qm(n.shape,0,this.stddev).add(n)),(()=>n),t.training||!1)}))}}aw.className="GaussianNoise",Mi(aw);class iw extends oy{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return so((()=>{this.invokeCallHook(e,t);const n=Yg(e);return this.rate>0&&this.rate<1?ig((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return n.mul(Qm(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}iw.className="GaussianDropout",Mi(iw);class ow extends oy{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Yg(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return so((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return ig((()=>{const t=Yg(e),s=-1.7580993408473766;let r=mu(Nc(n),this.rate);r=Hm(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate;return t.mul(r).add(r.add(-1).mul(s)).mul(a).add(i)}),(()=>Yg(e)),t.training||!1)}return e}))}}function lw(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=El(e,t,n,s,r,a);else if(3===e.rank)i=Al(e,t,n,s,r,a);else{if(4!==e.rank)throw new Gf(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Rl(e,t,n,s,r,a)}return i}ow.className="AlphaDropout",Mi(ow);class uw extends oy{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Tg(e.betaInitializer||"zeros"),this.gammaInitializer=Tg(e.gammaInitializer||"ones"),this.movingMeanInitializer=Tg(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=Tg(e.movingVarianceInitializer||"ones"),this.betaConstraint=wm(e.betaConstraint),this.gammaConstraint=wm(e.gammaConstraint),this.betaRegularizer=tx(e.betaRegularizer),this.gammaRegularizer=tx(e.gammaRegularizer)}build(e){e=Jg(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Uf(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new ny({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return so((()=>{const n=null!=t.training&&t.training,s=Yg(e),r=s.shape,a=r.length,i=Gm(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=jf(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!re(u,Gm(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=this.movingMean.read().reshape(l),t=this.movingVariance.read().reshape(l),n=this.center?this.beta.read().reshape(l):null,r=this.scale?this.gamma.read().reshape(l):null;return lw(s,e,t,n,r,this.epsilon)}return lw(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=function(e,t,n,s,r=.001){return re(s.slice().sort(),Gm(0,e.rank-1))?function(e,t,n,s,r=.001){return so((()=>{const a=ec(e,s),i=a.mean,o=a.variance;return[lw(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return so((()=>{const a=ec(e,s),i=a.mean,o=a.variance,l=[];for(const t of Gm(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=i.reshape(l),c=o.reshape(l),h=null==t?null:t.reshape(l),p=null==n?null:n.reshape(l);return[lw(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{so((()=>{const s=1-n,r=e.read(),a=r.sub(t).mul(s);e.write(r.sub(a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:$g(this.betaInitializer),gammaInitializer:$g(this.gammaInitializer),movingMeanInitializer:$g(this.movingMeanInitializer),movingVarianceInitializer:$g(this.movingVarianceInitializer),betaRegularizer:Qb(this.betaRegularizer),gammaRegularizer:Qb(this.gammaRegularizer),betaConstraint:bm(this.betaConstraint),gammaConstraint:bm(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}uw.className="BatchNormalization",Mi(uw);class cw extends oy{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=Tg(e.betaInitializer||"zeros"),this.gammaInitializer=Tg(e.gammaInitializer||"ones"),this.betaRegularizer=tx(e.betaRegularizer),this.gammaRegularizer=tx(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=Jg(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==rm(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){const n=Yg(e),s=n.shape,r=s.length;return so((()=>{let{mean:e,variance:t}=ec(n,this.axis,!0);const a=jf(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r&&this.axis!==[r-1]?e.reshape(a):e;let o=i(this.gamma.read()),l=i(this.beta.read());const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=e.tile(u),t=t.tile(u),o=o.tile(c),l=l.tile(c),lw(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:$g(this.betaInitializer),gammaInitializer:$g(this.gammaInitializer),betaRegularizer:Qb(this.betaRegularizer),gammaRegularizer:Qb(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}cw.className="LayerNormalization",Mi(cw);class hw extends oy{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Uf(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Uf(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Uf(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new ny({ndim:4})]}computeOutputShape(e){let t,n;return e=Jg(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return so((()=>{return t=Yg(e),n=this.padding,s=this.dataFormat,so((()=>{if(4!==t.rank)throw new Uf(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Uf("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Uf(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],lc(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function pw(e,t,n,s,r,a){return so((()=>{let i;Rm(r),Fm(a),Dm(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=hx(e,r);const o="same"===s?"same":"valid";return i="max"===a?ju(e,t,n,o):wl(e,t,n,o),"channelsFirst"===r&&(i=li(i,[0,3,1,2])),i}))}function dw(e,t,n,s,r,a){return so((()=>{let i;Rm(r),Fm(a),Dm(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=px(e,r);const o="same"===s?"same":"valid";return i="max"===a?qu(e,t,n,o):kl(e,t,n,o),"channelsFirst"===r&&(i=li(i,[0,4,1,2,3])),i}))}hw.className="ZeroPadding2D",Mi(hw);class fw extends oy{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Uf(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(lm(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Uf(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}lm(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,Dm(this.padding),this.inputSpec=[new ny({ndim:3})]}computeOutputShape(e){const t=ux((e=Jg(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return so((()=>{this.invokeCallHook(e,t),e=jm(Yg(e),2);const n=this.poolingFunction(Yg(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return eh(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class mw extends fw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Rm(r),Dm(s),pw(e,t,n,s,r,"max")}}mw.className="MaxPooling1D",Mi(mw);class gw extends fw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Rm(r),Dm(s),pw(e,t,n,s,r,"avg")}}gw.className="AveragePooling1D",Mi(gw);class yw extends oy{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Uf(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];lm(this.poolSize,"poolSize"),lm(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Rm(this.dataFormat),Dm(this.padding),this.inputSpec=[new ny({ndim:4})]}computeOutputShape(e){e=Jg(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=ux(t,this.poolSize[0],this.padding,this.strides[0]),n=ux(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return so((()=>(this.invokeCallHook(e,t),this.poolingFunction(Yg(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class bw extends yw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Rm(r),Dm(s),pw(e,t,n,s,r,"max")}}bw.className="MaxPooling2D",Mi(bw);class xw extends yw{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Rm(r),Dm(s),pw(e,t,n,s,r,"avg")}}xw.className="AveragePooling2D",Mi(xw);class ww extends oy{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Uf(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];lm(this.poolSize,"poolSize"),lm(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Rm(this.dataFormat),Dm(this.padding),this.inputSpec=[new ny({ndim:5})]}computeOutputShape(e){e=Jg(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=ux(t,this.poolSize[0],this.padding,this.strides[0]),n=ux(n,this.poolSize[1],this.padding,this.strides[1]),s=ux(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return so((()=>(this.invokeCallHook(e,t),this.poolingFunction(Yg(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class kw extends ww{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Rm(r),Dm(s),dw(e,t,n,s,r,"max")}}kw.className="MaxPooling3D",Mi(kw);class vw extends ww{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return Rm(r),Dm(s),dw(e,t,n,s,r,"avg")}}vw.className="AveragePooling3D",Mi(vw);class Iw extends oy{constructor(e){super(e),this.inputSpec=[new ny({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Gf}}class Nw extends Iw{constructor(e){super(e||{})}call(e,t){return so((()=>{const t=Yg(e);return Xu(t,1)}))}}Nw.className="GlobalAveragePooling1D",Mi(Nw);class Sw extends Iw{constructor(e){super(e||{})}call(e,t){return so((()=>{const t=Yg(e);return Au(t,1)}))}}Sw.className="GlobalMaxPooling1D",Mi(Sw);class Cw extends oy{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Rm(this.dataFormat),this.inputSpec=[new ny({ndim:4})]}computeOutputShape(e){return e=e,"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Gf}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class $w extends Cw{call(e,t){return so((()=>{const t=Yg(e);return"channelsLast"===this.dataFormat?Xu(t,[1,2]):Xu(t,[2,3])}))}}$w.className="GlobalAveragePooling2D",Mi($w);class Tw extends Cw{call(e,t){return so((()=>{const t=Yg(e);return"channelsLast"===this.dataFormat?Au(t,[1,2]):Au(t,[2,3])}))}}Tw.className="GlobalMaxPooling2D",Mi(Tw);class Ew extends oy{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=vy(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class Aw extends Ew{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=Jg(e)).length<3)throw new Uf(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=Jg(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return so((()=>Cx(((e,n)=>[Yg(this.layer.call(e,t)),[]]),e=Yg(e),[],!1,null,null,!1,!0)[1]))}}Aw.className="TimeDistributed",Mi(Aw);class Rw extends Ew{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=vy(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=vy(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,im(Em,"BidirectionalMergeMode",r),e.weights)throw new Gf("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),r=r,this.returnState?(s=r.slice(1),t=r[0]):t=r[0],t=t,"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Xf(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=Sx(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Uf("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new ny({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Gf("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof sy;for(const e of a)if(e instanceof sy!==o)throw new Uf("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return so((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=Ac(r,1)),"concat"===this.mergeMode?i=Ym([s,r]):"sum"===this.mergeMode?i=yo(s,r):"ave"===this.mergeMode?i=wo(.5,yo(s,r)):"mul"===this.mergeMode?i=wo(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Om(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),Om(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=vy(t.layer);if(delete t.layer,null!=t.numConstants)throw new Gf("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}function Dw(e){return new uy(e)}function Fw(e){return new ax(e)}function _w(e){return new nx(e)}function Ow(e){return new sx(e)}function Mw(e){return new rx(e)}function Lw(e){return new ox(e)}function zw(e){return new ix(e)}function Pw(e){return new kx(e)}function Bw(e){return new gx(e)}function Ww(e){return new bx(e)}function Vw(e){return new yx(e)}function Uw(e){return new wx(e)}function Gw(e){return new vx(e)}function Hw(e){return new Ix(e)}function jw(e){return new Nx(e)}function qw(e){return new Gx(e)}function Kw(e){return new Vx(e)}function Xw(e){return new Bx(e)}function Yw(e){return new Wx(e)}function Jw(e){return new Ux(e)}function Zw(e){return new Hx(e)}function Qw(e){return new jx(e)}function ek(e){return new qx(e)}function tk(e){return new Xx(e)}function nk(e){return new Jx(e)}function sk(e){return new Qx(e)}function rk(e){return new nw(e)}function ak(e){return new ew(e)}function ik(e){return new tw(e)}function ok(e){return new Zx(e)}function lk(e){return new rw(e)}function uk(e){return new uw(e)}function ck(e){return new cw(e)}function hk(e){return new hw(e)}function pk(e){return new gw(e)}function dk(e){return pk(e)}function fk(e){return pk(e)}function mk(e){return new xw(e)}function gk(e){return mk(e)}function yk(e){return mk(e)}function bk(e){return new vw(e)}function xk(e){return bk(e)}function wk(e){return bk(e)}function kk(e){return new Nw(e)}function vk(e){return new $w(e)}function Ik(e){return new Sw(e)}function Nk(e){return new Tw(e)}function Sk(e){return new mw(e)}function Ck(e){return new bw(e)}function $k(e){return new kw(e)}function Tk(e){return new Dx(e)}function Ek(e){return new Rx(e)}function Ak(e){return new _x(e)}function Rk(e){return new Fx(e)}function Dk(e){return new Ax(e)}function Fk(e){return new Ex(e)}function _k(e){return new Px(e)}function Ok(e){return new zx(e)}function Mk(e){return new $x(e)}function Lk(e){return new Ox(e)}function zk(e){return new Rw(e)}function Pk(e){return new Aw(e)}Rw.className="Bidirectional",Mi(Rw);const Bk=Ik,Wk=Nk,Vk=Sk,Uk=Ck;function Gk(e){return new aw(e)}function Hk(e){return new iw(e)}function jk(e){return new ow(e)}function qk(e){return new Kx(e)}function Kk(e,t){return Fy(e,t)}function Xk(e,t){return Ly(e,t)}function Yk(e,t){return zy(e,t)}function Jk(e,t){return _y(e,t)}function Zk(e,t){return Py(e,t)}function Qk(e,t){return My(e,t)}function ev(e,t){return function(e,t){return so((()=>{const n=Oy(e,t),s=function(e,t){return so((()=>Vu(e.equal(1),t.equal(0)).sum().cast("float32")))}(e,t),r=n.add(s);return nu(fu(r,0),n.div(r),0).cast("float32")}))}(e,t)}function tv(e,t){return Ay(e,t)}function nv(e,t){return Sy(e,t)}function sv(e,t){return Cy(e,t)}function rv(e,t){return Cy(e,t)}function av(e,t){return Cy(e,t)}function iv(e,t){return Ny(e,t)}function ov(e,t){return Ny(e,t)}function lv(e,t){return Ny(e,t)}function uv(e){return new Jb(e)}function cv(e){return Xb(t=e),new Jb({l1:null!=t?t.l1:null,l2:0});var t}function hv(e){return Xb(t=e),new Jb({l2:null!=t?t.l2:null,l1:0});var t}class pv extends fy{constructor(){super(...arguments),this.model=null}setModel(e){if(!(e instanceof Ib))throw new Error("model must be a LayersModel, not some other Container");this.model=e}}function dv(e,t){return e<t}function fv(e,t){return e>t}class mv extends pv{constructor(e){if(super(),null==e&&(e={}),e.restoreBestWeights)throw new Gf("restoreBestWeights = True is not implemented in EarlyStopping yet.");this.monitor=e.monitor||"val_loss",this.minDelta=Math.abs(e.minDelta||0),this.patience=e.patience||0,this.verbose=e.verbose||0,this.mode=e.mode||"auto",this.baseline=e.baseline,-1===["auto","min","max"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode="auto"),"min"===this.mode?this.monitorFunc=dv:"max"===this.mode||-1!==this.monitor.indexOf("acc")?this.monitorFunc=fv:this.monitorFunc=dv,this.monitorFunc===dv&&(this.minDelta*=-1)}async onTrainBegin(e){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===dv?1/0:-1/0}async onEpochEnd(e,t){await hy(t);const n=this.getMonitorValue(t);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=e,this.model.stopTraining=!0)))}async onTrainEnd(e){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(e){null==e&&(e={});const t=e[this.monitor];return null==t&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(e)}`),t}}const gv={earlyStopping:function(e){return new mv(e)}};var yv,bv;!function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF"}(yv||(yv={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(bv||(bv={}));const xv={};function wv(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};xv[e]=n}function kv(e){return xv[e]}function vv(e){delete xv[e]}function Iv(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return Nv(t.inputNames[a.inputIndexStart],n,s,r);if("tensors"===a.type)return t.inputNames.slice(e,i).map((e=>Nv(e,n,s,r)));const o=Nv(t.inputNames.slice(e)[0],n,s,r),l=o.dataSync();return"number"===a.type?l[0]:Ae(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function Nv(e,t,n,s){const[r,a]=$v(e);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[Cv(r,e)]));return void 0!==i?t[Cv(r,i)][a]:void 0}function Sv(e,t){const[n,s]=$v(e);return[Cv(n,t&&t.currentContextId),s]}function Cv(e,t){return t?`${e}-${t}`:e}function $v(e){const t=e.split(":");return 1===t.length?[e,0]:[t[0],Number(t[t.length-1])]}function Tv(e,t,n){let s=Iv("pad",e,t,n);if("explicit"===s){s=Iv("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function Ev(e){return e.kept?e:Wa(e)}const Av=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Rv=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Dv=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],Fv=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],_v=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],Ov=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Mv=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],Lv=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],zv=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]}],Pv=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],Bv=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Wv=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Vv=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Uv=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Gv=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Hv=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],jv=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];class qv{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[N,S,C,$,T,E,A,_,F,R,O,M,L,z,P,B,D].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach((e=>{const[n]=Sv(e);t.inputs.push(i[n]),i[n].children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=Sv(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=Sv(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=kv(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.substr(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=Xv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Xv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=aI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=aI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=Jv(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=Jv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=rI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=rI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=Yv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Yv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=oI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=oI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=sI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=sI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=iI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=iI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=eI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=eI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=tI(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=tI(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=Qv(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Qv(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=Sv(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Zv(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n})),Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach((e=>{const[n]=Sv(e);t.inputs.push(s[n]),s[n].children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=Sv(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Kv(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=Pe().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Xv(e,t,n,s=!1){const r=e[t];return null!=r?Kv(r.s,s):n}function Yv(e,t,n){const s=e[t];return s?s.b:n}function Jv(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function Zv(e){switch("string"==typeof e&&(e=yv[e]),e){case yv.DT_FLOAT:return"float32";case yv.DT_INT32:case yv.DT_INT64:case yv.DT_INT8:case yv.DT_UINT8:return"int32";case yv.DT_BOOL:return"bool";case yv.DT_DOUBLE:return"float32";case yv.DT_STRING:return"string";default:return null}}function Qv(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function eI(e,t,n){const s=e[t];return s&&s.type?Zv(s.type):n}function tI(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>Zv(e))):n}function nI(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function sI(e,t,n){const s=e[t];return s&&s.shape?nI(s.shape):n}function rI(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function aI(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>Kv(e,s))):n}function iI(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>nI(e))):n}function oI(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class lI{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return Nv(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Nv(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Jv(this.node.rawAttrs,e,t);if(null!=n.s)return Xv(this.node.rawAttrs,e,t);if(null!=n.b)return Yv(this.node.rawAttrs,e,t);if(null!=n.shape)return sI(this.node.rawAttrs,e,t);if(null!=n.type)return eI(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return rI(this.node.rawAttrs,e,t);if(null!=n.list.s)return aI(this.node.rawAttrs,e,t);if(null!=n.list.shape)return iI(this.node.rawAttrs,e,t);if(null!=n.list.b)return oI(this.node.rawAttrs,e,t);if(null!=n.list.type)return tI(this.node.rawAttrs,e,t)}return t}}function uI(e,t,n=""){Z(function(e,t){if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(-1!==e[n]&&-1!==t[n]&&e[n]!==t[n])return!1;return!0}(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}class cI{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Ro(0),ao(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),uI(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,ao(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return qr([],[0].concat(this.elementShape));const n=this.readMany(e);return uI(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),th(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return qr([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return uI(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),vl(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,fh(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];so((()=>{t=xl(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=xl(Nl(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class hI{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);uI(t,e.shape,"TensorList shape mismatch: "),ao(e)})),this.idTensor=Ro(0),this.maxNumElements=s,ao(this.idTensor)}get id(){return this.idTensor.id}copy(){return new hI([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);return uI(e,this.elementShape,"TensorList shape mismatch: "),so((()=>{const t=this.tensors.map((t=>xl(t,e)));return th(t,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=this.tensors.pop();return uI(n.shape,e,"TensorList shape mismatch: "),xl(n,e)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(uI(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");ao(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);return uI(this.tensors[e].shape,t,"TensorList shape mismatch: "),this.tensors[e]}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);uI(this.elementShape,t.shape,"TensorList shape mismatch: "),ao(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);return uI(this.elementShape,n,"TensorList shape mismatch: "),0===(e=e.slice(0,this.size())).length?qr([],[0].concat(this.elementShape)):so((()=>{const t=e.map((e=>xl(this.tensors[e],n)));return th(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);return uI(this.elementShape,t,"TensorList shape mismatch: "),0===this.size()?qr([],[0].concat(this.elementShape)):so((()=>{const e=this.tensors.map((e=>xl(e,t)));return vl(e,0)}))}}function pI(e,t,n){const[s,r]=Iv("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o="fusedbatchnorm"===s,l=Iv("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(o)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.");const u=Iv("strides",e,t,n),c=Tv(e,t,n),h=Iv("dataFormat",e,t,n).toUpperCase(),p=Iv("dilations",e,t,n),[d,f]=Iv("args",e,t,n);return{stride:u,pad:c,dataFormat:h,dilations:p,biasArg:d,preluArg:f,activationFunc:r,leakyreluAlpha:Iv("leakyreluAlpha",e,t,n)}}function dI(e,t,n){return{boxes:Iv("boxes",e,t,n),scores:Iv("scores",e,t,n),maxOutputSize:Iv("maxOutputSize",e,t,n),iouThreshold:Iv("iouThreshold",e,t,n),scoreThreshold:Iv("scoreThreshold",e,t,n),softNmsSigma:Iv("softNmsSigma",e,t,n)}}class fI{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Ro(0),this.tensorMap=new Map,ao(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),so((()=>{const e=fh(t),s=n.length,r=e.length;Z(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];ao(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return so((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return th(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function mI(e,t,n,s){const r=((e,t,n)=>{switch(e.category){case"arithmetic":return so((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[yo(Iv("a",e,t,n),Iv("b",e,t,n))];case"AddN":return[Yo(Iv("tensors",e,t,n))];case"FloorMod":case"Mod":return[Qu(Iv("a",e,t,n),Iv("b",e,t,n))];case"Mul":return[wo(Iv("a",e,t,n),Iv("b",e,t,n))];case"RealDiv":case"Div":return[xo(Iv("a",e,t,n),Iv("b",e,t,n))];case"DivNoNan":return[su(Iv("a",e,t,n),Iv("b",e,t,n))];case"FloorDiv":return[bo(Iv("a",e,t,n),Iv("b",e,t,n))];case"Sub":return[Lo(Iv("a",e,t,n),Iv("b",e,t,n))];case"Minimum":return[Ju(Iv("a",e,t,n),Iv("b",e,t,n))];case"Maximum":return[Uo(Iv("a",e,t,n),Iv("b",e,t,n))];case"Pow":return[Mo(Iv("a",e,t,n),Iv("b",e,t,n))];case"SquaredDifference":return[Qc(Iv("a",e,t,n),Iv("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return so((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[Po(Iv("x",e,t,n))];case"Acos":return[Ko(Iv("x",e,t,n))];case"Acosh":return[Xo(Iv("x",e,t,n))];case"Asin":return[tl(Iv("x",e,t,n))];case"Asinh":return[nl(Iv("x",e,t,n))];case"Atan":return[sl(Iv("x",e,t,n))];case"Atan2":return[rl(Iv("x",e,t,n),Iv("y",e,t,n))];case"Atanh":return[al(Iv("x",e,t,n))];case"Ceil":return[_l(Iv("x",e,t,n))];case"Complex":return[Hr(Iv("real",e,t,n),Iv("imag",e,t,n))];case"Cos":return[ql(Iv("x",e,t,n))];case"Cosh":return[Kl(Iv("x",e,t,n))];case"Elu":return[au(Iv("x",e,t,n))];case"Erf":return[iu(Iv("x",e,t,n))];case"Exp":return[ou(Iv("x",e,t,n))];case"Expm1":return[uu(Iv("x",e,t,n))];case"Floor":return[pu(Iv("x",e,t,n))];case"Log":return[Su(Iv("x",e,t,n))];case"Log1p":return[Cu(Iv("x",e,t,n))];case"Imag":return[gu(Iv("x",e,t,n))];case"Neg":return[$u(Iv("x",e,t,n))];case"Reciprocal":return[$c(Iv("x",e,t,n))];case"Real":return[Cc(Iv("x",e,t,n))];case"Relu":return[Tc(Iv("x",e,t,n))];case"Round":return[Oc(Iv("x",e,t,n))];case"Selu":return[Lc(Iv("x",e,t,n))];case"Sigmoid":return[Il(Iv("x",e,t,n))];case"Sin":return[Wc(Iv("x",e,t,n))];case"Sign":return[Bc(Iv("x",e,t,n))];case"Sinh":return[Vc(Iv("x",e,t,n))];case"Softplus":return[Tu(Iv("x",e,t,n))];case"Sqrt":return[ko(Iv("x",e,t,n))];case"Square":return[vo(Iv("x",e,t,n))];case"Tanh":return[Sl(Iv("x",e,t,n))];case"Tan":return[rh(Iv("x",e,t,n))];case"ClipByValue":return[Ol(Iv("x",e,t,n),Iv("clipValueMin",e,t,n),Iv("clipValueMax",e,t,n))];case"Relu6":return[Ec(Iv("x",e,t,n))];case"Rsqrt":return[Mc(Nv(e.inputNames[0],t,n))];case"Prod":return[gc(Iv("x",e,t,n),Iv("axes",e,t,n))];case"LeakyRelu":return[wu(Iv("x",e,t,n),Iv("alpha",e,t,n))];case"Prelu":return[mc(Iv("x",e,t,n),Iv("alpha",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=Iv("thenBranch",e,t,n),r=Iv("elseBranch",e,t,n),a=Iv("cond",e,t,n),i=Iv("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=Iv("body",e,t,n),r=Iv("cond",e,t,n),a=Iv("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[Ev(Iv("pred",e,t,n))];case"Switch":{const s=Iv("pred",e,t,n);let r=Iv("data",e,t,n);return r.kept||(r=Ev(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==Nv(e,t,n)));return s?[Ev(Nv(s,t,n))]:void 0}case"Enter":{const s=Iv("frameName",e,t,n),r=Iv("tensor",e,t,n);return n.enterFrame(s),[Ev(r)]}case"Exit":{const s=Iv("tensor",e,t,n);return n.exitFrame(),[Ev(s)]}case"NextIteration":{const s=Iv("tensor",e,t,n);return n.nextIteration(),[Ev(s)]}case"TensorArrayV3":{const s=Iv("size",e,t,n),r=Iv("dtype",e,t,n),a=Iv("elementShape",e,t,n),i=Iv("dynamicSize",e,t,n),o=Iv("clearAfterRead",e,t,n),l=Iv("identicalElementShapes",e,t,n),u=Iv("name",e,t,n),c=new cI(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,Ro(1)]}case"TensorArrayWriteV3":{const s=Iv("tensorArrayId",e,t,n),r=Iv("index",e,t,n),a=Iv("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=Iv("tensorArrayId",e,t,n),r=Iv("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=Iv("tensorArrayId",e,t,n),r=Iv("indices",e,t,n),a=Iv("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=Iv("tensorArrayId",e,t,n),r=Iv("indices",e,t,n),a=Iv("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=Iv("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=Iv("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=Iv("tensorArrayId",e,t,n),r=Iv("tensor",e,t,n),a=Iv("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=Iv("tensorArrayId",e,t,n);return[Ro(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=Iv("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=Iv("tensorListId",e,t,n),r=Iv("index",e,t,n),a=Iv("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=Iv("tensorListId",e,t,n),r=Iv("index",e,t,n),a=Iv("elementShape",e,t,n),i=Iv("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=Iv("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new hI([],n,e.dtype,s),i=fh(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(Iv("tensor",e,t,n),s,Iv("elementShape",e,t,n),Iv("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=Iv("elementShape",e,t,n),r=Iv("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new hI([],e,t,n)}(s,r,Iv(a,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=Iv("tensorListId",e,t,n),r=Iv("indices",e,t,n),a=Iv("elementShape",e,t,n),i=Iv("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=Iv("tensorListId",e,t,n),r=Iv("elementShape",e,t,n),a=Iv("elementDType",e,t,n),i=Iv("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);uI(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=fh(e);return new hI(r,t,s)}(Iv("tensor",e,t,n),Iv("elementShape",e,t,n),Iv("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":{const s=Iv("tensorListId",e,t,n),r=n.getTensorList(s.id),a=Iv("dtype",e,t,n),i=Iv("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=Iv("tensorListId",e,t,n),r=Iv("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=Iv("tensorListId",e,t,n),r=Iv("elementShape",e,t,n),a=Iv("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=Iv("tensor",e,t,n),r=Iv("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=0===s?0:e.size/s,i=so((()=>{const i=[];e=xl(e,[1,s,a]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],a];i[s]=xl(Nl(e,o,l),n)}return e.dispose(),i})),o=new hI([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)o.setItem(e,i[e]);return o}(s,Iv("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return so((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=Iv("stride",e,t,n),r=Iv("pad",e,t,n),a=Iv("dataFormat",e,t,n).toUpperCase(),i=Iv("dilation",e,t,n);return[Wl(Iv("x",e,t,n),Iv("filter",e,t,n),s,r,a,i)]}case"Conv2D":{const s=Iv("strides",e,t,n),r=Tv(e,t,n),a=Iv("dataFormat",e,t,n).toUpperCase(),i=Iv("dilations",e,t,n);return[Bl(Iv("x",e,t,n),Iv("filter",e,t,n),[s[1],s[2]],r,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=pI(e,t,n);return[Xh({x:Iv("x",e,t,n),filter:Iv("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:a,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=pI(e,t,n);return[Zh({x:Iv("x",e,t,n),filter:Iv("filter",e,t,n),strides:[s[1],s[2]],pad:r,dataFormat:a,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Iv("outputShape",e,t,n),r=Iv("strides",e,t,n),a=Tv(e,t,n);return[Ul(Iv("x",e,t,n),Iv("filter",e,t,n),s,[r[1],r[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Iv("strides",e,t,n),r=Tv(e,t,n),a=Iv("dilations",e,t,n),i=Iv("dataFormat",e,t,n).toUpperCase();return[Zl(Iv("input",e,t,n),Iv("filter",e,t,n),[s[1],s[2]],r,i,[a[1],a[2]])]}case"Conv3D":{const s=Iv("strides",e,t,n),r=Iv("pad",e,t,n),a=Iv("dataFormat",e,t,n).toUpperCase(),i=Iv("dilations",e,t,n);return[Gl(Iv("x",e,t,n),Iv("filter",e,t,n),[s[1],s[2],s[3]],r,a,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Iv("strides",e,t,n),r=Iv("pad",e,t,n),a=Iv("kernelSize",e,t,n);return[wl(Iv("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=Iv("strides",e,t,n),r=Iv("pad",e,t,n),a=Iv("kernelSize",e,t,n);return[ju(Iv("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=Iv("strides",e,t,n),r=Iv("pad",e,t,n),a=Iv("kernelSize",e,t,n),i=Iv("includeBatchInIndex",e,t,n),{result:o,indexes:l}=Ku(Iv("x",e,t,n),[a[1],a[2]],[s[1],s[2]],r,i);return[o,l]}case"AvgPool3D":{const s=Iv("strides",e,t,n),r=Iv("pad",e,t,n),a=Iv("kernelSize",e,t,n);return[kl(Iv("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=Iv("strides",e,t,n),r=Iv("pad",e,t,n),a=Iv("kernelSize",e,t,n);return[qu(Iv("x",e,t,n),[a[1],a[2],a[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=Iv("strides",e,t,n),r=Iv("pad",e,t,n),a=Iv("dilations",e,t,n),i=s[1],o=s[2],l=a[1],u=a[2];return[eu(Iv("x",e,t,n),Iv("filter",e,t,n),[i,o],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return so((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=Iv("shape",e,t,n),r=Iv("dtype",e,t,n);return[_o(s,Iv("value",e,t,n),r)]}case"LinSpace":return[Iu(Iv("start",e,t,n),Iv("stop",e,t,n),Iv("num",e,t,n))];case"Multinomial":{const s=Iv("logits",e,t,n),r=Iv("numSamples",e,t,n),a=Iv("seed",e,t,n);return[nc(s,r,a)]}case"OneHot":{const s=Iv("indices",e,t,n),r=Iv("depth",e,t,n),a=Iv("onValue",e,t,n),i=Iv("offValue",e,t,n);return[oi(s,r,a,i)]}case"Ones":return[ac(Iv("shape",e,t,n),Iv("dtype",e,t,n))];case"OnesLike":return[ic(Iv("x",e,t,n))];case"RandomUniform":return[Nc(Iv("shape",e,t,n),Iv("minval",e,t,n),Iv("maxval",e,t,n),Iv("dtype",e,t,n))];case"Range":return[Sc(Iv("start",e,t,n),Iv("stop",e,t,n),Iv("step",e,t,n),Iv("dtype",e,t,n))];case"TruncatedNormal":{const s=Iv("shape",e,t,n),r=Iv("mean",e,t,n),a=Iv("stdDev",e,t,n),i=Iv("seed",e,t,n);return[hh(s,r,a,Iv("dtype",e,t,n),i)]}case"Zeros":return[rc(Iv("shape",e,t,n),Iv("dtype",e,t,n))];case"ZerosLike":return[Io(Iv("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=dI(e,t,n),u=await zp.nonMaxSuppressionWithScoreAsync(s,r,a,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=dI(e,t,n),l=Iv("padToMaxOutputSize",e,t,n),u=await zp.nonMaxSuppressionPaddedAsync(s,r,a,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:r,maxOutputSize:a,iouThreshold:i,scoreThreshold:o}=dI(e,t,n);return[await zp.nonMaxSuppressionAsync(s,r,a,i,o)]}case"Where":{const s=Ba(Iv("condition",e,t,n),"bool"),r=[await yh(s)];return s.dispose(),r}case"ListDiff":return Pc(Iv("x",e,t,n),Iv("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return so((()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const s=Iv("x",e,t,n),r=Iv("k",e,t,n),a=Iv("sorted",e,t,n),i=ch(s,r,a);return[i.values,i.indices]}case"Unique":{const s=Iv("x",e,t,n),r=ph(s);return[r.values,r.indices]}case"UniqueV2":{const s=Iv("x",e,t,n),r=Iv("axis",e,t,n),a=ph(s,r);return[a.values,a.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return so((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=Iv("images",e,t,n),r=Iv("size",e,t,n),a=Iv("alignCorners",e,t,n),i=Iv("halfPixelCenters",e,t,n);return[zp.resizeBilinear(s,[r[0],r[1]],a,i)]}case"ResizeNearestNeighbor":{const s=Iv("images",e,t,n),r=Iv("size",e,t,n),a=Iv("alignCorners",e,t,n),i=Iv("halfPixelCenters",e,t,n);return[zp.resizeNearestNeighbor(s,[r[0],r[1]],a,i)]}case"CropAndResize":{const s=Iv("image",e,t,n),r=Iv("boxes",e,t,n),a=Iv("boxInd",e,t,n),i=Iv("cropSize",e,t,n),o=Iv("method",e,t,n),l=Iv("extrapolationValue",e,t,n);return[zp.cropAndResize(s,r,a,i,o,l)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return so((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Iv("default",e,t,n);return[Nv(e.name,t,n)||s];case"Placeholder":return[Nv(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[Ev(Iv("x",e,t,n))];case"IdentityN":return Iv("x",e,t,n).map((e=>Ev(e)));case"Snapshot":return[Ev(Iv("x",e,t,n))];case"Shape":return[ah(Iv("x",e,t,n).shape,"int32")];case"ShapeN":return Iv("x",e,t,n).map((e=>ah(e.shape)));case"Size":return[Ro(Iv("x",e,t,n).size,"int32")];case"Rank":return[Ro(Iv("x",e,t,n).rank,"int32")];case"NoOp":return[Ro(1)];case"Print":const r=Iv("x",e,t,n),a=Iv("data",e,t,n),i=Iv("message",e,t,n),o=Iv("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<a.length;e++)console.log(Array.prototype.slice.call(a[e].dataSync()).slice(0,o));return[r];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return so((()=>((e,t,n)=>{switch(e.op){case"Equal":return[tu(Iv("a",e,t,n),Iv("b",e,t,n))];case"NotEqual":return[sc(Iv("a",e,t,n),Iv("b",e,t,n))];case"Greater":return[fu(Iv("a",e,t,n),Iv("b",e,t,n))];case"GreaterEqual":return[mu(Iv("a",e,t,n),Iv("b",e,t,n))];case"Less":return[ku(Iv("a",e,t,n),Iv("b",e,t,n))];case"LessEqual":return[vu(Iv("a",e,t,n),Iv("b",e,t,n))];case"LogicalAnd":return[Vu(Iv("a",e,t,n),Iv("b",e,t,n))];case"LogicalNot":return[Uu(Iv("a",e,t,n))];case"LogicalOr":return[Gu(Iv("a",e,t,n),Iv("b",e,t,n))];case"Select":case"SelectV2":return[nu(Iv("condition",e,t,n),Iv("a",e,t,n),Iv("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return so((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[ii(Iv("a",e,t,n),Iv("b",e,t,n),Iv("transposeA",e,t,n),Iv("transposeB",e,t,n))];case"Transpose":return[li(Iv("x",e,t,n),Iv("perm",e,t,n))];case"_FusedMatMul":const[s,r]=Iv("fusedOps",e,t,n),a="biasadd"===s,i="prelu"===r,o=Iv("numArgs",e,t,n),l=Iv("leakyreluAlpha",e,t,n);if(a){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=Iv("args",e,t,n);return[Qh({a:Iv("a",e,t,n),b:Iv("b",e,t,n),transposeA:Iv("transposeA",e,t,n),transposeB:Iv("transposeB",e,t,n),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return so((()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Tl(Iv("x",e,t,n),Iv("mean",e,t,n),Iv("variance",e,t,n),Iv("offset",e,t,n),Iv("scale",e,t,n),Iv("epsilon",e,t,n))];case"LRN":return[Nu(Iv("x",e,t,n),Iv("radius",e,t,n),Iv("bias",e,t,n),Iv("alpha",e,t,n),Iv("beta",e,t,n))];case"Softmax":return[qc(Iv("x",e,t,n))];case"LogSoftmax":return[Du(Iv("x",e,t,n))];case"SparseToDense":return[zh(Iv("sparseIndices",e,t,n),Iv("outputShape",e,t,n),Iv("sparseValues",e,t,n),Iv("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return so((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=Iv("axis",e,t,n),r=Iv("keepDims",e,t,n);return[Au(Iv("x",e,t,n),s,r)]}case"Mean":{const s=Iv("axis",e,t,n),r=Iv("keepDims",e,t,n);return[Xu(Iv("x",e,t,n),s,r)]}case"Min":{const s=Iv("axis",e,t,n),r=Iv("keepDims",e,t,n);return[Yu(Iv("x",e,t,n),s,r)]}case"Sum":{const s=Iv("axis",e,t,n),r=Iv("keepDims",e,t,n);return[Ru(Iv("x",e,t,n),s,r)]}case"All":{const s=Iv("axis",e,t,n),r=Iv("keepDims",e,t,n);return[Jo(Iv("x",e,t,n),s,r)]}case"Any":{const s=Iv("axis",e,t,n),r=Iv("keepDims",e,t,n);return[Zo(Iv("x",e,t,n),s,r)]}case"ArgMax":{const s=Iv("axis",e,t,n);return[Qo(Iv("x",e,t,n),s)]}case"ArgMin":{const s=Iv("axis",e,t,n);return[el(Iv("x",e,t,n),s)]}case"Prod":{const s=Iv("axis",e,t,n),r=Iv("keepDims",e,t,n);return[gc(Iv("x",e,t,n),s,r)]}case"Cumsum":{const s=Iv("axis",e,t,n),r=Iv("exclusive",e,t,n),a=Iv("reverse",e,t,n);return[Xl(Iv("x",e,t,n),s,r,a)]}case"Bincount":const s=Iv("x",e,t,n),r=Iv("weights",e,t,n),a=Iv("size",e,t,n);return[Dl(s,r,a)];case"DenseBincount":{const s=Iv("x",e,t,n),r=Iv("weights",e,t,n),a=Iv("size",e,t,n),i=Iv("binaryOutput",e,t,n);return[Yl(s,r,a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return so((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=Iv("n",e,t,n),r=Iv("axis",e,t,n);let a=Iv("tensors",e,t,n);return a=a.slice(0,s),[vl(a,r)]}case"Gather":{const s=Iv("x",e,t,n),r=Iv("indices",e,t,n);return[du(s,Ba(r,"int32"),0)]}case"GatherV2":{const s=Iv("axis",e,t,n),r=Iv("batchDims",e,t,n),a=Iv("x",e,t,n),i=Iv("indices",e,t,n);return[du(a,Ba(i,"int32"),s,r)]}case"Reverse":{const s=Iv("dims",e,t,n),r=[];for(let e=0;e<s.length;e++)s[e]&&r.push(e);const a=Iv("x",e,t,n);return[Ac(a,r)]}case"ReverseV2":{const s=Iv("axis",e,t,n),r=Iv("x",e,t,n);return[Ac(r,s)]}case"Slice":{const s=Iv("begin",e,t,n),r=Iv("size",e,t,n);return[Nl(Iv("x",e,t,n),s,r)]}case"StridedSlice":{const s=Iv("begin",e,t,n),r=Iv("end",e,t,n),a=Iv("strides",e,t,n),i=Iv("beginMask",e,t,n),o=Iv("endMask",e,t,n),l=Iv("ellipsisMask",e,t,n),u=Iv("newAxisMask",e,t,n),c=Iv("shrinkAxisMask",e,t,n),h=Iv("x",e,t,n);return[sh(h,s,r,a,i,o,l,u,c)]}case"Pack":return so((()=>{const s=Iv("axis",e,t,n),r=Iv("tensors",e,t,n),a=r[0].shape,i=eh(r[0]).shape,o=r.map((e=>{const t=re(e.shape,a);if(!t&&!re(eh(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:xl(e,a)}));return[th(o,s)]}));case"Unpack":{const s=Iv("axis",e,t,n),r=Iv("tensor",e,t,n);return fh(r,s)}case"Tile":{const s=Iv("reps",e,t,n);return[cu(Iv("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Iv("axis",e,t,n),r=Iv("numOrSizeSplits",e,t,n),a=Iv("x",e,t,n);return Jc(a,r,s)}case"ScatterNd":{const s=Iv("indices",e,t,n),r=Iv("values",e,t,n),a=Iv("shape",e,t,n);return[Lh(s,r,a)]}case"GatherNd":{const s=Iv("x",e,t,n),r=Iv("indices",e,t,n);return[Ph(s,r)]}case"SparseToDense":{const s=Iv("sparseIndices",e,t,n),r=Iv("outputShape",e,t,n),a=Iv("sparseValues",e,t,n),i=Iv("defaultValue",e,t,n);return[zh(s,a,r,a.dtype===i.dtype?i:Ba(i,a.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return so((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Kc(Iv("x",e,t,n))];case"IFFT":return[Xc(Iv("x",e,t,n))];case"RFFT":return[Zc(Iv("x",e,t,n))];case"IRFFT":return[Yc(Iv("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return so((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Ba(Iv("x",e,t,n),Iv("dtype",e,t,n))];case"ExpandDims":{const s=Iv("axis",e,t,n);return[lu(Iv("x",e,t,n),s)]}case"Squeeze":{const s=Iv("axis",e,t,n);return[eh(Iv("x",e,t,n),s)]}case"Reshape":return[xl(Iv("x",e,t,n),Iv("shape",e,t,n))];case"MirrorPad":return[Zu(Iv("x",e,t,n),Iv("padding",e,t,n),Iv("mode",e,t,n))];case"PadV2":case"Pad":return[lc(Iv("x",e,t,n),Iv("padding",e,t,n),Iv("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Iv("blockShape",e,t,n),r=Iv("paddings",e,t,n);return[dc(Iv("x",e,t,n),s,r)]}case"BatchToSpaceND":{const s=Iv("blockShape",e,t,n),r=Iv("crops",e,t,n);return[$l(Iv("x",e,t,n),s,r)]}case"DepthToSpace":{const s=Iv("blockSize",e,t,n),r=Iv("dataFormat",e,t,n).toUpperCase();return[Jl(Iv("x",e,t,n),s,r)]}case"BroadcastTo":return[Fl(Iv("x",e,t,n),Iv("shape",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=Iv("keyDType",e,t,n),a=Iv("valueDType",e,t,n),i=new fI(r,a);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const r=Iv("tableHandle",e,t,n,s),a=Iv("keys",e,t,n),i=Iv("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=Iv("tableHandle",e,t,n,s),a=Iv("keys",e,t,n),i=Iv("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const r=kv(e.op);if(r&&r.customExecutor)return r.customExecutor(new lI(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return Le(r)?r.then((e=>[].concat(e))):[].concat(r)}class gI{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function yI(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>$v(e)[0]));let c=[];null!=s&&(c=s.map((e=>$v(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(kI(e)||vI(e)||II(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}const bI=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],xI=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],wI=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2"];function kI(e){return bI.indexOf(e.op)>=0}function vI(e){return xI.indexOf(e.op)>=0}function II(e){return wI.indexOf(e.op)>=0}class NI{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new NI(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=yI(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:r}=n,a=[],i=Object.keys(r).map((e=>$v(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&a.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&a.push(e)}));const l=new Set,u=[];for(;a.length>0;){const e=a.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&a.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[$v(e)[0]])),r=t.map((e=>$v(e)[0]));let a=r.map((e=>this.graph.nodes[e]));0===a.length&&(a=this._outputs);const i=this.getCompilationKey(s,a);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,a),this.compiledMap.set(i,o));const l={},u={};return so((()=>{const n=new gI(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=$v(t),a=[];a[r]=e[t],s[n]=a}));const a=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=mI(t,s,n,this._resourceManager);if(Le(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,a,r,i)}}return null==this.parent&&n.dispose(a),t.map((e=>Nv(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const t=function(e,t,n){return t[Cv(e,n.currentContextId)]}(e.name,n,s);null!=t&&t.forEach((e=>{if(e&&!r.has(e.id)){const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}async _executeAsync(e,t,n=!1,s={},r={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));const a=new gI(this.weightMap,s,r,this.functionExecutorMap),i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>Nv(e,i,a))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(i).forEach((e=>{i[e].forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[$v(e)[0]])),i=n.map((e=>$v(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=yI(e,o,this.weightMap,this._initNodes),p=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=$v(t),r=[];r[s]=e[t],d[n]=r}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(a,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!kI(e)&&!Nv(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${r}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&Iv("isConstant",e.node,s,n)&&([c]=Sv(e.node.name,n)),null==s[e.node.name]){const h=mI(e.node,s,n,this._resourceManager);c||([c]=Sv(e.node.name,n));const p=n.currentContext;Le(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=Sv(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!Nv(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!Nv(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=$v(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value;Z(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&Z(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=$v(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=$v(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class SI{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class CI{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new SI}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=ti(e,this.loadOptions);else{const t=la(e,this.loadOptions);if(0===t.length)t.push(ti(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=Yr(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new NI(qv.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=qv.Instance.transformGraph(e.modelInitializer);this.initializer=new NI(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=oa(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof mr||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function $I(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e=`${e}model.json?tfjs-format=file`);const n=new CI(e,t);return await n.load(),n}const TI="2.8.6";function EI(e,t,n=new Map,s=new Set){if(null==e)return null;if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(_I(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=EI(e[a],t,n,s);r[a]=i}return s.delete(e),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function AI(e,t=DI){return RI(e,t)}function RI(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(_I(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=RI(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function DI(e){return null===e?null:_I(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}async function FI(e,t){const n=new Map;EI(e,t,n);for(const e of Array.from(n.keys())){const t=n.get(e);if(Le(t)){const s=await t;n.set(e,s)}}return EI(e,t,n)}function _I(e){return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof mr))}function OI(e){return e instanceof mr?{value:e.clone(),recurse:!1}:_I(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class MI{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class LI extends MI{constructor(){super(LI.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function zI(e){return new WI(e)}function PI(e){return new VI(e)}LI.INITIAL_CAPACITY=32;class BI{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new XI(this,e)}filter(e){return new qI(this,e)}map(e){return new KI(this,e)}mapAsync(e){return new YI(this,e)}serialMapAsync(e){return new YI(this,e).serial()}flatmap(e){return new ZI(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new jI(this,e,t)}columnMajorBatch(e,t=!0,n=DI){return this.rowMajorBatch(e,t).map((e=>AI(e,n)))}concatenate(e,t){return new QI(zI([this,e]),t)}take(e){return e<0||null==e?this:new HI(this,e)}skip(e){return e<0||null==e?this:new GI(this,e)}prefetch(e){return new nN(this,e)}shuffle(e,t){return new sN(this,e,t)}serial(){return new UI(this)}}class WI extends BI{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:(t=e,function(e,t){return EI(e,t)}(t,OI)),done:!1};var t}}class VI extends BI{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class UI extends BI{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class GI extends BI{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;ro(e.value)}return this.upstream.next()}}class HI extends BI{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class jI extends BI{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class qI extends BI{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;ro(e.value)}}}class KI extends BI{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Tr(e.value),n=this.transform(e.value),s=Tr(n);for(const e of t)$r(e,s)||e.dispose();return{value:n,done:!1}}}class XI extends BI{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class YI extends BI{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Tr(e.value),n=await this.transform(e.value),s=Tr(n);for(const e of t)$r(e,s)||e.dispose();return{value:n,done:!1}}}class JI extends BI{constructor(){super(),this.outputQueue=new LI,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class ZI extends JI{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Tr(e.value),n=this.transform(e.value),s=Tr(n);this.outputQueue.pushAll(n);for(const e of t)$r(e,s)||e.dispose();return!0}}class QI extends BI{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var eN;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(eN||(eN={}));class tN extends BI{constructor(e,t=eN.FAIL){super(),this.iterators=e,this.mismatchMode=t,this.count=0,this.currentPromise=null}summary(){return"{TODO: fill in upstream of zip summaries} -> Zip"}async nextState(e){await e;let t=0,n=0;const s=await FI(this.iterators,(function(e){return e instanceof BI?{value:e.next().then((e=>(t++,e.done&&n++,e.value))),recurse:!1}:{value:null,recurse:!0}}));if(t===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case eN.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case eN.SHORTEST:return{value:null,done:!0};case eN.LONGEST:}return this.count++,{value:s,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class nN extends BI{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new MI(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class sN extends nN{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=bc.alea(n||or().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class rN{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return Z(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),aN((async()=>(await n.iterator()).columnMajorBatch(e,t,lN)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,aN((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,aN((async()=>(await t.iterator()).filter((t=>so((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return aN((async()=>(await t.iterator()).map((t=>so((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return aN((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return aN((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,aN((async()=>{return n=PI((async()=>({value:await t.iterator(),done:!1}))).take(e),new QI(n,s);var n,s}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,aN((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=bc.alea(t||or().toString());return aN((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,aN((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function aN(e,t=null){return new class extends rN{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function iN(e){return aN((async()=>zI(e)),e.length)}function oN(e){if(!_I(e))throw new Error("The argument to zip() must be an object or array.");let t;if(Array.isArray(e))for(let n=0;n<e.length;n++)t=null==t?e[n].size:Math.min(t,e[n].size);else if(e instanceof Object)for(const n in e)t=null==t?e[n].size:Math.min(t,e[n].size);return aN((async()=>function(e,t=eN.FAIL){return new tN(e,t)}(await FI(e,(e=>{if(e instanceof rN)return{value:e.iterator(),recurse:!1};if(_I(e))return{value:null,recurse:!0};throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.")})),eN.SHORTEST)),t)}function lN(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof mr||xe(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof mr?th(e):qr(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}rN.MAX_BUFFER_SIZE=1e4;class uN extends rN{constructor(e){super(),this.input=e}async iterator(){return(await this.input.iterator()).decodeUTF8().split("\n").map((e=>(e.endsWith("\r")&&(e=e.slice(0,-1)),e)))}}const cN='"',hN=Symbol("out"),pN=Symbol("field"),dN=Symbol("quote"),fN=Symbol("quoteafterquote"),mN=Symbol("quoteinquote");class gN extends rN{constructor(e,t){super(),this.input=e,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=",",this.delimWhitespace=!1,this.base=new uN(e),t||(t={}),this.hasHeader=!1!==t.hasHeader,this.fullColumnNames=t.columnNames,this.columnConfigs=t.columnConfigs,this.configuredColumnsOnly=t.configuredColumnsOnly,t.delimWhitespace?(Z(null==t.delimiter,(()=>"Delimiter should not be provided when delimWhitespace is true.")),this.delimWhitespace=!0,this.delimiter=" "):this.delimiter=t.delimiter?t.delimiter:","}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const e=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!e)throw new Error("Column names must be provided if there is no header line.");this.fullColumnNames&&e&&Z(e.length===this.fullColumnNames.length,(()=>"The length of provided columnNames ("+this.fullColumnNames.length.toString()+") does not match the length of the header line read from file ("+e.length.toString()+").")),this.fullColumnNames||(this.fullColumnNames=e);const t=this.fullColumnNames.reduce(((e,t)=>(e[t]=e[t]+1||1,e)),{}),n=Object.keys(t).filter((e=>t[e]>1));if(Z(0===n.length,(()=>"Duplicate column names found: "+n.toString())),this.columnConfigs)for(const e of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(e))throw new Error('The key "'+e+'" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+").");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const e=await this.base.iterator(),t=await e.next();if(t.done)throw new Error("No data was found for CSV parsing.");const n=t.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let e=await this.base.iterator();return this.hasHeader&&(e=e.skip(1)),e.map((e=>this.makeDataElement(e)))}makeDataElement(e){const t=this.parseRow(e),n={},s={};for(let r=0;r<this.fullColumnNames.length;r++){const a=this.fullColumnNames[r],i=this.columnConfigs?this.columnConfigs[a]:null;if(!this.configuredColumnsOnly||i){const o=t[r];let l=null;if(""===o)if(i&&void 0!==i.default)l=i.default;else{if(i&&(i.required||i.isLabel))throw new Error(`Required column ${a} is empty in this line: ${e}`);l=void 0}else{const e=Number(o);if(isNaN(e))l=i&&"bool"===i.dtype?this.getBoolean(o):o;else if(i&&i.dtype)switch(i.dtype){case"float32":l=e;break;case"int32":l=Math.floor(e);break;case"bool":l=this.getBoolean(o);break;default:l=e}else l=e}i&&i.isLabel?s[a]=l:n[a]=l}}return 0===Object.keys(s).length?n:{xs:n,ys:s}}getBoolean(e){return"1"===e||"true"===e.toLowerCase()?1:0}parseRow(e,t=!0){const n=[];let s=0;const r=e.length;let a=hN;for(let t=0;t<r;t++)switch(a){case hN:switch(e.charAt(t)){case cN:s=t+1,a=dN;break;case this.delimiter:if(s=t+1," "===this.delimiter&&this.delimWhitespace)break;n.push(""),a=hN;break;default:a=pN,s=t}break;case pN:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t)),a=hN,s=t+1}break;case dN:switch(e.charAt(t)){case cN:a=fN}break;case fN:switch(e.charAt(t)){case this.delimiter:n.push(e.substring(s,t-1)),a=hN,s=t+1;break;case cN:a=dN;break;default:a=mN}break;case mN:switch(e.charAt(t)){case cN:a=dN}}if(a===fN?n.push(e.substring(s,r-1)):n.push(e.substring(s)),t&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class yN extends BI{constructor(e){super(),this.microphoneConfig=e,this.isClosed=!1,this.fftSize=e.fftSize||1024;const t=Math.log2(this.fftSize);if(this.fftSize<0||t<4||t>14||!Number.isInteger(t))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=e.numFramesPerSpectrogram||43,this.sampleRateHz=e.sampleRateHz,this.columnTruncateLength=e.columnTruncateLength||this.fftSize,this.audioTrackConstraints=e.audioTrackConstraints,this.smoothingTimeConstant=e.smoothingTimeConstant||0,this.includeSpectrogram=!1!==e.includeSpectrogram,this.includeWaveform=!0===e.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error("Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.")}summary(){return"microphone"}static async create(e={}){if(Pe().get("IS_NODE"))throw new Error("microphone API is only supported in browser environment.");const t=new yN(e);return await t.start(),t}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(e){throw new Error(`Error thrown while initializing video stream: ${e.message}`)}if(!this.stream)throw new Error("Could not obtain audio from microphone.");const e=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new e,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const t=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,t.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let e,t;const n=await this.getAudioData();if(this.includeSpectrogram){const t=this.flattenQueue(n.freqDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const e=this.flattenQueue(n.timeDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:e,waveform:t},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const e=[],t=[];let n=0;return new Promise((s=>{const r=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&s({freqDataQueue:e,timeDataQueue:t}),e.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),t.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(r),s({freqDataQueue:e,timeDataQueue:t}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error("Can not convert infinite audio stream to array.")}getSampleRate(){return this.sampleRateHz}flattenQueue(e){const t=e[0].length,n=new Float32Array(e.length*t);return e.forEach(((e,s)=>n.set(e,s*t))),n}getTensorFromAudioDataArray(e,t){const n=new Float32Array(ne(t));return n.set(e,n.length-e.length),qr(n,t)}}class bN extends BI{constructor(e,t){if(super(),this.webcamVideoElement=e,this.webcamConfig=t,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=ah([0],"int32"),this.webcamConfig.centerCrop){const e=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,t=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-e)/2,s=(1-t)/2,r=n+e,a=t+s;this.cropBox=ih([s,n,a,r],[1,4])}else this.cropBox=ih([0,0,1,1],[1,4])}summary(){return"webcam"}static async create(e,t={}){if(Pe().get("IS_NODE"))throw new Error("tf.data.webcam is only supported in browser environment.");if(!e){if(e=document.createElement("video"),!t.resizeWidth||!t.resizeHeight)throw new Error("Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.");e.width=t.resizeWidth,e.height=t.resizeHeight}const n=new bN(e,t);return await n.start(),n}async start(){this.webcamConfig.facingMode&&Z("user"===this.webcamConfig.facingMode||"environment"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:"user",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(e){throw e.message=`Error thrown while initializing video stream: ${e.message}`,e}if(!this.stream)throw new Error("Could not obtain video from webcam.");try{this.webcamVideoElement.srcObject=this.stream}catch(e){console.log(e),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((e=>{this.webcamVideoElement.onloadedmetadata=()=>{e()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let e;try{e=di(this.webcamVideoElement)}catch(e){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`)}if(!this.resize)return{value:e,done:!1};try{return{value:this.cropAndResizeFrame(e),done:!1}}catch(e){throw new Error(`Error thrown cropping the video: ${e.message}`)}finally{e.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(e){return so((()=>{const t=e.toFloat().expandDims(0);let n;n=zp.cropAndResize(t,this.cropBox,this.cropBoxInd,this.cropSize,"bilinear");const s=n.shape;return n.reshape(s.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((e=>e.stop()));try{this.webcamVideoElement.srcObject=null}catch(e){console.log(e),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error("Can not convert infinite video stream to array.")}}class xN{}class wN extends BI{split(e){return new kN(this,e)}}class kN extends wN{constructor(e,t){super(),this.upstream=e,this.impl=new vN(e,t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class vN extends JI{constructor(e,t){super(),this.upstream=e,this.separator=t,this.carryover=""}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const e=await this.upstream.next();if(e.done)return""!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover="",!0);const t=e.value.split(this.separator);t[0]=this.carryover+t[0];for(const e of t.slice(0,-1))this.outputQueue.push(e);return this.carryover=t[t.length-1],!0}}class IN extends BI{decodeUTF8(){return new NN(this)}}class NN extends wN{constructor(e){super(),this.upstream=e,this.impl=new SN(e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class SN extends JI{constructor(e){if(super(),this.upstream=e,Pe().get("IS_BROWSER"))this.decoder=new TextDecoder("utf-8");else{const{StringDecoder:e}=n(312);this.decoder=new e("utf8")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const e=await this.upstream.next();let t,n;return!e.done&&(t=e.value,n=Pe().get("IS_BROWSER")?this.decoder.decode(t,{stream:!0}):this.decoder.write(Buffer.from(t.buffer)),this.outputQueue.push(n),!0)}}class CN extends IN{constructor(e,t={}){super(),this.file=e,this.options=t,Z(e instanceof Uint8Array||!!Pe().get("IS_BROWSER")&&(e instanceof File||e instanceof Blob),(()=>"FileChunkIterator only supports File, Blob and Uint8Array right now.")),this.offset=t.offset||0,this.chunkSize=t.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const e=new Promise(((e,t)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)e(new Uint8Array(this.file.slice(this.offset,n)));else{const s=new FileReader;s.onload=n=>{let r=s.result;if(r instanceof ArrayBuffer&&(r=new Uint8Array(r)),!(r instanceof Uint8Array))return t(new TypeError("FileReader returned unknown type."));e(r)},s.onabort=e=>t(new Error("Aborted")),s.onerror=e=>t(new Error(e.type));const r=this.file.slice(this.offset,n);s.readAsArrayBuffer(r)}this.offset=n}));return{value:await e,done:!1}}}function $N(e){return"string"==typeof e&&"file://"===e.substr(0,7)}class TN extends xN{constructor(e,t={}){super(),this.input=e,this.options=t}async iterator(){if($N(this.input)&&Pe().get("IS_NODE")){const e=n(993);this.input=e.readFileSync(this.input.substr(7))}return new CN(this.input,this.options)}}class EN extends xN{constructor(e,t={}){super(),this.url=e,this.fileOptions=t}async iterator(){return $N(this.url)?new TN(this.url,this.fileOptions).iterator():async function(e,t={}){let n,s;var r;"string"==typeof e?n=e:(n=e.url,s={method:(r=e).method,headers:r.headers,body:r.body,mode:r.mode,credentials:r.credentials,cache:r.cache,redirect:r.redirect,referrer:r.referrer,integrity:r.integrity});const a=await lr(n,s);if(a.ok){const e=new Uint8Array(await a.arrayBuffer());return new CN(e,t)}throw new Error(a.statusText)}(this.url,this.fileOptions)}}function AN(e,t={}){return new gN(new EN(e),t)}function RN(e){const t=PI(e);return aN((async()=>t))}function DN(e){return aN((async()=>{const t=await e();return PI((()=>t.next()))}))}async function FN(e,t){return bN.create(e,t)}async function _N(e){return yN.create(e)}const ON="2.8.6";function MN(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Z("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}const LN=gh;class zN extends G{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new U(this,eo())}write(e,t,n){this.firstUse&&(this.firstUse=!1,Pe().get("IS_NODE")&&ud("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const s={};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&ve(n[0])){const r=n.map((e=>ur(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s){this.data.set(e,{values:t,dtype:s,refCount:1})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?hd(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>cr(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Pa(e.shape,e.dtype,n)}makeOutput(e,t,n){const s=this.write(e,t,n);return eo().makeTensorFromDataId(s,t,n,this)}disposeData(e){if(this.data.has(e)){const{complexTensorInfos:t}=this.data.get(e);null!=t&&(this.disposeData(t.real.dataId),this.disposeData(t.imag.dataId)),this.data.delete(e)}}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.data.has(t)){const e=this.data.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}async time(e){const t=or();return e(),{kernelMs:or()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){MN([e],"where");const t=this.readSync(e.dataId);return LN(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function PN(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(MN(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=ne(i.shape),c=n||i.dtype,h=me(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],r);return o.makeTensorInfo(i.shape,c,h)}}function BN(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;if(MN(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=a,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,r);return o.makeTensorInfo(i.shape,u,c)}}fo("cpu",(()=>new zN),1);const WN=PN(zt,(e=>e>=0?e:Math.exp(e)-1)),VN={kernelName:zt,backendName:"cpu",kernelFunc:WN};function UN(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const GN={kernelName:tn,backendName:"cpu",kernelFunc:UN};function HN(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;MN([r],"leakyRelu");const i=ne(r.shape),o=n.data.get(r.dataId).values,l=fe("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const jN={kernelName:ln,backendName:"cpu",kernelFunc:HN};function qN(e){return(t,n,s,r,a)=>{const i=Vo(t,n),o=i.length,l=Te(i),u=fe(a,ne(i)),c=t.length,h=n.length,p=Te(t),d=Te(n),f=Bo(t,i),m=Bo(n,i);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<u.length;++t){const n=Me(t,o,l),a=n.slice(-c);f.forEach((e=>a[e]=0));const i=Oe(a,c,p),g=n.slice(-h);m.forEach((e=>g[e]=0));const y=Oe(g,h,d);u[t]=e(s[i],r[y])}return[u,i]}}const KN=qN(((e,t)=>e<0?t*e:e));function XN(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;MN([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=KN(s.shape,r.shape,a,i,s.dtype);return n.makeTensorInfo(l,s.dtype,o)}const YN={kernelName:Hn,backendName:"cpu",kernelFunc:XN},JN=PN(Yn,(e=>Math.max(0,e))),ZN={kernelName:Yn,backendName:"cpu",kernelFunc:JN},QN=PN(ns,(e=>Math.min(Math.max(0,e),6))),eS={kernelName:ns,backendName:"cpu",kernelFunc:QN};function tS(e,t,n,s,r){if("linear"===n)return UN({inputs:{x:t},backend:e});if("relu"===n)return JN({inputs:{x:t},backend:e});if("elu"===n)return WN({inputs:{x:t},backend:e});if("relu6"===n)return QN({inputs:{x:t},backend:e});if("prelu"===n)return XN({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return HN({inputs:{x:t},backend:e,attrs:{alpha:r}});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function nS(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const sS={kernelName:mt,backendName:"cpu",kernelFunc:nS};function rS(e,t,n="float32"){if("complex64"===n)return nS({inputs:{real:rS(e,t,"float32"),imag:rS(e,t,"float32")},backend:e});const s=De(ne(t),n);return e.makeTensorInfo(t,n,s)}function aS(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const iS={kernelName:Kn,backendName:"cpu",kernelFunc:aS};function oS(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return UN({inputs:{x:r},backend:n});const e=rS(n,r.shape,r.dtype),t=oS({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=nS({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=aS({inputs:{input:r},backend:n}),t=oS({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!be(r.dtype,a)){const e=UN({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}if("int32"===a){const e=n.data.get(r.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(r.shape,"int32",t)}if("bool"===a){const e=n.data.get(r.dataId).values,t=ir([0],r.dtype),[s,a]=qN(((e,t)=>e!==t?1:0))(r.shape,[],e,t,"bool");return n.makeTensorInfo(a,"bool",s)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${a}`)}const lS={kernelName:pt,backendName:"cpu",kernelFunc:oS};function uS(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a,b:i}=n,o=r;MN([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c=s||a.dtype,[h,p]=t(a.shape,i.shape,l,u,c);return o.makeTensorInfo(p,c,h)}:({inputs:e,backend:r})=>{const{a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=oS({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=oS({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),k=nS({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),k}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function cS(e){return(t,n,s,r,a,i)=>{const o=Vo(t,n),l=ne(o),u=o.length,c=Te(o),h=fe("float32",l),p=fe("float32",l),d=Bo(t,o),f=Bo(n,o),m=hd(s,r),g=hd(a,i),y=t.length,b=Te(t),x=n.length,w=Te(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=Me(t,u,c),s=n.slice(-y);d.forEach((e=>s[e]=0));const r=Oe(s,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=Oe(a,x,w),o=e(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const hS=qN(((e,t)=>e+t)),pS=cS(((e,t,n,s)=>({real:e+n,imag:t+s}))),dS=uS(qe,hS,pS),fS={kernelName:qe,backendName:"cpu",kernelFunc:dS};function mS(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=ne(r.shape),o=he(a,i),l=ne(o);Z(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const gS={kernelName:Jn,backendName:"cpu",kernelFunc:mS};function yS(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;MN([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=ne(f),y=ne(m);Z(l>=2&&u>=2&&(g===y||1===g||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`));const b=(g>y?r.shape.slice(0,-2):a.shape.slice(0,-2)).concat([p,d]);Z(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=mS({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),k=mS({inputs:{x:a},backend:n,attrs:{shape:x}}),v=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],N=o?k.shape[1]:k.shape[2],S=Math.max(g,y),C=n.data.get(w.dataId).values,$=n.data.get(k.dataId).values,T=Te(w.shape),E=Te(k.shape),[A,R,D]=i?[T[0],1,T[1]]:[T[0],T[1],1],[F,_,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*N,L=Pa([S,I,N],w.dtype),z=L.values,P=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<I;t+=P)for(let n=0;n<N;n+=P)for(let s=0;s<v;s+=P){const r=Math.min(t+P,I),a=Math.min(n+P,N),i=Math.min(s+P,v);for(let o=t;o<r;o++)for(let t=n;t<a;t++){let n=0;for(let r=s;r<i;r++){const s=Math.min(e,g-1)*A,a=Math.min(e,y-1)*O;n+=C[s+o*R+r*D]*$[r*F+t*_+a]}z[e*M+(o*N+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,L.dtype,L.values)}const bS={kernelName:lt,backendName:"cpu",kernelFunc:yS},xS={kernelName:Ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=yS({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=dS({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=tS(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function wS(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const kS={kernelName:Ge,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;MN(t,"abs");let s=new Float32Array(ne(t.shape));return s=wS(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,"float32")}},vS=PN(He,(e=>Math.acos(e))),IS={kernelName:He,backendName:"cpu",kernelFunc:vS},NS=PN(je,(e=>Math.acosh(e))),SS={kernelName:je,backendName:"cpu",kernelFunc:NS},CS={kernelName:Ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;MN(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=Pa(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function $S(e,t,n,s,r){const a=t.length,i=ne(t),o=Te(t),l=Te(r),u=fe(n,ne(r));for(let t=0;t<i;++t){const n=Me(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[Oe(r,a,l)]=e[t]}return u}function TS(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;MN(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=$S(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const ES={kernelName:Es,backendName:"cpu",kernelFunc:TS},AS={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;MN(r,"all");const o=pe(a,r.shape);let l=o;const u=zu(l,r.shape.length);let c=r;null!=u&&(c=TS({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Bu(l.length,r.shape.length)),Lu("all",l,c.shape.length);const[h,p]=Ou(c.shape,l),d=ne(p),f=De(ne(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=mS({inputs:{x:g},backend:n,attrs:{shape:Mu(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},RS={kernelName:Ye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;MN(r,"any");const o=pe(a,r.shape);let l=o;const u=zu(l,r.shape.length);let c=r;null!=u&&(c=TS({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Bu(l.length,r.shape.length)),Lu("any",l,c.shape.length);const[h,p]=Ou(c.shape,l),d=ne(p),f=De(ne(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=mS({inputs:{x:g},backend:n,attrs:{shape:Mu(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},DS={kernelName:Je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;MN(r,"argMax");let i=pe(a,r.shape);const o=zu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=TS({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Bu(i.length,l.shape.length)),i=[i[0]],Lu("argMax",i,l.shape.length);const[c,h]=Ou(l.shape,i),p=De(ne(c),"int32"),d=ne(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const r=f[t+e];r>n&&(n=r,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},FS={kernelName:Ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;MN(r,"argMin");let i=pe(a,r.shape);const o=zu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=TS({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Bu(i.length,l.shape.length)),i=[i[0]],Lu("argMin",i,l.shape.length);const[c,h]=Ou(l.shape,i),p=De(ne(c),"int32"),d=ne(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const r=f[t+e];r<n&&(n=r,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},_S=PN(Qe,(e=>Math.asin(e))),OS={kernelName:Qe,backendName:"cpu",kernelFunc:_S},MS=PN(et,(e=>Math.asinh(e))),LS={kernelName:et,backendName:"cpu",kernelFunc:MS},zS=PN(tt,(e=>Math.atan(e))),PS={kernelName:tt,backendName:"cpu",kernelFunc:zS},BS=qN(((e,t)=>Math.atan2(e,t))),WS=uS(st,BS),VS={kernelName:st,backendName:"cpu",kernelFunc:WS},US=PN(nt,(e=>Math.atanh(e))),GS={kernelName:nt,backendName:"cpu",kernelFunc:US};function HS(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Pa(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(r.inHeight,c+w),I=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===a?b/w:y}}}return m}function jS(e,t,n,s,r=!1,a=!1){const i=Pa(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=Pa(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,k=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(k,e,n,o,t)}}return i}function qS(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Pa(r.outShape,n),w=x.values,k=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],v=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],N=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*k,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let k=0;k<r.outDepth;++k){const S=k*i-m;let C=S;for(;C<0;)C+=u;const $=Math.min(r.inDepth,p+S),T=n+k*v;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),k=T+n*I;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=k+n*N;let v=b,I=0,S=0;for(let n=C;n<$;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>v?v=r:"avg"===a&&(I+=r,S++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===a?I/S:v}}}}return x}const KS={kernelName:rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;MN(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(yl(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ol(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&re(u.inShape,u.outShape))c=UN({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Te(r.shape),s=HS(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},XS={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u,dilations:c}=s;MN(r,"avgPool3d");let h=c;null==h&&(h=[1,1,1]);const p=ll(r.shape,a,i,h,o,l,u),d=qS(n.data.get(r.dataId).values,r.shape,r.dtype,Te(r.shape),p,"avg");return n.makeTensorInfo(d.shape,"float32",d.values)}},YS={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;MN([r,a],"avgPool3DGrad");const h=ll(a.shape,i,o,u,l,c),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=h.dilationDepth,x=h.dilationHeight,w=h.dilationWidth,k=h.effectiveFilterDepth,v=h.effectiveFilterHeight,I=h.effectiveFilterWidth,N=k-1-h.padInfo.front,S=I-1-h.padInfo.left,C=v-1-h.padInfo.top,$=Pa(a.shape,"float32"),T=1/(m*g*y),E=n.bufferSync(r);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let s=0;s<h.inHeight;++s)for(let r=0;r<h.inWidth;++r){const a=n-N,i=s-C,o=r-S;let l=0;for(let n=0;n<k;n+=b){const s=(a+n)/p;if(!(s<0||s>=h.outDepth||Math.floor(s)!==s))for(let n=0;n<v;n+=x){const r=(i+n)/d;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let n=0;n<I;n+=w){const a=(o+n)/f;a<0||a>=h.outWidth||Math.floor(a)!==a||(l+=E.get(e,s,r,a,t))}}}$.set(l*T,e,n,s,r,t)}return n.makeTensorInfo($.shape,$.dtype,$.values)}},JS={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;MN([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=ol(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=Pa(i.shape,"float32"),v=1/(d*f),I=n.data.get(r.dataId).values,N=Pa(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;r<0||r>=c.outWidth||Math.floor(r)!==r||(i+=N.get(e,s,r,t))}}k.set(i*v,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},ZS={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;Z(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Z(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Z(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),MN([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,k=0,v=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[k++])*d[v++]/Math.sqrt(p[I++]+u),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function QS(e,t,n,s,r){const a=Ai(s,t,n),i=ne(n),o=Te(s);if(a){const n=Ri(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=Pa(s,r,"string"===r?Sd(e):e),u=Pa(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?Cd(u.values):u.values}function eC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;MN(r,"slice");const[o,l]=Di(r,a,i);bi(r,o,l);const u=QS(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const tC={kernelName:us,backendName:"cpu",kernelFunc:eC},nC={kernelName:ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;MN([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=Yp(r.shape,a,o),u=Jp(l.length,a.length),c=Zp(r.shape,a,o),h=Qp(i,a.length),p=ed(c,i,a.length),d=mS({inputs:{x:r},backend:n,attrs:{shape:l}}),f=TS({inputs:{x:d},backend:n,attrs:{perm:u}}),m=mS({inputs:{x:f},backend:n,attrs:{shape:c}}),g=eC({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function sC(e,t,n,s,r){const a=ne(s),i=De(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function rC(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=Pa([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const aC={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=sC(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}};function iC(e){return(t,n,s)=>{const r=fe(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}const oC=iC((e=>Math.ceil(e))),lC=BN(dt,oC),uC={kernelName:dt,backendName:"cpu",kernelFunc:lC},cC=PN(ft,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),hC={kernelName:ft,backendName:"cpu",kernelFunc:cC},pC={kernelName:gt,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(ne(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function dC(e,t,n,s){const r=me(n,ne(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=ne(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?Sd(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}function fC(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const mC={kernelName:sn,backendName:"cpu",kernelFunc:fC};function gC(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=pe(r,t[0].shape)[0];let i=jp(t.map((e=>e.shape)),a);if(0===ne(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>ne(e.shape)>0));if(1===o.length)return UN({inputs:{x:o[0]},backend:n});if(Hp(o.map((e=>e.shape)),a),"complex64"===o[0].dtype){const e=o.map((e=>aS({inputs:{input:e},backend:n}))),t=o.map((e=>fC({inputs:{input:e},backend:n}))),s=gC({inputs:e,backend:n,attrs:{axis:a}}),r=gC({inputs:t,backend:n,attrs:{axis:a}}),i=nS({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const l=o.map((e=>{const t=ne(e.shape.slice(a));return mS({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=jp(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=dC(u,i,t[0].dtype,c),p=jp(o.map((e=>e.shape)),a),d=n.makeTensorInfo(p,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const yC={kernelName:yt,backendName:"cpu",kernelFunc:gC};function bC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;MN([r,a],"conv2d");const h=bl(l),p=ul(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new hr(p.outShape,r.dtype),k=Te(r.shape),v=Te(a.shape),I=k[0],N=x?k[1]:k[2],S=x?k[2]:1,C=x?1:k[1],$=w.strides[0],T=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,D=n.data.get(a.dataId).values,F=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*$;for(let e=0;e<p.outHeight;++e){const s=n+e*T,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*v[0],i=t+n*N;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*S;let o=a+e*v[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*C];for(let e=0;e<p.outChannels;++e)F[t+e*A]+=n*D[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const xC={kernelName:bt,backendName:"cpu",kernelFunc:bC},wC={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;MN([r,a],"conv2dBackpropFilter");const h=bl(l),p=ul(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new hr(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=new hr(r.shape,r.dtype,k),N=new hr(a.shape,a.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?I.get(u,t,n,i)*N.get(u,c,e,o):I.get(u,i,t,n)*N.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},kC={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;MN([r,a],"conv2dBackpropInput");const h=Te(a.shape),p=Te(r.shape);let d=bl(u);const f=ul(i,a.shape,o,1,l,c,!1,d),m=new hr(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,k]=h,{batchSize:v,filterHeight:I,filterWidth:N,inChannels:S,inHeight:C,inWidth:$,outChannels:T,outHeight:E,outWidth:A,strideHeight:R,strideWidth:D}=f;d=f.dataFormat;const F=I-1-f.padInfo.top,_=N-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,P=O?1:m.strides[1],B=p[0],W=O?p[1]:p[2],V=O?p[2]:1,U=O?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<S;++t)for(let n=0;n<C;++n){const s=n-F,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(I+s)/R);for(let i=0;i<$;++i){const o=i-_,l=Math.max(0,Math.ceil(o/D)),u=Math.min(A,(N+o)/D);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=B*e+W*n+V*s,i=x*(I-1-r)+w*(N-1-(s*D-o))+k*t;for(let e=0;e<T;++e)c+=y[a+U*e]*b[i+e]}}g[M*e+L*n+z*i+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},vC={kernelName:kt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;MN([r,a],"conv3d");const u=cl(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new hr(u.outShape,r.dtype),k=n.data.get(r.dataId).values,v=n.data.get(a.dataId).values,I=w.values,N=Te(r.shape),S=Te(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*S[0],i=t+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*S[1],o=i+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*S[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},IC={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;MN([r,a],"conv3dBackpropFilterV2");const u=Te(r.shape),c=Te(a.shape),h=cl(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new hr(h.filterShape,"float32"),x=b.values,[w,k,v,I]=b.strides,N=n.data.get(a.dataId).values,[S,C,$,T]=c,E=n.data.get(r.dataId).values,[A,R,D,F]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/p)),n=Math.min(h.outDepth,(h.inDepth+_-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*k+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*S;for(let m=t;m<n;++m){const t=(e+m*p-_)*R+h,n=m*C+y;for(let e=a;e<i;++e){const a=(r+e*d-M)*D+t,i=e*$+n;for(let e=l;e<u;++e){const t=e*T+i;g+=E[(s+e*f-O)*F+a+o]*N[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},NC={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;MN([r],"conv3dBackpropInputV2");const u=Te(r.shape),c=Te(a.shape),h=cl(l,a.shape,o,1,i),p=new hr(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,k,v]=u,I=n.data.get(a.dataId).values,[N,S,C,$]=c,{batchSize:T,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:D,inDepth:F,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:P,strideDepth:B,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<T;++e)for(let t=0;t<D;++t)for(let n=0;n<F;++n){const s=n-U,r=Math.max(0,Math.ceil(s/B)),a=Math.min(L,(E+s)/B);for(let i=0;i<_;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),T=Math.min(P,(R+h)/V);let D=0;for(let n=r;n<a;++n){const r=n*B-s;for(let s=l;s<u;++s){const a=s*W-o;for(let i=p;i<T;++i){const o=x*e+w*n+k*s+v*i,l=N*(E-1-r)+S*(A-1-a)+C*(R-1-(i*V-h))+$*t;for(let e=0;e<M;++e)D+=b[o+e]*I[l+e]}}}d[f*e+m*n+g*i+y*c+t]=D}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},SC=PN(Nt,(e=>Math.cos(e))),CC={kernelName:Nt,backendName:"cpu",kernelFunc:SC},$C=PN(St,(e=>Math.cosh(e))),TC={kernelName:St,backendName:"cpu",kernelFunc:$C},EC={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=Pa([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,k=Te(r.shape),v=Te(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*k[2]+n*k[1]+i*k[0];const u=w[a];a=s+m*k[2]+n*k[1]+i*k[0];const c=w[a];a=s+h*k[2]+r*k[1]+i*k[0];const p=w[a];a=s+m*k[2]+r*k[1]+i*k[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*v[2]+t*v[1]+e*v[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*k[2]+l*k[1]+i*k[0],a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},AC={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;MN(r,"cumsum");const l=zu([a],r.shape.length);let u=r;null!=l&&(u=TS({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Bu(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Ir(u.dtype,"int32"),p=De(ne(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const s=m(e,t-1);p[n]=i?d[s]+p[s]:d[n]+p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=TS({inputs:{x:g},backend:n,attrs:{perm:Pu(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},RC={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=sC(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=rC(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},DC={kernelName:Et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;Z("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`)),Z(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,p=u*a,d=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*d;for(let t=0;t<d;++t){const s=t+i+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,h,p,d],r.dtype,m)}};function FC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;MN([r,a],"depthwiseConv2DNative");const c=Te(r.shape),h=Te(a.shape);let p=l;null==p&&(p=[1,1]),Z(yl(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=ul(r.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new hr(d.outShape,r.dtype),I=n.data.get(r.dataId).values,N=n.data.get(a.dataId).values,S=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const s=n+e*v.strides[1],r=e*d.strideHeight-x;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=s+e*v.strides[2],n=e*d.strideWidth-w;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const r=a+e*h[1],o=i+s*d.inChannels;let l=t,u=r;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<k;++e)S[l+e]+=t*N[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const _C={kernelName:At,backendName:"cpu",kernelFunc:FC},OC={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;MN([r,a],"depthwiseConv2dNativeBackpropFilter");const h=ul(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new hr(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,k=new hr(r.shape,r.dtype,w),v=n.data.get(a.dataId).values,I=new hr(a.shape,a.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=k.get(l,t,n,o)*I.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},MC={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;MN([r,a],"depthwiseConv2DNativeBackpropInput");const h=Te(r.shape),p=Te(a.shape),d=ul(c,a.shape,i,o,l,u,!0),f=new hr(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,k,v]=h,I=n.data.get(a.dataId).values,[N,S,C]=p,{batchSize:$,filterHeight:T,filterWidth:E,inChannels:A,inHeight:R,inWidth:D,outChannels:F,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=T-1-d.padInfo.top,P=E-1-d.padInfo.left,B=F/A;for(let e=0;e<$;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/M)),a=Math.min(_,(T+s)/M);for(let i=0;i<D;++i){const o=i-P,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=w*e+k*n+v*s,i=N*(T-1-r)+S*(E-1-(s*L-o))+C*t;for(let e=0;e<B;++e)c+=x[a+(t*B+e)]*I[i+e]}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},LC={kernelName:Ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=ne(s.shape),a=n.data.get(s.dataId).values,i=Pa([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},zC={kernelName:_t,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:C}=il(s.shape,r.shape,a,i,"NHWC",o),$=ne(C),T=C.length,E=me(s.dtype,$);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*k-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const a=n+t*N;if(a>=0&&a<f)for(let n=0;n<I;++n){const d=i+n*S;if(d>=0&&d<m){const i=Oe([e,a,d,o],c,Te(s.shape)),f=Oe([t,n,o],p,Te(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[Oe([e,t,a,o],T,Te(C))]=l}}}return{dataId:l.write(ir(E,s.dtype),C,s.dtype),shape:C,dtype:s.dtype}}},PC={kernelName:Mt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Ae(s.shape,u.data.get(s.dataId).values),h=Ae(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:S}=il(s.shape,r.shape,i,o,"NHWC",l);Z(a.rank===S.length,(()=>`Error in ${Mt}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const C=Ae(S,u.data.get(a.dataId).values),$=Fe(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=t,l=n)}}}$[o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(ir($,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},BC={kernelName:Ot,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Ae(s.shape,u.data.get(s.dataId).values),h=Ae(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:S}=il(s.shape,r.shape,i,o,"NHWC",l);Z(a.rank===S.length,(()=>`Error in ${Ot}, dy must have the same rank as output ${S.length}, but got ${a.rank}`));const C=Ae(S,u.data.get(a.dataId).values),$=Fe(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=r+n*N;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=s,l=u)}}}$[e][o][l][a]+=C[e][t][s][a]}}}return{dataId:u.write(ir($,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},WC={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;MN([s,r],"eluGrad");const a=new Float32Array(ne(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},VC=qN(((e,t)=>e===t?1:0)),UC=uS(Wt,VC,null,"bool"),GC={kernelName:Wt,backendName:"cpu",kernelFunc:UC},HC=sd,jC=rd,qC=ad,KC=id,XC=od,YC=ld,JC=PN(Bt,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+HC*n);return t*(1-((((YC*s+XC)*s+KC)*s+qC)*s+jC)*s*Math.exp(-n*n))})),ZC={kernelName:Bt,backendName:"cpu",kernelFunc:JC},QC=iC((e=>Math.exp(e))),e$=BN(Vt,QC),t$={kernelName:Vt,backendName:"cpu",kernelFunc:e$};function n$(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(Z(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),mS({inputs:{x:r},backend:n,attrs:{shape:o}})}const s$={kernelName:Ut,backendName:"cpu",kernelFunc:n$},r$=iC((e=>Math.expm1(e))),a$=BN(Gt,r$),i$={kernelName:Gt,backendName:"cpu",kernelFunc:a$},o$=qN(((e,t)=>e*t)),l$=cS(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),u$=uS(Fn,o$,l$),c$={kernelName:Fn,backendName:"cpu",kernelFunc:u$},h$=qN(((e,t)=>e/t)),p$=uS(Lt,h$),d$={kernelName:Lt,backendName:"cpu",kernelFunc:p$},f$=qN(((e,t)=>e-t)),m$=cS(((e,t,n,s)=>({real:e-n,imag:t-s}))),g$=uS(vs,f$,m$),y$={kernelName:vs,backendName:"cpu",kernelFunc:g$};function b$(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=ne(u),h=fe("float32",c),p=fe("float32",c);for(let e=0;e<r;e++){const s=eC({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=eC({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=nS({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=x$(i,t,n),d=hd(u,c);for(let t=0;t<a;t++){const n=md(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=nS({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function x$(e,t,n){const s=ne(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=w$(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",ar(s,"float32")),i=UN({inputs:{x:a},backend:n}),l=d$.kernelFunc({inputs:{a:e,b:a},backend:n}),u=d$.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}return pd(function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=bd(r*s,t,n),l=md(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),gd(s,a,i,r)}return s}(hd(a,i),s,t));var o}function w$(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=hd(e,t),i=n/2,o=dd(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=nS({inputs:{real:h,imag:p},backend:r}),f=fd(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=nS({inputs:{real:b,imag:x},backend:r}),k=w$(l,u,i,s,r),v=k.real,I=k.imag,N=[v.length],S=r.makeTensorInfo(N,"float32",v),C=r.makeTensorInfo(N,"float32",I),$=nS({inputs:{real:S,imag:C},backend:r}),T=w$(m,g,i,s,r),E=T.real,A=T.imag,R=[E.length],D=r.makeTensorInfo(R,"float32",E),F=r.makeTensorInfo(R,"float32",A),_=nS({inputs:{real:D,imag:F},backend:r}),O=yd(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),P=nS({inputs:{real:L,imag:z},backend:r}),B=u$({inputs:{a:P,b:_},backend:r}),W=dS({inputs:{a:$,b:B},backend:r}),V=g$({inputs:{a:$,b:B},backend:r}),U=aS({inputs:{input:W},backend:r}),G=aS({inputs:{input:V},backend:r}),H=fC({inputs:{input:W},backend:r}),j=fC({inputs:{input:V},backend:r}),q=gC({inputs:[U,G],backend:r,attrs:{axis:0}}),K=gC({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(S),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo($),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const k$={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=ne(s.shape),a=s.shape[s.shape.length-1],i=mS({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=b$(i,!1,n),l=mS({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function v$(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||Se(r),o=me(i,ne(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const I$={kernelName:jt,backendName:"cpu",kernelFunc:v$},N$={kernelName:qt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=fe(s.dtype,ne(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let s=0;s<l;s++){const r=s*u;for(let o=0;o<u;o++){const h=[i,e,s,o][2],p=Math.round(l-h),d=t+n+r+o;let f=c[d];p>=0&&p<l&&(f=c[t+n+p*u+o]),a[d]=f}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},S$=iC((e=>Math.floor(e))),C$=BN(Kt,S$),$$={kernelName:Kt,backendName:"cpu",kernelFunc:C$},T$=qN(((e,t)=>Math.floor(e/t))),E$=uS(Xt,T$,null,"int32"),A$={kernelName:Xt,backendName:"cpu",kernelFunc:E$},R$={kernelName:zs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=bC({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=dS({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=tS(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},D$={kernelName:Ps,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=FC({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=dS({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=tS(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}},F$={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=ne(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=fi(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=Pa([u,c],s.dtype),d=n.data.get(r.dataId).values,f=n.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=[];let n=0;for(let s=0;s<o;s++){const r=d[e*o+s];n+=r*h[s],t.push(r)}if(n<0||n>=a/c)throw new Error(`Invalid indices: ${t} does not index into ${s.shape}`);for(let t=0;t<c;t++)p.values[e*c+t]=f[n*c+t]}return n.makeTensorInfo(l,p.dtype,p.values)}};function _$(e,t,n){const s=Pa(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);s.values[n]=e.values[l]}return s}const O$={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;MN([r,a],"gatherV2");let l=o;null==o&&(l=0);const u=ne(a.shape),c=vd(r,a,pe(i,r.shape)[0],l),h=mS({inputs:{x:r},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),p=mS({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,u/c.batchSize]}}),d=[c.batchSize,c.outerSize,u/c.batchSize,c.sliceSize],f=n.bufferSync(p),m=_$(n.bufferSync(h),f,d);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.makeTensorInfo(c.outputShape,m.dtype,m.values)}},M$=qN(((e,t)=>e>t?1:0)),L$=uS(Qt,M$,null,"bool"),z$={kernelName:Qt,backendName:"cpu",kernelFunc:L$},P$=qN(((e,t)=>e>=t?1:0)),B$=uS(en,P$,null,"bool"),W$={kernelName:en,backendName:"cpu",kernelFunc:B$},V$={kernelName:nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=ne(s.shape),a=s.shape[s.shape.length-1],i=mS({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=b$(i,!0,n),l=mS({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},U$=PN(rn,(e=>Number.isFinite(e)?1:0),"bool"),G$={kernelName:rn,backendName:"cpu",kernelFunc:U$},H$=PN(an,(e=>Math.abs(e)===1/0?1:0),"bool"),j$={kernelName:an,backendName:"cpu",kernelFunc:H$},q$=PN(on,(e=>Number.isNaN(e)?1:0),"bool"),K$={kernelName:on,backendName:"cpu",kernelFunc:q$},X$=qN(((e,t)=>e<t?1:0)),Y$=uS(un,X$,null,"bool"),J$={kernelName:un,backendName:"cpu",kernelFunc:Y$},Z$=qN(((e,t)=>e<=t?1:0)),Q$=uS(cn,Z$,null,"bool"),eT={kernelName:cn,backendName:"cpu",kernelFunc:Q$};function tT(e,t,n){const s=(t-e)/(n-1),r=De(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const nT={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=tT(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},sT=iC((e=>Math.log(e))),rT=BN(pn,sT),aT={kernelName:pn,backendName:"cpu",kernelFunc:rT},iT=PN(dn,(e=>Math.log1p(e))),oT={kernelName:dn,backendName:"cpu",kernelFunc:iT},lT=qN(((e,t)=>e&&t)),uT=uS(fn,lT,null,"bool"),cT={kernelName:fn,backendName:"cpu",kernelFunc:uT},hT=PN(mn,(e=>e?0:1),"bool"),pT={kernelName:mn,backendName:"cpu",kernelFunc:hT},dT=qN(((e,t)=>e||t)),fT=uS(gn,dT,null,"bool"),mT={kernelName:gn,backendName:"cpu",kernelFunc:fT},gT={kernelName:bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;MN(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=ne(r.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-l);d[e]=n}return n.makeTensorInfo(r.shape,r.dtype,d)}},yT={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;MN(i,"LRNGrad");const h=ne(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function bT(e,t,n,s){const r=fe(s,ne(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];t>a&&(a=t)}r[n]=a}return r}function xT(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=pe(a,l);let h=c;const p=zu(h,u);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=$S(d,l,r.dtype,p,e),h=Bu(h.length,u),l=e}MN(r,"max"),Lu("max",h,u);const[f,m]=Ou(l,h),g=bT(d,ne(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;return i&&(b=Mu(f,c)),{dataId:y,shape:b,dtype:r.dtype}}const wT={kernelName:wn,backendName:"cpu",kernelFunc:xT},kT=qN(((e,t)=>Math.max(e,t))),vT=uS(kn,kT),IT={kernelName:kn,backendName:"cpu",kernelFunc:vT},NT={kernelName:vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;MN(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(yl(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ol(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&re(u.inShape,u.outShape))c=UN({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Te(r.shape),s=HS(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}},ST={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u,dilations:c}=s;MN(r,"maxPool3d");let h=c;null==h&&(h=[1,1,1]);const p=ll(r.shape,a,i,h,o,l,u),d=qS(n.data.get(r.dataId).values,r.shape,r.dtype,Te(r.shape),p,"max");return n.makeTensorInfo(d.shape,"float32",d.values)}},CT={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dilations:u,dimRoundingMode:c}=s;MN([r,a],"maxPool3DGrad");const h=ll(a.shape,i,o,u,l,c),p=function(e,t){const n=Pa(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let v=d;for(;v<0;)v+=l;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<k;s+=o){const r=s-u;for(let a=v;a<I;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=N&&(N=o,S=n*c*h+r*c+i)}}}n.set(S,m,y,s,r,g)}}}return n}(n.bufferSync(a),h),d=h.strideDepth,f=h.strideHeight,m=h.strideWidth,g=h.dilationDepth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterDepth,w=h.effectiveFilterHeight,k=h.effectiveFilterWidth,v=x-1-h.padInfo.front,I=k-1-h.padInfo.left,N=w-1-h.padInfo.top,S=Pa(a.shape,"float32"),C=n.bufferSync(r);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let s=0;s<h.inHeight;++s)for(let r=0;r<h.inWidth;++r){const a=n-v,i=s-N,o=r-I;let l=0;for(let n=0;n<x;n+=g){const s=(a+n)/d;if(!(s<0||s>=h.outDepth||Math.floor(s)!==s))for(let r=0;r<w;r+=y){const a=(i+r)/f;if(!(a<0||a>=h.outHeight||Math.floor(a)!==a))for(let i=0;i<k;i+=b){const u=(o+i)/m;if(u<0||u>=h.outWidth||Math.floor(u)!==u)continue;const c=x*w*k-1-p.get(e,s,a,u,t)===n*w*k+r*k+i?1:0;0!==c&&(l+=C.get(e,s,a,u,t)*c)}}}S.set(l,e,n,s,r,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},$T={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;MN([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=ol(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=Pa(p.outShape,o.dtype,jS(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,v=x-1-p.padInfo.top,I=Pa(o.shape,"float32"),N=n.data.get(r.dataId).values,S=Pa(r.shape,"float32",N);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-v,a=s-k;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;0!==l&&(i+=S.get(e,s,o,t)*l)}}I.set(i,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},TT={kernelName:Cn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;MN(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=ol(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=HS(e,0,n,Te(t),r,"max"),i=jS(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};function ET(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;MN(r,"sum"),o="bool"===r.dtype?oS({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):UN({inputs:{x:r},backend:n});const l=o.shape.length,u=pe(a,o.shape),c=zu(u,l);let h=u,p=o;null!=c&&(p=TS({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Bu(h.length,l)),Lu("sum",h,p.shape.length);const[d,f]=Ou(p.shape,h);let m=rS(n,d,Ir(p.dtype,"int32"));const g=ne(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=mS({inputs:{x:m},backend:n,attrs:{shape:Mu(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const AT={kernelName:gs,backendName:"cpu",kernelFunc:ET},RT={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=pe(a,r.shape),l=ne(Ou(r.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=oS({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});u.push(h);const p=p$({inputs:{a:h,b:c},backend:n});u.push(p);const d=ET({inputs:{x:p},backend:n,attrs:{axis:a,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},DT={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;MN(r,"min");const o=pe(a,r.shape);let l=o;const u=zu(l,r.shape.length);let c=r;null!=u&&(c=TS({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Bu(l.length,r.shape.length)),Lu("min",l,c.shape.length);const[h,p]=Ou(c.shape,l),d=ne(p),f=De(ne(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];s<n&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=mS({inputs:{x:g},backend:n,attrs:{shape:Mu(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},FT=qN(((e,t)=>Math.min(e,t))),_T=uS(En,FT),OT={kernelName:En,backendName:"cpu",kernelFunc:_T},MT={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;MN(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=Te(r.shape),f=ne(o),m=o.length,g=Te(o),y=fe(r.dtype,f);for(let e=0;e<f;e++){let t=Me(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Oe(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},LT=qN(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),zT=uS(Rn,LT),PT={kernelName:Rn,backendName:"cpu",kernelFunc:zT};function BT(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=pe([o],r.shape),u=xT({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Mu(u.shape,l),h=mS({inputs:{x:u},backend:n,attrs:{shape:c}}),p=g$({inputs:{a:r,b:h},backend:n}),d=e$({inputs:{x:p},backend:n}),f=ET({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=mS({inputs:{x:f},backend:n,attrs:{shape:c}}),g=p$({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const WT={kernelName:xs,backendName:"cpu",kernelFunc:BT},VT={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;MN(r,"multinomial");const l=o?r:BT({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],d=De(ne(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=bc.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();d[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){d[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}};function UT(e,t,n){const s=ar(-1,n);return o$([],t,s,e,n)}const GT={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;MN(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=UT(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},HT=hp,jT={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;MN(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=HT(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},qT=pp,KT={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;MN(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=qT(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},XT=dp,YT={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;MN(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=XT(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},JT=qN(((e,t)=>e!==t?1:0)),ZT=uS(On,JT,null,"bool"),QT={kernelName:On,backendName:"cpu",kernelFunc:ZT},eE={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s;MN(r,"oneHot");const l=ne(r.shape),u=new Float32Array(l*a);u.fill(o);const c=n.data.get(r.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<a&&(u[e*a+c[e]]=i);return n.makeTensorInfo([...r.shape,a],"int32",u)}};function tE(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=aS({inputs:{input:s},backend:n}),t=tE({inputs:{x:e},backend:n}),r=fC({inputs:{input:s},backend:n}),a=tE({inputs:{x:r},backend:n}),i=nS({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return v$({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const nE={kernelName:Fs,backendName:"cpu",kernelFunc:tE},sE={kernelName:Pn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=aS({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=fC({inputs:{input:r},backend:s}),i=tE({inputs:{x:a},backend:s}),o=nS({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return v$({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function rE(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return n$({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Q(a,e.shape,"All tensors passed to stack must have matching shapes"),Z(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=gC({inputs:t.map((e=>{const t=n$({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const aE={kernelName:Wn,backendName:"cpu",kernelFunc:rE},iE={kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;MN(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=ne(r.shape),h=r.shape.length,p=Te(r.shape),d=ne(o),f=o.length,m=Te(o),g=fe(r.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++)g[Oe(Me(e,h,p).map(((e,t)=>e+l[t])),f,m)]=u[e];return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},oE=qN(((e,t)=>Math.pow(e,t))),lE=uS(Gn,oE),uE={kernelName:Gn,backendName:"cpu",kernelFunc:lE};function cE(e,t,n,s){const[r,a]=Ou(e,s),i=Ir(t,"int32"),o=De(ne(r),i),l=ne(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const hE={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;MN(r,"prod");const o=r.shape.length,l=pe(a,r.shape),u=zu(l,o);let c=l,h=r;const p=[];null!=u&&(h=TS({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=Bu(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=cE(h.shape,h.dtype,d,c);let y=m;return i&&(y=Mu(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function pE(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return De(0,s);const r=De(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+n;return r}const dE={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=pE(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},fE=PN(Xn,(e=>1/e)),mE={kernelName:Xn,backendName:"cpu",kernelFunc:fE},gE={kernelName:es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;MN(r,"resizeBilinear");const l=Te(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(ne([h,u,c,f])),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[p+e]-t)*s,i=a+(n+(m[y+e]-n)*s-a)*r;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}},yE={kernelName:ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;MN([a,r],"resizeBilinearGrad");const o=Te(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],k=p*u,v=p*r,I=l*u,N=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}},bE={kernelName:Zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;MN(r,"resizeNearestNeighbor");const l=Te(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}},xE={kernelName:Qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;MN([a,r],"resizeNearestNeighborGrad");const o=Te(r.shape),l=Te(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,I=2*Math.ceil(k)+2,N=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*v),y=Math.floor(u-N/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}},wE={kernelName:ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;MN(r,"reverse");const i=r.shape.length,o=pe(a,r.shape);if(0===i)return UN({inputs:{x:r},backend:n});const l=new hr(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},kE={kernelName:Ms,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=fe(s.dtype,ne(s.shape)),[u,c,h,p]=s.shape,[d,f]=Xp(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=a;"number"!=typeof a&&(v=3===i?255:a[i]),w>=0&&w<h&&k>=0&&k<c&&(v=y[t+k*(h*p)+w*p+i]),l[t+n+r+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},vE=PN(rs,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),IE={kernelName:rs,backendName:"cpu",kernelFunc:vE},NE=iC((e=>1/Math.sqrt(e))),SE=BN(as,NE),CE={kernelName:as,backendName:"cpu",kernelFunc:SE};function $E(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return Pa(n,t.dtype);const d=Pa(c,t.dtype);d.values.fill(l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const TE={kernelName:is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=yi(0,r,i),p=$E(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}},EE={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;MN([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=Ir(r.dtype,a.dtype),h=De(ne(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:ne(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=l[e]:h[p++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},AE=td,RE=nd,DE=PN(ls,(e=>e>=0?RE*e:AE*(Math.exp(e)-1))),FE={kernelName:ls,backendName:"cpu",kernelFunc:DE},_E=PN(ds,(e=>1/(1+Math.exp(-e)))),OE={kernelName:ds,backendName:"cpu",kernelFunc:_E},ME=PN(ps,(e=>e<0?-1:e>0?1:0)),LE={kernelName:ps,backendName:"cpu",kernelFunc:ME},zE=PN(cs,(e=>Math.sin(e))),PE={kernelName:cs,backendName:"cpu",kernelFunc:zE},BE=PN(hs,(e=>Math.sinh(e))),WE={kernelName:hs,backendName:"cpu",kernelFunc:BE},VE=Math.log(1.1920928955078125e-7)+2,UE=PN(fs,(e=>{const t=e>-VE,n=e<VE,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),GE={kernelName:fs,backendName:"cpu",kernelFunc:UE},HE={kernelName:ys,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;MN([r],"spaceToBatchND");const o=ne(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=iE.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=Yp(u.shape,a,o,!1),h=Jp(c.length,a.length,!1),p=Zp(u.shape,a,o,!1),d=mS({inputs:{x:u},backend:n,attrs:{shape:c}}),f=TS({inputs:{x:d},backend:n,attrs:{perm:h}}),m=mS({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}},jE={kernelName:Is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=yi(0,r,o),d=$E(n.bufferSync(r),n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(o,d.dtype,d.values)}},qE={kernelName:bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=pe(i,r.shape)[0],l=xd(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=eC({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},KE=PN(ms,(e=>Math.sqrt(e))),XE={kernelName:ms,backendName:"cpu",kernelFunc:KE},YE={kernelName:ks,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;MN(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},JE=qN(((e,t)=>{const n=e-t;return n*n})),ZE=uS(ws,JE),QE={kernelName:ws,backendName:"cpu",kernelFunc:ZE},eA=PN(_s,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),tA={kernelName:_s,backendName:"cpu",kernelFunc:eA};function nA(e,t,n,s){const r=Pa(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const sA={kernelName:Ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;MN(r,"stridedSlice");const{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Fi(r.shape,a,i,o,l,u,c,h,p),x=mS({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=eC({inputs:{x},backend:n,attrs:{begin:f,size:g}});w=mS({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else{const e=nA(b,n.bufferSync(x),m,f);w=n.makeTensorInfo(e.shape,e.dtype,e.values)}const k=mS({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},rA=PN(Ss,(e=>Math.tan(e))),aA={kernelName:Ss,backendName:"cpu",kernelFunc:rA},iA=PN(Cs,(e=>Math.tanh(e)));function oA(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=Pa(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}function lA(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=fe(n,i*s),u=fe("int32",i*s);for(let t=0;t<i;t++){const n=t*o,r=e.subarray(n,n+o),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort(((e,t)=>t.value-e.value));const i=t*s,c=l.subarray(i,i+s),h=u.subarray(i,i+s);for(let e=0;e<s;e++)c[e]=a[e].value,h[e]=a[e].index}const c=t.slice();return c[c.length-1]=s,[Pa(c,n,l),Pa(c,"int32",u)]}function uA(e,t,n,s){const r=pe(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i={},o=new Int32Array(n[r]),l=new hr(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=a.slice();h[1]=Object.keys(i).length;const p=new hr(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const cA=[xS,kS,IS,SS,fS,CS,AS,RS,DS,FS,OS,LS,PS,VS,GS,KS,XS,YS,JS,bS,ZS,nC,aC,lS,uC,hC,sS,pC,yC,wC,kC,xC,IC,NC,vC,CC,TC,EC,AC,RC,DC,_C,OC,MC,LC,zC,BC,PC,d$,VN,WC,GC,ZC,t$,s$,i$,k$,I$,N$,$$,A$,R$,D$,F$,O$,z$,W$,GN,V$,mC,G$,j$,K$,jN,J$,eT,nT,aT,oT,cT,pT,mT,gT,yT,IT,NT,ST,CT,$T,TT,wT,RT,DT,OT,MT,PT,VT,c$,GT,jT,KT,YT,QT,eE,sE,aE,iE,uE,YN,hE,dE,iS,mE,ZN,eS,gS,gE,yE,bE,xE,wE,kE,IE,CE,TE,EE,FE,OE,LE,PE,WE,tC,WT,GE,HE,jE,qE,XE,YE,QE,tA,sA,y$,AT,aA,{kernelName:Cs,backendName:"cpu",kernelFunc:iA},{kernelName:$s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;MN(r,"tile");const i=oA(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;MN(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=lA(o,r.shape,r.dtype,a);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},ES,{kernelName:As,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;MN(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=uA(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=eC({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=mS({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:Ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;MN(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=n$({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=ar(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=UC({inputs:{a:s,b:c},backend:n}),i=oS({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=u$({inputs:{a:i,b:r},backend:n}),h=ET({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=rE({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},nE];for(const e of cA)Hs(e);const hA={},pA={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function dA(e){if(!(e in hA)){const t=function(e){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e);return t.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete hA[e]}),!1),1===e?t.getContext("webgl",pA)||t.getContext("experimental-webgl",pA):t.getContext("webgl2",pA)}(e);if(null===t)return console.log("Could not get context for WebGL version",e),null;hA[e]=t}const t=hA[e];return t.isContextLost()?(delete hA[e],dA(e)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),hA[e])}var fA,mA,gA;function yA(e,t){return[t,e]}function bA(e){const t=ne(e);return oe(Math.ceil(t/4))}function xA(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function wA(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===Pe().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT),l=e.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function kA(e,t){const n=t();return Pe().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function vA(e){return!!(Pe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function IA(e,t){return RA(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(fA||(fA={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(mA||(mA={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(gA||(gA={}));const NA=/ERROR: [0-9]+:([0-9]+):/g;function SA(e,t){if(kA(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function CA(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(kA(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),kA(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),kA(e,(()=>e.enableVertexAttribArray(o))),!0)}function $A(e,t,n,s){kA(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),kA(e,(()=>e.activeTexture(e.TEXTURE0+n))),kA(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),kA(e,(()=>e.uniform1i(n,s)))}function TA(e,t,n){kA(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),kA(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function EA(e,t){kA(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),kA(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function AA(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function RA(e,t,n){const s=kA(e,(()=>t()));if(null==s)throw new Error(n);return s}function DA(e,t=2){return ne(e.slice(0,e.length-t))}function FA(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function _A(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[DA(e),...FA(e)]),t}function OA(e){return e%2==0}function MA(e,t){if(re(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(OA(n)&&OA(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&OA(e[0])&&OA(t[0])}let LA,zA;function PA(e,t){return null!=e.getExtension(t)}function BA(e){try{if(null!=dA(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function WA(e){const t=wA(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function VA(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Z("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const UA=Pe();function GA(){let e,t,n,s,r,a,i,o,l,u;return 2===Pe().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function HA(e,t,n="index"){const s=Te(t);return s.map(((t,r)=>`int ${e[r]} = ${n} / ${t}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function jA(e){const t=Te(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}UA.registerFlag("HAS_WEBGL",(()=>UA.getNumber("WEBGL_VERSION")>0)),UA.registerFlag("WEBGL_VERSION",(()=>BA(2)?2:BA(1)?1:0)),UA.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),UA.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===UA.get("WEBGL_VERSION"))),UA.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),UA.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),UA.registerFlag("WEBGL_PACK",(()=>UA.getBool("HAS_WEBGL"))),UA.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>UA.getBool("WEBGL_PACK"))),UA.registerFlag("WEBGL_PACK_CLIP",(()=>UA.getBool("WEBGL_PACK"))),UA.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>!1)),UA.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>UA.getBool("WEBGL_PACK"))),UA.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>UA.getBool("WEBGL_PACK"))),UA.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>UA.getBool("WEBGL_PACK"))),UA.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>UA.getBool("WEBGL_PACK"))),UA.registerFlag("WEBGL_PACK_REDUCE",(()=>UA.getBool("WEBGL_PACK"))),UA.registerFlag("WEBGL_LAZILY_UNPACK",(()=>UA.getBool("WEBGL_PACK"))),UA.registerFlag("WEBGL_CONV_IM2COL",(()=>UA.getBool("WEBGL_PACK"))),UA.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==LA){const t=dA(e);LA=t.getParameter(t.MAX_TEXTURE_SIZE)}return LA}(UA.getNumber("WEBGL_VERSION")))),UA.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==zA){const t=dA(e);zA=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,zA)}(UA.getNumber("WEBGL_VERSION")))),UA.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=UA.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=dA(e);return t=PA(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:PA(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),UA.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>UA.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Or())),UA.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=dA(e);if(1===e){if(!PA(t,"OES_texture_float"))return!1}else if(!PA(t,"EXT_color_buffer_float"))return!1;return WA(t)}(UA.getNumber("WEBGL_VERSION")))),UA.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!UA.getBool("WEBGL_FORCE_F16_TEXTURES")&&UA.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),UA.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=dA(e);if(1!==e){if(PA(t,"EXT_color_buffer_float"))return WA(t);const e="EXT_color_buffer_half_float";if(PA(t,e)){const n=t.getExtension(e);return function(e,t){const n=wA(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(r),a}(t,n)}return!1}return!!PA(t,"OES_texture_float")&&!!PA(t,"WEBGL_color_buffer_float")&&WA(t)}(UA.getNumber("WEBGL_VERSION")))),UA.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=UA.getNumber("WEBGL_VERSION"))&&null!=dA(e).fenceSync;var e})),UA.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>UA.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),UA.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}));const qA="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";class KA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=fA.DENSE;const t=bA(e),n=GA();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${HA(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${n.output} = result;\n      }\n    `}}class XA{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=fA.DENSE;const t=bA(e),n=GA();this.outputShape=e,this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${HA(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2(${t[0]}, ${t[1]}));\n        int index = 4 * (resTexRC.x * ${t[1]} + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${n.output} = result;\n      }\n    `}}class YA{constructor(e){this.variableNames=["A"],this.outTexUsage=mA.DOWNLOAD;const t=GA();this.outputShape=e,this.userCode=`\n      ${qA}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class JA{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=mA.DOWNLOAD;const t=GA();this.outputShape=e,this.userCode=`\n      ${qA}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class ZA{constructor(e,t,n=!1){this.variableNames=["A"];const s=GA(),[r,a]=t;this.outputShape=e;let i="result";n&&(i="floor(result * 255. + 0.5)"),this.userCode=`\n      ${jA(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / ${a};\n        int c = imod(flatIndex, ${a});\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${i}, 0., 0., 0.);\n      }\n    `}}class QA{constructor(e,t,n=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const s=GA(),[r,a]=t;this.outputShape=e;let i="",o="result";n&&(o="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let n=0;n<=1;n++){const o=2*t+n;i+=`\n          localCoords = coords;\n          if(localCoords[2] + ${n} < ${e[2]}) {\n            localCoords[2] += ${n};\n            if(localCoords[1] + ${t} < ${e[1]}) {\n              localCoords[1] += ${t};\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / ${a};\n              c = imod(flatIndex, ${a});\n              uv = (vec2(c, r) + halfCR) / vec2(${a}.0, ${r}.0);\n              values = ${s.texture2D}(A, uv);\n\n              if(offset == 0) {\n                result[${o}] = values[0];\n              } else if(offset == 1) {\n                result[${o}] = values[1];\n              } else if(offset == 2) {\n                result[${o}] = values[2];\n              } else {\n                result[${o}] = values[3];\n              }\n            }\n          }\n        `}this.userCode=`\n      ${jA(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        ${i}\n\n        ${s.output} = ${o};\n      }\n    `}}function eR(e,t,n,s,r,a){!function(e,t){const n=Pe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return RA(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return kA(e,(()=>e.bindTexture(o,i))),kA(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),kA(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),kA(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),kA(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),kA(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))),kA(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),i}function tR(e){return e.internalFormatFloat}function nR(e){return e.internalFormatHalfFloat}function sR(e){return e.downloadTextureFormat}function rR(e){return e.internalFormatPackedFloat}function aR(e){return e.internalFormatPackedHalfFloat}class iR{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Pe().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){hA[e]=t}(t,e)):this.gl=dA(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(1===Pe().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=IA(this.gl,e),PA(this.gl,t))this.textureHalfFloatExtension=IA(this.gl,t);else if(Pe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),PA(this.gl,s))this.colorBufferHalfFloatExtension=IA(this.gl,s);else if(Pe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",PA(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!PA(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=RA(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return kA(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),kA(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=RA(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return kA(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),kA(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return RA(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=wA(this.gl,this.textureHalfFloatExtension)}get debug(){return Pe().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;kA(e,(()=>e.finish())),kA(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),kA(e,(()=>e.deleteFramebuffer(this.framebuffer))),kA(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),kA(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),kA(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=yA(t,n);return eR(e,r,a,tR(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=yA(t,n);return eR(e,r,a,nR(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=yA(t,n);return eR(e,r,a,sR(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){kA(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?kA(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):kA(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),kA(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;kA(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),kA(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),kA(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=xA(t,n);return eR(e,r,a,aR(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=xA(t,n);return eR(e,r,a,rR(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(EA(this.gl,this.framebuffer),this.outputTexture=null),kA(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=yA(t,n),i=new Uint8Array(t*n*4);return kA(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return function(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=xA(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();kA(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return kA(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),kA(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),kA(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Pe().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return kA(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl,n=function(e,t){const n=RA(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(kA(e,(()=>e.shaderSource(n,t))),kA(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function(e,t){const n=NA.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>ue((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${ue(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(t,e),s=function(e){const t=GA();return function(e,t){const n=RA(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(kA(e,(()=>e.shaderSource(n,t))),kA(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t),r=function(e){return RA(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return kA(t,(()=>t.attachShader(r,s))),kA(t,(()=>t.attachShader(r,n))),function(e,t){if(kA(e,(()=>e.linkProgram(t))),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,r),this.debug&&SA(t,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(e,t,n){return kA(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),CA(e,t,"clipSpacePos",n,3,20,0)&&CA(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),r}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&kA(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&SA(this.gl,this.program),kA(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return RA(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),kA(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),$A(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=xA(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&SA(this.gl,this.program),AA(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),kA(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),kA(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=IA(this.gl,2===Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await ce((()=>this.disposed||this.isQueryAvailable(e,Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||ce((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),TA(this.gl,e,this.framebuffer),this.debug&&AA(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(TA(this.gl,this.outputTexture,this.framebuffer),this.debug&&AA(this.gl)):EA(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;TA(s,e,this.framebuffer),this.debug&&AA(s),this.outputTexture=e,kA(s,(()=>s.viewport(0,0,t,n))),kA(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),kA(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{getBroadcastDims:oR}=g;function lR(e,t,n,s){const r=[];e.forEach((e=>{const t=ne(e.shapeInfo.logicalShape);e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`))}));const a=r.join("\n"),i=e.map((e=>function(e,t,n=!1){let s="";s+=n?cR(e):uR(e);const r=e.shapeInfo.logicalShape,a=t.logicalShape;return r.length<=a.length&&(s+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=oR(e.shapeInfo.logicalShape,t.logicalShape),l=yR(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===ne(e.shapeInfo.logicalShape),m=1===ne(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&re(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=yR(l),c=oR(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";return f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t)),s}(e,t,s))).join("\n"),o=t.texShape,l=GA(),u=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,h,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${hR}\n    ${pR}\n    ${dR}\n  `}(l);return t.isPacked?(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===n[0]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return 2 * (resTexRC.x * ${n[1]} + resTexRC.y);\n    }\n  `}(0,t);case 2:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(re(e,t))return`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[2]/2),r=s*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t);default:return function(e,t){const n=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],s=Math.ceil(e[e.length-1]/2),r=s*Math.ceil(e[e.length-2]/2);let a=r,i="",o="b, r, c";for(let t=2;t<e.length-1;t++)a*=e[e.length-t-1],i=`\n      int b${t} = index / ${a};\n      index -= b${t} * ${a};\n    `+i,o=`b${t}, `+o;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec${e.length}(${o});\n    }\n  `}(e,t)}}(t.logicalShape,o),h=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(l)):(c=function(e,t){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return 1===(n=t)[0]?`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `;case 2:return function(e,t){return re(e,t)?`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t);case 3:return function(e,t){const n=HA(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec3(r, c, d);\n    }\n  `}(e,t);case 4:return function(e,t){const n=HA(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${n}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t);case 5:return function(e,t){const n=HA(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=HA(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}var n}(t.logicalShape,o),h=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),s&&(p+=fR),[p,u,h,a,c,i,n].join("\n")}function uR(e){const t=e.shapeInfo.logicalShape;switch(t.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`float ${n}() {return ${t};}`;const[s,r]=e.shapeInfo.texShape;if(1===s&&1===r)return`\n      float ${n}() {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const[a,i]=e.shapeInfo.texShape;return`\n    float ${n}() {\n      vec2 uv = uvFromFlat(${a}, ${i}, ${mR(t)});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${n}(int index) {\n        ${gR(e)}\n      }\n    `;const s=e.shapeInfo.texShape,r=s[0],a=s[1];if(1===a&&1===r)return`\n      float ${n}(int index) {\n        return sampleTexture(${t}, halfCR);\n      }\n    `;const i=mR(t);return 1===a?`\n      float ${n}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${r}.0);\n        return sampleTexture(${t}, uv);\n      }\n    `:1===r?`\n      float ${n}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${t}, uv);\n      }\n    `:`\n    float ${n}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${a}, index + ${i});\n      return sampleTexture(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape;if(null!=r&&re(t,r)){const e=r[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `}const{newShape:a,keptDims:i}=de(t),o=a;if(o.length<t.length){const t=["row","col"];return`\n      ${uR(bR(e,o))}\n      float ${s}(int row, int col) {\n        return ${s}(${xR(t,i)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${t[1]}, 1)));\n        ${gR(e)}\n      }\n    `;const l=r[0],u=r[1],c=mR(n);return 1===u?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `:1===l?`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${c}), vec3(${t[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${u}.0, 0.5);\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${t[1]} + col + ${c};\n    vec2 uv = uvFromFlat(${l}, ${u}, index);\n    return sampleTexture(${n}, uv);\n  }\n`}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[1]*t[2],a=t[2],{newShape:i,keptDims:o}=de(t),l=i;if(l.length<t.length){const t=["row","col","depth"];return`\n        ${uR(bR(e,l))}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${xR(t,o)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${a}, 1)));\n        ${gR(e)}\n      }\n    `;const u=e.shapeInfo.texShape,c=u[0],h=u[1],p=e.shapeInfo.flatOffset;if(h===r&&null==p)return`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${c}.0);\n          return sampleTexture(${n}, uv);\n        }\n      `;if(h===a&&null==p)return`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${t[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${c}.0);\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${a} + depth + ${mR(n)};\n        vec2 uv = uvFromFlat(${c}, ${h}, index);\n        return sampleTexture(${n}, uv);\n      }\n  `}(e);case 4:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[3],a=t[2]*r,i=t[1]*a,{newShape:o,keptDims:l}=de(t);if(o.length<t.length){const t=["row","col","depth","depth2"];return`\n      ${uR(bR(e,o))}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${xR(t,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${r}, 1)));\n        ${gR(e)}\n      }\n    `;const u=e.shapeInfo.flatOffset,c=e.shapeInfo.texShape,h=c[0],p=c[1];if(p===i&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(p===r&&null==u)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${t[1]*t[2]}, ${t[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${p}, index + ${mR(n)});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=de(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${uR(bR(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${xR(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${gR(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${mR(n)};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=de(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${uR(bR(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${xR(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${gR(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${mR(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${t.length}-D input sampling is not yet supported`)}}function cR(e){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${GA().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=e.shapeInfo.texShape,r=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],a=GA();return`\n    vec4 ${n}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${r[0]}, ${r[1]}, index);\n      return ${a.texture2D}(${t}, uv);\n    }\n  `}(e);case 2:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=r[0],i=r[1],o=GA();if(null!=r&&re(t,r))return`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${o.texture2D}(${n}, uv);\n      }\n    `;const l=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(t[1]/2)}, ${l[0]}, ${l[1]}, row, col);\n      return ${o.texture2D}(${n}, uv);\n    }\n  `}(e);case 3:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===t[0]){const n=[1,2],r=["b","row","col"];return`\n        ${cR(bR(e,t.slice(1)))}\n        vec4 ${s}(int b, int row, int col) {\n          return ${s}(${xR(r,n)});\n        }\n      `}const i=a[0],o=a[1],l=Math.ceil(t[2]/2);return`\n    vec4 ${s}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${i}, ${o}, ${l*Math.ceil(t[1]/2)}, ${l}, b, row, col);\n      return ${GA().texture2D}(${n}, uv);\n    }\n  `}(e);default:return function(e){const t=e.shapeInfo.logicalShape,n=t.length,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],o=i[0],l=i[1],u=Math.ceil(t[n-1]/2);let c=u*Math.ceil(t[n-2]/2),h="int b, int row, int col",p=`b * ${c} + (row / 2) * ${u} + (col / 2)`;for(let e=2;e<n-1;e++)h=`int b${e}, `+h,c*=t[n-e-1],p=`b${e} * ${c} + `+p;return`\n    vec4 ${r}(${h}) {\n      int index = ${p};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${o});\n      return ${GA().texture2D}(${s}, uv);\n    }\n  `}(e)}}const hR="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",pR="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",dR="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fR="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function mR(e){return`offset${e}`}function gR(e){const t=e.name,n=ne(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function yR(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function bR(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function xR(e,t){return t.map((t=>e[t])).join(", ")}function wR(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!re(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!re(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}const{addImpl:kR,bincountImpl:vR,bincountReduceImpl:IR,ceilImpl:NR,concatImpl:SR,expImpl:CR,expm1Impl:$R,floorImpl:TR,gatherV2Impl:ER,greaterImpl:AR,lessImpl:RR,linSpaceImpl:DR,logImpl:FR,maxImpl:_R,maximumImpl:OR,minimumImpl:MR,multiplyImpl:LR,negImpl:zR,prodImpl:PR,rangeImpl:BR,rsqrtImpl:WR,simpleAbsImpl:VR,sliceImpl:UR,stridedSliceImpl:GR,subImpl:HR,tileImpl:jR,topKImpl:qR,transposeImpl:KR,uniqueImpl:XR}=V;function YR(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function JR(e,t){return 1===t?[e]:YR(e,t)}class ZR{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e;const t=e.length;if(0===t)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const n=JR("rc",t),s=yR(t),r=function(e,t,n){if(1===e)return`rc > ${t[0]}`;let s="";for(let r=e-2;r<e;r++)s+=`${n[r]} >= ${t[r]}`,r<e-1&&(s+="||");return s}(t,e,n),a=function(e,t,n,s){if(1===e)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${n};\n  `}(t,e[e.length-1],e[e.length-2],n),i=function(e,t){const n=e.length,s=function(e,t){const n=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let a=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let n=2;n<e;n++)a=`${t[t.length-1-n]},`+a;n.push(a)}return n}(n,t);return 1===n?`getA(rc),\n            rc + 1 >= ${e[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(e,n);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class QR{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s;this.userCode=`\n      ${s=t,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${HA(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${jA(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${e[1]};\n        int cols = ${e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class eD{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=nD(t,n),r=sD(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=tD(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].shift();return this.usedTextures[r].push(e),e}let i;return s===gA.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===gA.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===gA.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===gA.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===gA.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=nD(n,s),a=sD(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=tD(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=Pe().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function tD(e,t,n,s,r){const a=function(e,t){switch(e){case gA.PACKED_2X2_FLOAT32:return rR(t);case gA.PACKED_2X2_FLOAT16:return aR(t);case gA.UNPACKED_FLOAT32:return tR(t);case gA.UNPACKED_FLOAT16:return nR(t);case gA.PACKED_4X1_UNSIGNED_BYTE:return sR(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=xA(e[0],e[1]);i=t*n}else{const[t,n]=yA(e[0],e[1]);i=t*n}return i*function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(n,a)}function nD(e,t){if(e===mA.UPLOAD)return gA.PACKED_2X2_FLOAT32;if(e===mA.RENDER||null==e)return function(e){return Pe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?gA.PACKED_2X2_FLOAT32:gA.UNPACKED_FLOAT32:e?gA.PACKED_2X2_FLOAT16:gA.UNPACKED_FLOAT16}(t);if(e===mA.DOWNLOAD||e===mA.PIXELS)return gA.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function sD(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class rD{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const aD="return abs(x);",iD="return x;";class oD{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class lD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e;const t=e.length,n=JR("rc",t),s=yR(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const uD=gh,cD={};class hD extends G{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.warnedAboutCPUBackend=!1,this.pendingDeletes=0,this.disposed=!1,!Pe().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const e=dA(Pe().getNumber("WEBGL_VERSION"));this.binaryCache=((t=Pe().getNumber("WEBGL_VERSION"))in cD||(cD[t]={}),cD[t]),this.gpgpu=new iR(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;var t;this.textureManager=new eD(this.gpgpu),this.numMBBeforeWarning=null==Pe().global.screen?1024:Pe().global.screen.height*Pe().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new U(this,eo())}numDataIds(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes}write(e,t,n){if((Pe().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Pe().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:mA.UPLOAD,refCount:1,complexParentRefCount:0}),s}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}decComplexRef(e){if(this.texData.has(e)){const t=this.texData.get(e);t.complexParentRefCount>0&&t.refCount--}}move(e,t,n,s){if(Pe().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:mA.UPLOAD,refCount:1,complexParentRefCount:0})}disposeIntermediateTensorInfo(e){const t=e.dataId;if(this.texData.has(t)){const e=this.texData.get(t);e.refCount--,e.refCount<1&&this.disposeData(t)}}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new oD(i,iD):new rD(i,iD);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=or()),c="complex64"===s?hd(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=or()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new oD(s,iD):new rD(s,iD);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(!Pe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Pe().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&Pe().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture,...bA(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=hd(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=ne(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}null!=l&&this.disposeIntermediateTensorInfo(l);const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e),this.pendingDeletes--),h}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map((e=>cr(e)))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Pa(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!vA(n)){if(Pe().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=ne(t);if(Pe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture,...bA(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=Pe().getBool("WEBGL_PACK")&&!0===s,i=a?_A(t):t,o=a?new JA(i):new YA(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}async time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=te(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=te(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=X(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:or(),endMs:null}}endTimer(e){return Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=or(),e)}async getQueryTime(e){if(Pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){if(this.pendingDisposal.has(e))return;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),void this.pendingDeletes++;if(!this.texData.has(e))return;if(this.texData.get(e).complexParentRefCount>0)return void this.texData.get(e).refCount--;this.releaseGPUData(e);const{complexTensorInfos:t}=this.texData.get(e);null!=t&&(this.texData.get(t.real.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.real),this.texData.get(t.imag.dataId).complexParentRefCount--,this.disposeIntermediateTensorInfo(t.imag)),this.texData.delete(e)}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}getCPUBackend(){return Pe().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=eo().findBackend("cpu")),this.cpuBackend):null}shouldExecuteOnCPU(e,t=128){const n=this.getCPUBackend();return Pe().getBool("IS_TEST")||this.warnedAboutCPUBackend||null!=n||(console.warn("Your application contains ops that are small enough to be executed on the CPU backend, however the CPU backend cannot be found. Consider importing the CPU backend (@tensorflow/tfjs-backend-cpu) for better performance."),this.warnedAboutCPUBackend=!0),null!=n&&e.every((e=>null==this.texData.get(e.dataId).texture&&ne(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){ud("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return uD(e.shape,t)}packedUnaryOp(e,t,n){const s=new oD(e.shape,t);return this.compileAndRun(s,[e],n)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=VR(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Pe().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,aD,e.dtype);const t=new rD(e.shape,aD);return this.compileAndRun(t,[e])}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&ve(n[0])){const r=n.map((e=>ur(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:s}=this.makeTensorInfo(e,t,n);return eo().makeTensorFromDataId(s,e,t,this)}unpackTensor(e){const t=new lD(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new ZR(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[DA(e.shape),...FA(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[DA(t),...FA(t)],a=new QR(r,n),i=this.runWebGLProgram(a,[s],e.dtype,null,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e){const t=this.texData.get(e),{isPacked:n,shape:s,dtype:r}=t,a=_A(s);let i;return i=n?new XA(a):new KA(a),{dtype:r,shape:s,dataId:this.runWebGLProgram(i,[{shape:a,dtype:r,dataId:e}],r,null,!0).dataId}}runWebGLProgram(e,t,n,s,r=!1){const a=this.makeTensorInfo(e.outputShape,n),i=this.texData.get(a.dataId);if(e.packedOutput&&(i.isPacked=!0),e.outPackingScheme===fA.DENSE){const t=bA(e.outputShape);i.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(i.usage=e.outTexUsage),0===ne(a.shape))return i.values=fe(a.dtype,0),a;const o=[],l=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&ne(t.shape)<=Pe().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}else if(!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),o.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!MA(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),o.push(t),n=this.texData.get(t.dataId),e.shape=s}return this.uploadToGPU(t.dataId),{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);const u={shape:a.shape,texData:i,isUniform:!1},c=function(e,t,n){let s="";t.concat(n).forEach((e=>{const t=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0,n=e.isUniform?"uniform":e.texData.texShape;s+=`${e.shape}_${n}_${t}`}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r,a}(e,l,u),h=this.getAndSaveBinary(c,(()=>function(e,t,n,s){const r=t.userCode,a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),i=a.map((e=>e.shapeInfo)),o={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=lR(a,o,r,t.packedInputs),u=e.createProgram(l);let c=null;const h=e.getUniformLocation(u,"NAN",!1);1===Pe().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(u,"INFINITY",!1));const p={};for(let n=0;n<t.variableNames.length;n++){const s=t.variableNames[n],r=!1;p[s]=e.getUniformLocation(u,s,r),p[`offset${s}`]=e.getUniformLocation(u,`offset${s}`,r)}return{program:t,source:l,webGLProgram:u,uniformLocations:p,inShapeInfos:i,outShapeInfo:o,infLoc:c,nanLoc:h}}(this.gpgpu,e,l,u))),p=null!=this.activeTimers;let d;if(p&&(d=this.startTimer()),function(e,t,n,s,r){wR(t.inShapeInfos,n),wR([t.outShapeInfo],[s]);const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a,i[0],i[1]):e.setOutputMatrixTexture(a,i[0],i[1]),e.setProgram(t.webGLProgram),1===Pe().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const r=t.program.variableNames[s],a=t.uniformLocations[r],i=t.uniformLocations[`offset${r}`];if(null!=a)if(n.isUniform)if(ne(n.shape)<2)e.gl.uniform1f(a,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture,a,s)})),null!=r&&r(e,t.webGLProgram),e.executeProgram()}(this.gpgpu,h,l,u,s),o.forEach((e=>this.disposeIntermediateTensorInfo(e))),p&&(d=this.endTimer(d),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(d)})),!Pe().getBool("WEBGL_LAZILY_UNPACK")&&i.isPacked&&!1===r){const e=this.unpackTensor(a);return this.disposeIntermediateTensorInfo(a),e}return a}compileAndRun(e,t,n,s,r=!1){n=n||t[0].dtype;const a=this.runWebGLProgram(e,t,n,s,r);return eo().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(Pe().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=so((()=>{if(!Pe().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Pe().getBool("DEBUG");Pe().set("DEBUG",!1);const t=this.abs(Ro(1e-8)).dataSync()[0];if(Pe().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=or());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=Pe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?K(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=de(e);e=t.newShape}let s=ne(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=DA(e);let n=2,r=2;return e.length&&([n,r]=FA(e)),s=t*(n/2)*(r/2),oe(s).map((e=>2*e))}return oe(s)}(n,o),t.texShape=c),null!=r){const e=_A(n);let a,i=c[1],h=c[0];const p=r instanceof Uint8Array;o?([i,h]=xA(c[0],c[1]),a=new QA(e,[h,i],p)):a=new ZA(e,[h,i],p);const d=this.makeTensorInfo([h,i],s);this.texData.get(d.dataId).usage=p?mA.PIXELS:mA.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(d.dataId),i,h,r);const f=!0,m=this.runWebGLProgram(a,[d],s,null,f),g=this.texData.get(m.dataId);t.texture=g.texture,t.texShape=g.texShape,t.isPacked=g.isPacked,t.usage=g.usage,this.disposeIntermediateTensorInfo(d),this.texData.delete(m.dataId),t.values=null,l&&(this.uploadWaitMs+=or()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*we(t)}}Mr()&&fo("webgl",(()=>new hD),2);class pD{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Vo(t,n),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class dD{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Vo(t,n);const r=this.outputShape.length;let a="";if(s)if(0===r||1===ne(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${yR(r)} coords = getOutputCoords();\n        `,1===r)a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=JR("coords",r);a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function fD(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const mD={kernelName:tn,backendName:"webgl",kernelFunc:fD};function gD(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=fD({inputs:{x:s},backend:n});n.texData.get(o.dataId).complexParentRefCount++;const l=fD({inputs:{x:r},backend:n});return n.texData.get(l.dataId).complexParentRefCount++,i.complexTensorInfos={real:o,imag:l},a}const yD={kernelName:mt,backendName:"webgl",kernelFunc:gD},bD="return (a < 0.) ? b * a : a;",xD="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",wD={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",ar(a,"float32")),o=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new dD(xD,r.shape,i.shape):new pD(bD,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],r.dtype);return n.disposeIntermediateTensorInfo(i),l}},kD="return (a < 0.) ? b * a : a;",vD="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",ID={kernelName:Hn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new dD(vD,s.shape,r.shape):new pD(kD,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}};function ND({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=Pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new oD(i.shape,t):new rD(i.shape,e),o.runWebGLProgram(u,[i],l)}}function SD({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new pD(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],Ir(n.dtype,s.dtype))})),a=gD({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||Ir(l.dtype,u.dtype);if(c.shouldExecuteOnCPU([l,u])&&null!=r){const e=c.texData.get(l.dataId),t=c.texData.get(u.dataId),[n,s]=r(l.shape,u.shape,e.values,t.values,h),a=c.makeTensorInfo(s,h);return c.texData.get(a.dataId).values=n,a}let p;return p=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new dD(t,l.shape,u.shape,n):new pD(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function CD(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?vD:kD;if("leakyrelu"===e)return t?xD:bD;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class $D{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class TD{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Vo(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const ED="return a * b;";function AD(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Ir(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new TD("return areal * breal - aimag * bimag;",s.shape,r.shape),i=new TD("return areal * bimag + aimag * breal;",s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=gD({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=LR(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new dD(ED,s.shape,r.shape):new pD(ED,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const RD={kernelName:Fn,backendName:"webgl",kernelFunc:AD};function DD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=ne(r.shape),l=he(a,o),u=ne(l);Z(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||MA(r.shape,l)||null!==c.texture&&MA(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[DA(e.shape),...FA(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[DA(t),...FA(t)],i=new QR(a,s),o=n.runWebGLProgram(i,[r],e.dtype,null,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}(r,l,i)}const FD={kernelName:Jn,backendName:"webgl",kernelFunc:DD};class _D{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${ae(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class OD{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function MD(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=Kp(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new _D({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new _D({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new OD({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class LD{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=yR(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class zD{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=yR(this.rank),r=YR("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function PD(e,t,n){const s=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new zD(e.shape,t):new LD(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function BD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=pe(r,e.shape);let o=i;const l=zu(o,a),u=null!=l;let c=e;u&&(c=PD(e,l,s),o=Bu(o.length,a)),Lu("sum",o,a);const[h,p]=Ou(c.shape,o);let d=h;n&&(d=Mu(h,i));const f=ne(p),m=DD({inputs:{x:c},attrs:{shape:[ne(e.shape)/f,f]},backend:s}),g=MD(m,Nr(e.dtype),"sum",s),y=DD({inputs:{x:g},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(r,a,i,n)}const WD={kernelName:gs,backendName:"webgl",kernelFunc:BD};function VD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=KR(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype),i.texData.get(u.dataId).values=t}else u=PD(r,a,i);return u}const UD={kernelName:Es,backendName:"webgl",kernelFunc:VD};function GD({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=ne(m),b=ne(g);Z(u>=2&&c>=2&&(y===b||1===y||1===b),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`));const x=(y>b?e.shape.slice(0,-2):t.shape.slice(0,-2)).concat([d,f]);Z(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,h,d]:[y,d,h],k=s?[b,f,p]:[b,p,f],v=DD({inputs:{x:e},backend:r,attrs:{shape:w}}),I=DD({inputs:{x:t},backend:r,attrs:{shape:k}}),N=[v,I],S=Math.max(y,b),C=n?v.shape[1]:v.shape[2],$=null!=a,T=null!=i,E="leakyrelu"===l,A=null!=l?CD(l,!0):null;let R;if((1===d||1===f)&&C>1e3&&!1===($||T||E||null!=A)){let e=v,t=I;n&&(e=VD({inputs:{x:v},backend:r,attrs:{perm:[0,2,1]}}),N.push(e)),s&&(t=VD({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),N.push(t));const a=1===f;let i=e;1!==f&&(i=DD({inputs:{x:e},backend:r,attrs:{shape:[S,C,1]}}),N.push(i));const o=1===f?2:1;let l=t;a&&(l=DD({inputs:{x:t},backend:r,attrs:{shape:[S,1,C]}}),N.push(l));const u=AD({inputs:{a:i,b:l},backend:r});R=BD({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),N.push(u)}else{const l=Ir(e.dtype,t.dtype),u=new $D(w,k,[S,d,f],n,s,$,A,T,E),c=[v,I];if(null!=a&&c.push(a),T&&c.push(i),E){const e=r.makeTensorInfo([],"float32",ar(o,"float32"));c.push(e),N.push(e)}R=r.runWebGLProgram(u,c,l)}const D=DD({inputs:{x:R},backend:r,attrs:{shape:x}});N.push(R);for(const e of N)r.disposeIntermediateTensorInfo(e);return D}const HD={kernelName:Ls,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return GD({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},jD="return abs(x);",qD={kernelName:Ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=VR(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=Pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new oD(s.shape,jD):new rD(s.shape,jD),n.runWebGLProgram(r,[s],s.dtype)}},KD=ND({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),XD={kernelName:He,backendName:"webgl",kernelFunc:KD},YD=ND({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),JD={kernelName:je,backendName:"webgl",kernelFunc:YD},ZD="return a + b;",QD=SD({opSnippet:ZD,packedOpSnippet:ZD,supportsComplex:!0,cpuKernelImpl:kR}),eF={kernelName:qe,backendName:"webgl",kernelFunc:QD};class tF{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class nF{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const sF={kernelName:Ke,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return fD({inputs:{x:r[0]},backend:s});if(r.length>Pe().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>Ir(e,t))),i=r.map((e=>e.shape)),o=Pe().getBool("WEBGL_PACK")?new nF(r[0].shape,i):new tF(r[0].shape,i);return s.runWebGLProgram(o,r,a)}},rF={kernelName:Xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=pe(a,r.shape);let u=l;const c=zu(u,o);let h=r;null!=c&&(h=VD({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Bu(u.length,o)),Lu("all",u,o);const[p,d]=Ou(h.shape,u),f=DD({inputs:{x:h},backend:n,attrs:{shape:[-1,ne(d)]}}),m=MD(f,f.dtype,"all",n);let g;return g=DD(i?{inputs:{x:m},backend:n,attrs:{shape:Mu(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},aF={kernelName:Ye,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=pe(a,r.shape);let u=l;const c=zu(u,o);let h=r;null!=c&&(h=VD({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Bu(u.length,o)),Lu("any",u,o);const[p,d]=Ou(h.shape,u),f=DD({inputs:{x:h},backend:n,attrs:{shape:[-1,ne(d)]}}),m=MD(f,f.dtype,"any",n);let g;return g=DD(i?{inputs:{x:m},backend:n,attrs:{shape:Mu(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class iF{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class oF{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Z(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=yR(o),u=JR("coords",o);let c,h;if(1===a){h=o+1;const e=yR(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=JR("sourceLocR",h-1).concat("inIdx.r"),g=JR("sourceLocG",h-1).concat("inIdx.g"),y=JR("sourceLocB",h-1).concat("inIdx.b"),b=JR("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function lF(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=Kp(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new iF(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=lF(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function uF(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=Kp(r[r.length-1]),i=new oF(r,a,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=uF(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function cF(e,t,n,s){const r=[n];if(Lu("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!Pe().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],[a,i]=Ou(t.shape,r),o=ne(i),l=DD({inputs:{x:t},backend:e,attrs:{shape:[-1,o]}});n.push(l);const u=lF(e,l,s);n.push(u);const c=DD({inputs:{x:u},backend:e,attrs:{shape:a}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),c}return uF(e,t,s)}const hF={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=pe(a,r.shape);const o=zu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=VD({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Bu(i.length,l.shape.length)),Lu("argMax",[i[0]],l.shape.length);const c=cF(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},pF={kernelName:Ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=pe(a,r.shape);const o=zu(i,r.shape.length);let l=r;const u=[];null!=o&&(l=VD({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Bu(i.length,l.shape.length)),Lu("argMin",[i[0]],l.shape.length);const c=cF(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},dF=ND({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),fF={kernelName:Qe,backendName:"webgl",kernelFunc:dF},mF=ND({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),gF={kernelName:et,backendName:"webgl",kernelFunc:mF},yF=ND({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),bF={kernelName:tt,backendName:"webgl",kernelFunc:yF},xF=SD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),wF={kernelName:st,backendName:"webgl",kernelFunc:xF},kF=ND({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),vF={kernelName:nt,backendName:"webgl",kernelFunc:kF};class IF{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(a/4),w=a%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class NF{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(a/4),v=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const SF={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;VA(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(yl(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ol(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&re(u.inShape,u.outShape))return fD({inputs:{x:r},backend:n});const c=new IF(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}},CF={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=ll(r.shape,a,i,[1,1,1],o,l,u),h=new NF(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class $F{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class TF{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const EF={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=ll(i.shape,o,l,[1,1,1],u,c),p=new TF(h);return n.runWebGLProgram(p,[r],i.dtype)}},AF={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;VA([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=ol(i.shape,o,l,1,u),h=new $F(c);return n.runWebGLProgram(h,[r],i.dtype)}},RF={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return GD({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class DF{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Vo(e,t),Vo(e,n);let i="0.0";null!=s&&(Vo(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Vo(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class FF{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Vo(e,t),Vo(e,n);let i="vec4(0.0)";null!=s&&(Vo(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Vo(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const _F={kernelName:Yt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;Z(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Z(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Z(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=Pe().getBool("WEBGL_PACK_NORMALIZATION")?new FF(s.shape,r.shape,a.shape,c,h,l):new DF(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class OF{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=yR(this.rank),n=`uniform int start[${this.rank}];`,s=function(e){if(1===e)return"sourceLoc";if(e<=6)return MF.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${MF[t]} = start[${t}] + coords.${MF[t]};`)).join("\n")}\n      `,this.userCode=`\n      ${n}\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}const MF=["x","y","z","w","u","v"];class LF{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length;const t=yR(this.rank),n=JR("coords",this.rank),s=JR("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      uniform int start[${this.rank}];\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}getCustomSetupFunc(e){if(e.length!==this.rank)throw Error(`The rank (${this.rank}) of the program must match the length of start (${e.length})`);return(t,n)=>{null==this.startLoc&&(this.startLoc=t.getUniformLocationNoThrow(n,"start"),null==this.startLoc)||t.gl.uniform1iv(this.startLoc,e)}}}function zF(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=Di(r,a,i);if(bi(r,o,l),0===ne(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=UR(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=Ai(r.shape,o,l);if(u||!c){const e=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new LF(l):new OF(l),t=e.getCustomSetupFunc(o);return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.complexParentRefCount=0,i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=Ri(t,Te(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const PF={kernelName:us,backendName:"webgl",kernelFunc:zF},BF={kernelName:ut,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Z(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=Yp(r.shape,a,o),u=Jp(l.length,a.length),c=Zp(r.shape,a,o),h=Qp(i,a.length),p=ed(c,i,a.length),d=[],f=DD({inputs:{x:r},backend:n,attrs:{shape:l}}),m=VD({inputs:{x:f},backend:n,attrs:{perm:u}}),g=DD({inputs:{x:m},backend:n,attrs:{shape:c}}),y=zF({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},WF={kernelName:ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=vR(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}},VF=SD({opSnippet:"return float(a != b);",dtype:"bool"}),UF={kernelName:On,backendName:"webgl",kernelFunc:VF};function GF(e){const{inputs:t,backend:n}=e,{input:s}=t;return fD({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const HF={kernelName:Kn,backendName:"webgl",kernelFunc:GF},jF={kernelName:pt,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return fD({inputs:{x:a},backend:s});const t=rc(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=gD({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=GF({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!be(a.dtype,i)){const e=fD({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new rD(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",fe("bool",1)),t=VF({inputs:{a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},qF="return ceil(x);",KF=ND({opSnippet:qF,packedOpSnippet:qF,cpuKernelImpl:NR}),XF={kernelName:dt,backendName:"webgl",kernelFunc:KF};class YF{constructor(e){this.variableNames=["A"],this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}class JF{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}getCustomSetupFunc(e,t){return(n,s)=>{null==this.minLoc&&(this.minLoc=n.getUniformLocationNoThrow(s,"minVal"),this.maxLoc=n.getUniformLocationNoThrow(s,"maxVal")),n.gl.uniform1f(this.minLoc,e),n.gl.uniform1f(this.maxLoc,t)}}}const ZF={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=Pe().getBool("WEBGL_PACK_CLIP")?new JF(r.shape):new YF(r.shape);const l=o.getCustomSetupFunc(a,i);return n.runWebGLProgram(o,[r],r.dtype,l)}};class QF{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function e_(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const t_={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new QF(s.shape),i=[e_(s,r.complexTensorInfos.real),e_(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class n_{constructor(e){this.outputShape=[],this.outputShape=jp(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class s_{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=jp(e,t);const n=this.outputShape,s=n.length,r=yR(s),a=JR("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${r_(i,l,t)}),\n            vec2(${r_(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${r_(i,l,d)}),\n          vec2(${r_(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function r_(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function a_(e){const{inputs:t,backend:n}=e,{input:s}=t;return fD({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const i_={kernelName:sn,backendName:"webgl",kernelFunc:a_};function o_(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>GF({inputs:{input:e},backend:n}))),r=e.map((e=>a_({inputs:{input:e},backend:n}))),a=o_(s,t,n),i=o_(r,t,n),o=gD({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}if("string"===s){const{tensors2D:r,outShape:a}=l_(e,t,n),i=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),o=1===r[0].shape[0],l=SR(i,a,s,o),u=jp(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>Pe().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),r=o_(e.slice(0,s),t,n),a=o_(e.slice(s),t,n),i=o_([r,a],t,n);return n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}if(Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const r=new s_(e.map((e=>e.shape)),t);return n.runWebGLProgram(r,e,s)}const{tensors2D:r,outShape:a}=l_(e,t,n),i=new n_(r.map((e=>e.shape))),o=n.runWebGLProgram(i,r,s);r.forEach((e=>n.disposeIntermediateTensorInfo(e)));const l=DD({inputs:{x:o},attrs:{shape:a},backend:n});return n.disposeIntermediateTensorInfo(o),l}function l_(e,t,n){const s=jp(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>DD({inputs:{x:e},attrs:{shape:[-1,ne(e.shape.slice(t))]},backend:n}))),outShape:s}}function u_(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=pe(r,t[0].shape)[0],i=jp(t.map((e=>e.shape)),a);if(0===ne(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>ne(e.shape)>0));return 1===o.length?fD({inputs:{x:o[0]},backend:n}):(Hp(o.map((e=>e.shape)),a),o_(o,a,n))}const c_={kernelName:yt,backendName:"webgl",kernelFunc:u_};class h_{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class p_{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class d_{constructor(e,t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;const{filterWidth:s,inChannels:r,strideWidth:a,strideHeight:i,padInfo:o,outWidth:l,dilationWidth:u,dilationHeight:c,dataFormat:h}=n,{left:p,top:d}=o,f=r*s,m=GA(),g="channelsLast"===h,y=g?0:1,b=g?1:2;let x="";for(let n=0;n<=1;n++)for(let s=0;s<=1;s++)x+=`\n          blockIndex = rc.y + ${s};\n          pos = rc.x + ${n};\n\n          if(blockIndex < ${e[1]} && pos < ${e[0]}) {\n            offsetY = int(blockIndex / (${l})) * ${i} - ${d};\n            d0 = offsetY + ${c} * (pos / ${f});\n\n            if(d0 < ${t[y]} && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), ${l}.) * ${a}. - ${p}.);\n              d1 = offsetX + ${u} * (int(mod(float(pos), ${f}.) / ${r}.));\n\n              if(d1 < ${t[b]} && d1 >= 0) {\n\n                ch = int(mod(float(pos), ${r}.));\n\n                if (${g}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*n+s}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*n+s}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${x}\n\n        ${m.output} = result;\n      }\n    `}}function f_({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[],g=(1===h||1===p)&&c>1e3,y=l[2]%2!=0&&!!u.isPacked;if(!g&&Pe().getBool("WEBGL_LAZILY_UNPACK")&&Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&y){const c=d?l[0]*l[1]*(l[2]+1):l[0]*l[2]*(l[3]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,Z(MA(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const g=DD({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(g);const y=GD({a:h,b:g,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),b=s.texData.get(y.dataId);Z(b.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=p,b.shape=n.outShape,f=fD({inputs:{x:y},backend:s}),f.shape=n.outShape,m.push(y)}else{const u=DD({inputs:{x:e},backend:s,attrs:{shape:[1,d?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=DD({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=GD({a:u,b:c,transposeA:!1,transposeB:!1,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});f=DD({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function m_({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=p*h,y=[m,g],b=[],x=DD({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=DD({inputs:{x:t},backend:s,attrs:{shape:[1,m,ne(t.shape)/m]}});b.push(x),b.push(w);const k=new d_(y,x.shape,n),v=s.runWebGLProgram(k,[x],"float32"),I=DD({inputs:{x:v},backend:s,attrs:{shape:[1,y[0],y[1]]}});b.push(v),b.push(I);const N=null!=r,S=null!=a,C="leakyrelu"===o,$=o?CD(o,!0):null,T=new $D(I.shape,w.shape,[1,g,n.outChannels],!0,!1,N,$,S,C),E=[I,w];if(r&&E.push(r),S&&E.push(a),C){const e=s.makeTensorInfo([],"float32",ar(i,"float32"));E.push(e),b.push(e)}const A=s.runWebGLProgram(T,E,"float32"),R=DD({inputs:{x:A},backend:s,attrs:{shape:f?[1,p,h,n.outChannels]:[1,n.outChannels,p,h]}});b.push(A);for(const e of b)s.disposeIntermediateTensorInfo(e);return R}const g_={kernelName:bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=bl(l),p=ul(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(Pe().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])d=m_({x:r,filter:a,convInfo:p,backend:n});else{const e=new h_(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=f_({x:r,filter:a,convInfo:p,backend:n});const f=DD({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class y_{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${a}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class b_{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class x_{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class w_{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const k_={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=bl(l),p=ul(r.shape,c,i,1,o,u,!1,h),d=new y_(p);return n.runWebGLProgram(d,[r,a],"float32")}},v_={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=bl(u),p=ul(i,a.shape,o,1,l,c,!1,h),d=new b_(p);return n.runWebGLProgram(d,[r,a],"float32")}},I_={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=cl(r.shape,a.shape,i,l,o),c=new p_(u);return n.runWebGLProgram(c,[r,a],"float32")}},N_={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=cl(r.shape,l,i,1,o),c=new x_(u);return n.runWebGLProgram(c,[r,a],"float32")}},S_={kernelName:It,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=cl(l,a.shape,o,1,i),c=new w_(u);return n.runWebGLProgram(c,[r,a],"float32")}},C_=ND({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),$_={kernelName:Nt,backendName:"webgl",kernelFunc:C_},T_=ND({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),E_={kernelName:St,backendName:"webgl",kernelFunc:T_};class A_{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const R_={kernelName:$t,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new A_(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};class D_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=e;const s=e.length,r=t?"0.0":`getX(${F_(s,"coords")})`,a=e[e.length-1];let i="",o="";t?(i=n?"end != "+(a-1):"end != 0",o=n?"end + 1":"end - 1"):(i=n?`end + pow2 < ${a}`:"end >= pow2",o=n?"end + pow2":"end - pow2"),this.userCode=`\n      uniform float index;\n      void main() {\n        ${yR(s)} coords = getOutputCoords();\n        int end = ${__(s,"coords")};\n        float val = ${r};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${o};\n          ${__(s,"coords")} = idx;\n          val += getX(${F_(s,"coords")});\n        }\n        setOutput(val);\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.index&&(this.index=t.getUniformLocation(n,"index")),t.gl.uniform1f(this.index,e)}}}function F_(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function __(e,t){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const O_={kernelName:Ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s,l=r.shape.length,u=zu([a],l);let c=r;null!=u&&(c=VD({inputs:{x:r},backend:n,attrs:{perm:u}}));const h=Bu(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${a}`);const p=c.shape[h];let d=fD({inputs:{x:c},backend:n});for(let e=0;e<=Math.ceil(Math.log2(p))-1;e++){const t=new D_(c.shape,!1,o),s=t.getCustomSetupFunc(e),r=d;d=n.runWebGLProgram(t,[d],d.dtype,s),n.disposeIntermediateTensorInfo(r)}if(i){const e=new D_(c.shape,i,o),t=d;d=n.runWebGLProgram(e,[d],d.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=u){const e=VD({inputs:{x:d},backend:n,attrs:{perm:Pu(u)}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),e}return d}},M_={kernelName:Tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=vR(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=IR(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class L_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const z_={kernelName:Et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;Z(a>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${a}`));const o=r.shape[0],l="NHWC"===i?r.shape[1]:r.shape[2],u="NHWC"===i?r.shape[2]:r.shape[3],c="NHWC"===i?r.shape[3]:r.shape[1],h=l*a,p=u*a,d=c/(a*a),f=new L_("NHWC"===i?[o,h,p,d]:[o,d,h,p],a,i);return n.runWebGLProgram(f,[r],r.dtype)}};class P_{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=e.outChannels/e.inChannels;let g="",y="";n&&(g=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,y="result = activation(result);");const b=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${g}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${m};\n        int q = d2 - d1 * ${m};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${h};\n\n          if (xR < 0 || xR >= ${a}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${p};\n\n            if (xC < 0 || xC >= ${i}) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${b}\n        ${y}\n        setOutput(result);\n      }\n    `}}class B_{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.outShape;const a=e.inHeight,i=e.inWidth,o=e.padInfo.top,l=e.padInfo.left,u=e.strideHeight,c=e.strideWidth,h=e.dilationHeight,p=e.dilationWidth,d=e.filterHeight,f=e.filterWidth,m=f;let g="int xR; int xC; int xCOffset;";for(let e=0;e<d;e++)for(let t=0;t<f;t++)g+=`\n          vec4 xTexelR${e}C${2*t} = vec4(0.);\n          vec4 wR${e}C${t} = vec4(0.);\n          vec4 xR${e}C${t} = vec4(0.);`;for(let e=0;e<d;e++)for(let t=0;t<m;t++){const n=2*t;if(g+=`\n          xR = xRCorner + ${e*h};\n          xC = xCCorner + ${n*p};\n        `,1===c){if(n<f&&(g+=l%2==1?`\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    xTexelR${e}C${n}.zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < ${a} && xCOffset >= 0 && xCOffset < ${i}) {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= ${i}) {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR${e}C${n} = vec4(previous.zw, xTexelR${e}C${n}.xy);\n                } else {\n                  xR${e}C${n} = vec4(0, 0, xTexelR${e}C${n}.xy);\n                }\n              `:`\n                if(xR >= 0 && xR < ${a} && xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xR${e}C${n} = xTexelR${e}C${n};\n              `,n+1<f)){const t=l%2==0?K(p):p;p%2==0&&l%2==1||p%2!=0&&l%2!=1?(g+=`\n                  xCOffset = xC + ${l%2} + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n                `,p>1&&(g+=`\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < ${a} &&\n                      xCOffset >= 0 && xCOffset < ${i}) {\n                      xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR${e}C${n} = vec4(0.);\n                    }\n                  `),g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.xy);\n                `):g+=`\n                  xCOffset = xC + ${t};\n\n                  if(xR >= 0 && xR < ${a} &&\n                    xCOffset >= 0 && xCOffset < ${i}) {\n                    xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR${e}C${n+1} = xTexelR${e}C${n+2};\n                `}}else n<f&&(g+=`\n              if(xR >= 0 && xR < ${a}) {\n            `,l%2==1?(g+=`\n                xCOffset = xC + 1 - ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n              `,n+1<f&&(g+=`\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + ${c};\n                  if(xCOffset >= 0 && xCOffset < ${i}) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR${e}C${n+1} = vec4(xTexelR${e}C${n+2}.xy, final.xy);\n                `)):(g+=`\n                if(xC >= 0 && xC < ${i}) {\n                  xTexelR${e}C${n} = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR${e}C${n} = vec4(0.);\n                }\n\n                xCOffset = xC + ${c};\n                if(xCOffset >= 0 && xCOffset < ${i}) {\n                  xTexelR${e}C${n+2} = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR${e}C${n+2} = vec4(0.);\n                }\n\n                xR${e}C${n} = vec4(\n                  xTexelR${e}C${n}.xy, xTexelR${e}C${n+2}.xy);\n              `,n+1<f&&(g+=`\n                  xR${e}C${n+1} = vec4(\n                    xTexelR${e}C${n}.zw, xTexelR${e}C${n+2}.zw);\n                `)),g+="}");n<f&&(g+=`\n            vec4 wTexelR${e}C${n} = getW(${e}, ${n}, d1, q);\n            wR${e}C${n} = vec4(wTexelR${e}C${n}.xz, wTexelR${e}C${n}.xz);\n          `,n+1<f&&(g+=`\n              vec4 wTexelR${e}C${n+1} = getW(${e}, ${n+1}, d1, q);\n              wR${e}C${n+1} =\n                vec4(wTexelR${e}C${n+1}.xz, wTexelR${e}C${n+1}.xz);`))}for(let e=0;e<d;e++)for(let t=0;t<f;t++)g+=`dotProd += xR${e}C${t} * wR${e}C${t};`;let y="",b="";n&&(y=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const x=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${y}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${o}, ${l});\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        ${g}\n\n        vec4 result = dotProd;\n        ${x}\n        ${b}\n        setOutput(result);\n      }\n    `}}const W_={kernelName:At,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),Z(yl(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=ul(r.shape,a.shape,i,c,o,u,!0);let p;return p=Pe().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new B_(h):new P_(h),n.runWebGLProgram(p,[r,a],"float32")}};class V_{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class U_{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const G_={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=ul(r.shape,c,i,o,l,u,!0),p=new V_(h);return n.runWebGLProgram(p,[r,a],"float32")}},H_={kernelName:Dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=ul(c,a.shape,i,o,l,u,!0),p=new U_(h);return n.runWebGLProgram(p,[r,a],"float32")}};class j_{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const q_={kernelName:Ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=ne(s.shape),i=DD({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new j_(a),l=n.runWebGLProgram(o,[i],i.dtype),u=DD({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class K_{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const X_={kernelName:_t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=il(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new K_(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=DD({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}},Y_=ND({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),J_={kernelName:zt,backendName:"webgl",kernelFunc:Y_},Z_={kernelName:Pt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=Pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new dD("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new pD("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},Q_=SD({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool"}),eO={kernelName:Wt,backendName:"webgl",kernelFunc:Q_},tO=ND({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${sd};\n  float a1 = ${rd};\n  float a2 = ${ad};\n  float a3 = ${id};\n  float a4 = ${od};\n  float a5 = ${ld};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),nO={kernelName:Bt,backendName:"webgl",kernelFunc:tO},sO="return exp(x);",rO=ND({opSnippet:sO,packedOpSnippet:sO,cpuKernelImpl:CR}),aO={kernelName:Vt,backendName:"webgl",kernelFunc:rO};function iO(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(Z(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),DD({inputs:{x:a},backend:s,attrs:{shape:o}})}const oO={kernelName:Ut,backendName:"webgl",kernelFunc:iO},lO="return exp(x) - 1.0;",uO=ND({opSnippet:lO,packedOpSnippet:lO,cpuKernelImpl:$R}),cO={kernelName:Gt,backendName:"webgl",kernelFunc:uO};class hO{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function pO(e,t,n){const s=n.texData.get(e.dataId),r=ne(e.shape),a=e.shape[e.shape.length-1],i=DD({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new hO("real",o,t),u=new hO("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=gD({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=DD({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const dO={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return pO(s,!1,n)}};class fO{constructor(e,t){this.outputShape=[],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}getCustomSetupFunc(e){return(t,n)=>{null==this.valueLoc&&(this.valueLoc=t.getUniformLocationNoThrow(n,"value")),t.gl.uniform1f(this.valueLoc,e)}}}function mO(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||Se(r),"string"===a){const e=me(a,ne(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new fO(s,r),n=e.getCustomSetupFunc(r);return t.runWebGLProgram(e,[],a,n)}}const gO={kernelName:jt,backendName:"webgl",kernelFunc:mO};class yO{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const bO={kernelName:qt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new yO(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},xO="return floor(x);",wO=ND({opSnippet:xO,packedOpSnippet:xO,cpuKernelImpl:TR}),kO={kernelName:Kt,backendName:"webgl",kernelFunc:wO},vO=SD({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),IO={kernelName:Xt,backendName:"webgl",kernelFunc:vO};class NO{constructor(e){this.variableNames=["A"];const t=GA(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class SO{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=GA(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const CO={kernelName:Os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,l="undefined"!=typeof ImageBitmap&&r instanceof ImageBitmap,[u,c]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],h=[c,u],p=[c,u,a];(o||i||l)&&(null==$O&&($O=document.createElement("canvas").getContext("2d")),$O.canvas.width=u,$O.canvas.height=c,$O.drawImage(r,0,0,u,c),r=$O.canvas);const d=n.makeTensorInfo(h,"int32");n.texData.get(d.dataId).usage=mA.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),r);const f=Pe().getBool("WEBGL_PACK")?new SO(p):new NO(p),m=n.runWebGLProgram(f,[d],"int32");return n.disposeData(d.dataId),m}};let $O;const TO={kernelName:zs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=bl(c),g=ul(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(Pe().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=m_({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?CD(d,!1):null,u=new h_(g,e,l,t,s),c=[r,a];if(i&&c.push(i),o&&c.push(o),s){const e=n.makeTensorInfo([],"float32",ar(f,"float32"));c.push(e),b.push(e)}y=n.runWebGLProgram(u,c,"float32")}else y=f_({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=DD({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},EO={kernelName:Ps,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=s,f=[];let m=c;null==m&&(m=[1,1]),Z(yl(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=ul(r.shape,a.shape,l,m,u,h,!0),y=Pe().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?CD(p,y):null,x=[r,a],w=null!=i,k=null!=o,v="leakyrelu"===p;if(w&&x.push(i),k&&x.push(o),v){const e=n.makeTensorInfo([],"float32",ar(d,"float32"));x.push(e),f.push(e)}let I;I=y?new B_(g,w,b,k,v):new P_(g,w,b,k,v);const N=n.runWebGLProgram(I,x,"float32");return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};class AO{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=yR(t.length),r=yR(n.length),a=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${a};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const RO={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],[o,l,u,c]=fi(s,r),h=DD({inputs:{x:r},backend:n,attrs:{shape:[l,i]}}),p=DD({inputs:{x:s},backend:n,attrs:{shape:[ne(s.shape)/u,u]}}),d=new AO(i,c,[l,u]),f=n.runWebGLProgram(d,[p,h],p.dtype),m=DD({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};class DO{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=yR(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("int(getIndices(resRC.x, resRC.z))"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        setOutput(getA(${s}));\n      }\n    `}}const FO={kernelName:Jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=vd(r,a,pe(i,r.shape)[0],o),u=ne(a.shape),c=[],h=DD({inputs:{x:r},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),p=DD({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});c.push(h),c.push(p);const d=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(p),t=n.bufferSync(h),s=ER(t,e,d);return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(l.outputShape,s.dtype,s.values)}const f=new DO(h.shape,d),m=n.runWebGLProgram(f,[h,p],h.dtype);c.push(m);const g=DD({inputs:{x:m},backend:n,attrs:{shape:l.outputShape}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},_O=SD({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:AR,dtype:"bool"}),OO={kernelName:Qt,backendName:"webgl",kernelFunc:_O},MO=SD({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool"}),LO={kernelName:en,backendName:"webgl",kernelFunc:MO},zO={kernelName:nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return pO(s,!0,n)}},PO=ND({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),BO={kernelName:rn,backendName:"webgl",kernelFunc:PO},WO=ND({opSnippet:"return float(isinf(x));",dtype:"bool"}),VO={kernelName:an,backendName:"webgl",kernelFunc:WO},UO=ND({opSnippet:"return float(isnan(x));",dtype:"bool"}),GO={kernelName:on,backendName:"webgl",kernelFunc:UO},HO=SD({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:RR,dtype:"bool"}),jO={kernelName:un,backendName:"webgl",kernelFunc:HO},qO=SD({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",dtype:"bool"}),KO={kernelName:cn,backendName:"webgl",kernelFunc:qO},XO={kernelName:hn,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=DR(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},YO=ND({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:FR}),JO={kernelName:pn,backendName:"webgl",kernelFunc:YO},ZO=ND({opSnippet:"return log(1.0 + x);"}),QO={kernelName:dn,backendName:"webgl",kernelFunc:ZO},eM=SD({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),tM={kernelName:fn,backendName:"webgl",kernelFunc:eM},nM=ND({opSnippet:"return float(!(x >= 1.0));"}),sM={kernelName:mn,backendName:"webgl",kernelFunc:nM},rM=SD({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),aM={kernelName:gn,backendName:"webgl",kernelFunc:rM};class iM{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class oM{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const lM={kernelName:bn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=Pe().getBool("WEBGL_PACK_NORMALIZATION")?new oM(r.shape,a,i,o,l):new iM(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class uM{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const cM={kernelName:xn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new uM(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function hM(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=pe(a,r.shape);let u=l;const c=zu(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=KR(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype),n.texData.get(d.dataId).values=s}else d=PD(r,c,n);u=Bu(u.length,o)}Lu("max",u,o);const[f,m]=Ou(d.shape,u);let g,y=f;if(i&&(y=Mu(f,l)),p){const e=n.texData.get(d.dataId).values,t=_R(e,ne(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=ne(t),a=DD({inputs:{x:e},attrs:{shape:[ne(e.shape)/r,r]},backend:s}),i=MD(a,e.dtype,"max",s),o=DD({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const pM={kernelName:wn,backendName:"webgl",kernelFunc:hM},dM=SD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:OR}),fM={kernelName:kn,backendName:"webgl",kernelFunc:dM},mM={kernelName:vn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;VA(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Z(yl(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ol(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&re(u.inShape,u.outShape))return fD({inputs:{x:r},backend:n});const c=new IF(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}},gM={kernelName:Nn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=ll(r.shape,a,i,[1,1,1],o,u,l),h=new NF(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class yM{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bM{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xM={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=ll(i.shape,o,l,[1,1,1],u,c),p=new NF(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new bM(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}},wM={kernelName:In,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;VA([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=ol(o.shape,l,u,1,c,h),d=new IF(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new yM(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},kM={kernelName:Cn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Z(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];Z(yl(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=ol(s.shape,r,a,u,i),[h,p]=function(e,t,n,s){let r=new IF(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new IF(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[h,p]}},vM={kernelName:$n,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=pe(a,s.shape);let u=l;const c=zu(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=KR(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype),i.texData.get(f.dataId).values=n}else f=PD(s,c,i);d.push(f),u=Bu(u.length,o)}Lu("sum",u,o);const[m,g]=Ou(f.shape,u);let y=m;r&&(y=Mu(m,l));const b=function(e,t,n,s){const r=ne(t),a=DD({inputs:{x:e},attrs:{shape:[ne(e.shape)/r,r]},backend:s}),i=MD(a,"float32","mean",s),o=DD({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}},IM={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=pe(a,r.shape);let u=l;const c=zu(u,o);let h=r;null!=c&&(h=VD({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Bu(u.length,r.shape.length)),Lu("min",u,o);const[p,d]=Ou(h.shape,u),f=DD({inputs:{x:h},backend:n,attrs:{shape:[-1,ne(d)]}}),m=MD(f,f.dtype,"min",n);let g;return g=DD(i?{inputs:{x:m},backend:n,attrs:{shape:Mu(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},NM=SD({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:MR}),SM={kernelName:En,backendName:"webgl",kernelFunc:NM};class CM{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=yR(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class $M{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=yR(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=JR("rc",s),l=JR("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const TM={kernelName:An,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $M(s.shape,r,a):new CM(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},EM=SD({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),AM={kernelName:Rn,backendName:"webgl",kernelFunc:EM};class RM{constructor(e,t,n){this.variableNames=["probs"],this.outputShape=[e,n],this.userCode=`\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}getCustomSetupFunc(e){return(t,n)=>{null==this.seedLoc&&(this.seedLoc=t.getUniformLocation(n,"seed")),t.gl.uniform1f(this.seedLoc,e)}}}const DM=SD({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),FM={kernelName:Lt,backendName:"webgl",kernelFunc:DM},_M="return a - b;",OM=SD({opSnippet:_M,packedOpSnippet:_M,supportsComplex:!0,cpuKernelImpl:HR}),MM={kernelName:vs,backendName:"webgl",kernelFunc:OM};function LM(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=pe([a],r.shape),o=hM({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Mu(o.shape,i),u=DD({inputs:{x:o},backend:n,attrs:{shape:l}}),c=OM({inputs:{a:r,b:u},backend:n}),h=rO({inputs:{x:c},backend:n}),p=BD({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=DD({inputs:{x:p},backend:n,attrs:{shape:l}}),f=DM({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const zM={kernelName:xs,backendName:"webgl",kernelFunc:LM},PM={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:LM({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new RM(u,c,a),p=h.getCustomSetupFunc(i),d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},BM="return -x;",WM={kernelName:_n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=zR(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=Pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new oD(s.shape,BM):new rD(s.shape,BM),n.runWebGLProgram(r,[s],s.dtype)}},VM=hp,UM={kernelName:Mn,backendName:"webgl",kernelFunc:function(e){ud("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=VM(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},GM=pp,HM={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){ud("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=GM(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},jM=dp,qM={kernelName:zn,backendName:"webgl",kernelFunc:function(e){ud("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=jM(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class KM{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const XM={kernelName:Bn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{depth:a,onValue:i,offValue:o}=s,l=ne(r.shape),u=new KM(l,a,i,o),c=DD({inputs:{x:r},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],r.dtype);n.disposeIntermediateTensorInfo(c);const p=DD({inputs:{x:h},backend:n,attrs:{shape:[...r.shape,a]}});return n.disposeIntermediateTensorInfo(h),p}};function YM(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=GF({inputs:{input:s},backend:n}),t=YM({inputs:{x:e},backend:n}),r=a_({inputs:{input:s},backend:n}),a=YM({inputs:{x:r},backend:n}),i=gD({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return mO({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const JM={kernelName:Fs,backendName:"webgl",kernelFunc:YM},ZM={kernelName:Pn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=GF({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=a_({inputs:{input:r},backend:s}),i=YM({inputs:{x:a},backend:s}),o=gD({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return mO({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}},QM={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return iO({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Q(a,e.shape,"All tensors passed to stack must have matching shapes"),Z(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=u_({inputs:t.map((e=>{const t=iO({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class eL{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=yR(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(${n}));\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(${n}));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class tL{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=yR(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=JR("rc",s),l=JR("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(${n});\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const nL=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s,o=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new tL(r.shape,a,i):new eL(r.shape,a,i);return n.runWebGLProgram(o,[r],r.dtype)},sL={kernelName:Vn,backendName:"webgl",kernelFunc:nL},rL=SD({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),aL={kernelName:Gn,backendName:"webgl",kernelFunc:rL},iL={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=pe(a,r.shape);let c=u;const h=zu(c,o);let p,d=r;if(null!=h&&(d=VD({inputs:{x:r},backend:n,attrs:{perm:h}}),c=Bu(c.length,o),l.push(d)),Lu("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:r}=PR(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=Ou(d.shape,c),s=ne(t),a=DD({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=MD(a,Nr(r.dtype),"prod",n);p=DD({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=Mu(p.shape,u);p=DD({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},oL=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=BR(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},lL={kernelName:qn,backendName:"webgl",kernelFunc:oL},uL=ND({opSnippet:"return 1.0 / x;"}),cL={kernelName:Xn,backendName:"webgl",kernelFunc:uL},hL=ND({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),pL={kernelName:Yn,backendName:"webgl",kernelFunc:hL},dL=ND({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),fL={kernelName:ns,backendName:"webgl",kernelFunc:dL};class mL{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class gL{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const yL={kernelName:es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=Pe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new gL(r.shape,l,u,a,i):new mL(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class bL{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const xL={kernelName:ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new bL(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class wL{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}const kL={kernelName:Zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=new wL(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class vL{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const IL={kernelName:Qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new vL(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class NL{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=yR(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class SL{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=JR("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=yR(n);function o(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const CL={kernelName:ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=pe(a,r.shape);if(0===i)return fD({inputs:{x:r},backend:n});const l=Pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new SL(r.shape,o):new NL(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class $L{constructor(e,t,n,s){this.variableNames=["Image"],this.outputShape=[];const r=e[1],a=e[2],i=Math.sin(t).toFixed(3),o=Math.cos(t).toFixed(3);this.outputShape=e;const[l,u]=Xp(s,r,a),c=l.toFixed(3),h=u.toFixed(3);let p="";p="number"==typeof n?`float outputValue = ${n.toFixed(2)};`:`\n        vec3 fill = vec3(${n.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - ${c}) * ${o} - (float(y) - ${h}) * ${i};\n          float coordYFloat = (float(x) - ${c}) * ${i} + (float(y) - ${h}) * ${o};\n          int coordX = int(round(coordXFloat + ${c}));\n          int coordY = int(round(coordYFloat + ${h}));\n          ${p}\n          if(coordX >= 0 && coordX < ${a} && coordY >= 0 && coordY < ${r}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const TL={kernelName:Ms,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new $L(s.shape,r,a,i);return o.runWebGLProgram(l,[s],s.dtype)}},EL=ND({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),AL={kernelName:rs,backendName:"webgl",kernelFunc:EL},RL=ND({opSnippet:"return inversesqrt(x);",cpuKernelImpl:WR}),DL={kernelName:as,backendName:"webgl",kernelFunc:RL};class FL{constructor(e,t,n,s,r,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const o=yR(r.length),l=yR(a.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${r});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const _L={kernelName:is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=yi(0,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=DD({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=DD({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new FL(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=DD({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class OL{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=yR(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const ML={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new OL(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],Ir(r.dtype,a.dtype))}},LL=ND({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${td};\n  float scale = ${nd};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),zL={kernelName:ls,backendName:"webgl",kernelFunc:LL},PL=ND({opSnippet:"return 1.0 / (1.0 + exp(-1.0 * x));"}),BL={kernelName:ds,backendName:"webgl",kernelFunc:PL},WL=ND({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),VL={kernelName:ps,backendName:"webgl",kernelFunc:WL},UL=ND({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),GL={kernelName:cs,backendName:"webgl",kernelFunc:UL},HL=ND({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),jL={kernelName:hs,backendName:"webgl",kernelFunc:HL},qL=ND({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),KL={kernelName:fs,backendName:"webgl",kernelFunc:qL},XL={kernelName:ys,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Z(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=nL({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=Yp(c.shape,a,o,!1),p=Jp(h.length,a.length,!1),d=Zp(c.shape,a,o,!1),f=DD({inputs:{x:c},backend:n,attrs:{shape:h}}),m=VD({inputs:{x:f},backend:n,attrs:{perm:p}}),g=DD({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},YL={kernelName:Is,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=yi(0,r,o),p=new FL(u,l,r.shape.length,a.shape.length,c,[h,1],!1),d=n.runWebGLProgram(p,[a,r,i],a.dtype),f=DD({inputs:{x:d},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(d),f}},JL={kernelName:bs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=pe(i,r.shape)[0],l=xd(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=zF({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},ZL=ND({opSnippet:"return sqrt(x);"}),QL={kernelName:ms,backendName:"webgl",kernelFunc:ZL},ez=ND({opSnippet:"return x * x;"}),tz={kernelName:ks,backendName:"webgl",kernelFunc:ez},nz="return (a - b) * (a - b);",sz=SD({opSnippet:nz,packedOpSnippet:nz}),rz={kernelName:ws,backendName:"webgl",kernelFunc:sz},az={kernelName:_s,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new rD(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class iz{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=yR(n.length),a=yR(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const oz={kernelName:Ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{nonStrided:d,$begin:f,$strides:m,size:g,newShape:y,outShape:b}=Fi(r.shape,a,i,o,l,u,c,h,p),x=DD({inputs:{x:r},backend:n,attrs:{shape:y}});let w;if(d){const e=zF({inputs:{x},backend:n,attrs:{begin:f,size:g}});w=DD({inputs:{x:e},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(e)}else if(b.some((e=>0===e)))w=n.makeTensorInfo(b,r.dtype,[]);else if(n.shouldExecuteOnCPU([x])){const e=n.texData.get(x.dataId).values,t=Pa(x.shape,x.dtype,e),s=GR(b,t,m,f);w=n.makeTensorInfo(b,x.dtype,s.values)}else{const e=new iz(f,m,b);w=n.runWebGLProgram(e,[x],x.dtype)}const k=DD({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(w),k}},lz=ND({opSnippet:"return tan(x);"}),uz={kernelName:Ss,backendName:"webgl",kernelFunc:lz},cz=ND({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),hz={kernelName:Cs,backendName:"webgl",kernelFunc:cz};class pz{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=yR(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function dz(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype){const e=n.readSync(r.dataId).map((e=>cr(e))),t=Pa(r.shape,r.dtype,e),s=jR(t,a);return n.makeTensorInfo(s.shape,s.dtype,s.values)}const i=new pz(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const fz={kernelName:$s,backendName:"webgl",kernelFunc:dz},mz={kernelName:Ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=n.readSync(r.dataId),[l,u]=qR(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},gz={kernelName:As,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;VA(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=XR(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},yz={kernelName:Rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=zF({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=DD({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class bz{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const xz=[lM,cM,HD,qD,XD,JD,eF,sF,rF,aF,hF,pF,fF,gF,wF,bF,vF,CF,SF,EF,AF,RF,_F,BF,WF,jF,XF,ZF,t_,yD,c_,k_,v_,g_,N_,S_,I_,$_,E_,R_,O_,M_,z_,G_,H_,W_,q_,X_,J_,Z_,eO,nO,aO,oO,cO,dO,gO,bO,kO,IO,CO,TO,EO,RO,FO,OO,LO,mD,zO,i_,BO,VO,GO,wD,jO,KO,XO,QO,JO,tM,sM,aM,pM,gM,mM,xM,wM,kM,fM,vM,IM,SM,TM,AM,PM,RD,WM,UM,HM,qM,UF,XM,ZM,QM,sL,aL,ID,iL,lL,HF,FM,cL,fL,pL,FD,yL,xL,kL,IL,CL,TL,AL,DL,_L,ML,zL,BL,VL,GL,jL,PF,zM,KL,XL,YL,JL,QL,tz,rz,az,oz,MM,WD,uz,hz,fz,mz,UD,gz,yz,{kernelName:Ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=zu([u],o);let h=r;null!=c&&(h=VD({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=Bu(1,o)[0]);const p=kd(h.shape,u,i),d=ne([h.shape[u]]),f=DD({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=Nr(r.dtype),g=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=wd(o,a),c=new bz({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=oL({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=dz({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});return l.push(p),l.push(d),g(h,t,d,r,a)},y=DD({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){l.push(y);const e=Pu(c);b=VD({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},JM];for(const e of xz)Hs(e);const wz={"tfjs-core":Ki,"tfjs-backend-cpu":"2.8.6","tfjs-backend-webgl":"2.8.6","tfjs-data":ON,"tfjs-layers":Zy,"tfjs-converter":TI,tfjs:"2.8.6"}},377:(e,t,n)=>{var s=n(832),r=n(652),a=n(801),i=n(30),o=n(618),l=n(49),u=n(971);u.alea=s,u.xor128=r,u.xorwow=a,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},832:function(e,t,n){var s;!function(e,r,a){function i(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,r=n.next;return r.int32=function(){return 4294967296*n.next()|0},r.double=function(){return r()+11102230246251565e-32*(2097152*r()|0)},r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},49:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},652:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},618:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.X&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},30:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&(s.x&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var s;!function(e,r,a){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,r=function(){return(n.next()>>>0)/4294967296};return r.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},r.int32=n.next,r.quick=r,s&&("object"==typeof s&&o(s,n),r.state=function(){return o(n,{})}),r}r&&r.exports?r.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,r))||(r.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},971:(e,t,n)=>{var s;!function(r,a){var i,o=this,l=256,u=a.pow(l,6),c=a.pow(2,52),h=2*c,p=255;function d(e,t,n){var s=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(r)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(r)]}}():e,3),s),d=new f(s),x=function(){for(var e=d.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),r),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,d),e.state=function(){return m(d,{})}),n?(a.random=e,t):e})(x,p,"global"in t?t.global:this==a,t.state)}function f(e){var t,n=e.length,s=this,r=0,a=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);r<l;)i[r]=r++;for(r=0;r<l;r++)i[r]=i[a=p&a+e[r%n]+(t=i[r])],i[a]=t;(s.g=function(e){for(var t,n=0,r=s.i,a=s.j,i=s.S;e--;)t=i[r=p&r+1],n=n*l+i[p&(i[r]=i[a=p&a+t])+(i[a]=t)];return s.i=r,s.j=a,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(g(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function y(e,t){for(var n,s=e+"",r=0;r<s.length;)t[p&r]=p&(n^=19*t[p&r])+s.charCodeAt(r++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(a.seedrandom=d,y(a.random(),r),e.exports){e.exports=d;try{i=n(906)}catch(e){}}else void 0===(s=function(){return d}.call(t,n,t,e))||(e.exports=s)}([],Math)},416:(e,t,n)=>{const s=n(563),{FREAKPOINTS:r}=n(793),a=(r.length-1)*r.length/2;e.exports={Detector:class{constructor(e,t){this.width=e,this.height=t;let n=0;for(;e>=8&&t>=8&&(e/=2,t/=2,n++,5!==n););this.numOctaves=n,this.tensorCaches={},this.kernelCaches={}}detectImageData(e){const t=new Uint8ClampedArray(4*e.length);for(let n=0;n<e.length;n++)t[4*n]=e[n],t[4*n+1]=e[n],t[4*n+2]=e[n],t[4*n+3]=255;const n=new ImageData(t,this.width,this.height);return this.detect(n)}detect(e){const t=[];for(let n=0;n<this.numOctaves;n++){0===n?t.push(this._applyFilter(e)):t.push(this._downsampleBilinear(t[t.length-1]));for(let e=0;e<2;e++)t.push(this._applyFilter(t[t.length-1]))}const n=[];for(let e=0;e<this.numOctaves;e++)for(let s=0;s<2;s++)0!==e||0!==s?n.push(this._differenceImageBinomial(t[3*e+s],t[3*e+s+1])):n.push(null);const s=[],r=[];for(let e=1;e<n.length-1;e++){if(e%2==1)continue;s.push(e);const t=n[e-1],a=n[e],i=n[e+1],o=this._buildExtremas(e,t,a,i);r.push(o)}const a=this._applyPrune(r,s),i=this._computeOrientationHistograms(a,t,s),o=this._smoothHistograms(i),l=this._computeExtremaAngles(o),u=this._computeExtremaFreak(t,this.numOctaves,a,l),c=this._computeFreakDescriptors(u),h=this._combine(a,l,c),p=h.arraySync();t.forEach((e=>e.dispose())),n.forEach((e=>e&&e.dispose())),r.forEach((e=>e.dispose())),a.dispose(),i.dispose(),o.dispose(),l.dispose(),u.dispose(),c.dispose(),h.dispose();const d=[];for(let e=0;e<p.length;e++)for(let t=0;t<p[e].length;t++)if(0!==p[e][t][0]){const n=p[e][t],s=n.slice(5),r=[];let a=0,i=0;for(let e=0;e<s.length;e++)s[e]&&(a+=1),i+=1,32===i?(r.push(a),a=0,i=0):a*=2;r.push(a),d.push({maxima:n[0]>0,x:n[1],y:n[2],scale:n[3],angle:n[4],descriptors:r})}return d}_combine(e,t,n){if(!this.kernelCaches.combine){const e={variableNames:["extrema","angles","desc"],outputShape:[100,5,5+a],userCode:"\n\t  void main() {\n\t    ivec3 coords = getOutputCoords();\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int propertyIndex = coords[2];\n\n\t    if (propertyIndex == 0) {\n\t      setOutput(getExtrema(bucketIndex, featureIndex, 0));\n\t      return;\n\t    }\n\t    if (propertyIndex == 1) {\n\t      int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t      int octave = extremaIndex + 1; // ref to buildExtrema, it starts at 2nd octave\n\t      float x = getExtrema(bucketIndex, featureIndex, 3);\n\t      float originalX = x * pow(2.0, float(octave)) + pow(2.0, float(octave-1)) - 0.5;\n\t      setOutput(originalX);\n\t      return;\n\t    }\n\t    if (propertyIndex == 2) {\n\t      int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t      int octave = extremaIndex + 1; // ref to buildExtrema, it starts at 2nd octave\n\t      float y = getExtrema(bucketIndex, featureIndex, 2);\n\t      float originalY = y * pow(2.0, float(octave)) + pow(2.0, float(octave-1)) - 0.5;\n\t      setOutput(originalY);\n\t      return;\n\t    }\n\t    if (propertyIndex == 3) {\n\t      int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t      int octave = extremaIndex + 1; // ref to buildExtrema, it starts at 2nd octave\n\t      float inputSigma = pow(2., float(octave));\n\t      setOutput(inputSigma);\n\t      return;\n\t    }\n\t    if (propertyIndex == 4) {\n\t      setOutput(getAngles(bucketIndex, featureIndex));\n\t      return;\n\t    }\n\t    setOutput( getDesc(bucketIndex, featureIndex, propertyIndex - 5));\n\t  }\n\t"};this.kernelCaches.combine=[e]}return s.tidy((()=>{const[r]=this.kernelCaches.combine;return s.backend().compileAndRun(r,[e,t,n])}))}_computeFreakDescriptors(e){if(!this.tensorCaches.computeFreakDescriptors){const t=[],n=[];for(let s=0;s<e.shape[2];s++)for(let r=s+1;r<e.shape[2];r++)t.push(s),n.push(r);const r=s.tensor(t,[t.length]).cast("int32"),a=s.tensor(n,[n.length]).cast("int32");this.tensorCaches.computeFreakDescriptors={positionT:s.keep(s.stack([r,a],1))}}const{positionT:t}=this.tensorCaches.computeFreakDescriptors;if(r.length,!this.kernelCaches.computeFreakDescriptors){const e={variableNames:["freak","p"],outputShape:[100,5,a],userCode:"\n\t  void main() {\n\t    ivec3 coords = getOutputCoords();\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int descIndex = coords[2];\n\n            int p1 = int(getP(descIndex, 0));\n            int p2 = int(getP(descIndex, 1));\n\n\t    float v1 = getFreak(bucketIndex, featureIndex, p1);\n\t    float v2 = getFreak(bucketIndex, featureIndex, p2);\n\n\t    if (v1 < v2 + 0.01) {\n\t      setOutput(1.);\n\t      return;\n\t    }\n\t    setOutput(0.);\n\t  }\n\t"};this.kernelCaches.computeFreakDescriptors=[e]}return s.tidy((()=>{const[n]=this.kernelCaches.computeFreakDescriptors;return s.backend().compileAndRun(n,[e,t])}))}_computeExtremaFreak(e,t,n,a){const i=Math.pow(2,.5),o=1/Math.log(i);this.tensorCaches._computeExtremaFreak||s.tidy((()=>{const e=s.tensor(r);this.tensorCaches._computeExtremaFreak={freakPointsT:s.keep(e)}}));const l=[];for(let e=0;e<t;e++)for(let n=0;n<3;n++)2===n&&e!==t-1||l.push(3*e+n);const{freakPointsT:u}=this.tensorCaches._computeExtremaFreak;if(!this.kernelCaches._computeExtremaFreak){const n={variableNames:["extrema","angles","freakPoints"],outputShape:[100,5,r.length,3],userCode:`\n\t  void main() {\n\t    ivec4 coords = getOutputCoords();\n\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int freakIndex = coords[2];\n\t    int propertyIndex = coords[3];\n\n\t    float freakSigma = getFreakPoints(freakIndex, 0);\n\t    float freakX = getFreakPoints(freakIndex, 1);\n\t    float freakY = getFreakPoints(freakIndex, 2);\n\n\t    int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t    float inputY = getExtrema(bucketIndex, featureIndex, 2);\n\t    float inputX = getExtrema(bucketIndex, featureIndex, 3);\n\n            int inputOctave = extremaIndex + 1; // ref to buildExtrema, it starts at 2nd octave\n\n\t    float inputSigma = pow(2., float(inputOctave));\n\t    float inputAngle = getAngles(bucketIndex, featureIndex);\n\n            // Ensure the scale of the similarity transform is at least "1".\n            float transformScale = max(1., inputSigma * 7.);\n            float cos = transformScale * cos(inputAngle);\n            float sin = transformScale * sin(inputAngle);\n\n\t    float sigma = transformScale * freakSigma;\n\n\t    int octave = int(floor(log(sigma) / ${Math.log(2)}));\n\t    float fscale = log( sigma / pow(2., float(octave))) * ${o};\n            int scale = int(floor(fscale + 0.5)); // round() has problem in ios\n\n            // sgima of last scale = sigma of the first scale in next octave\n            // prefer coarser octaves for efficiency\n            if ( scale == 3 - 1) {\n              octave = octave + 1;\n              scale = 0;\n            }\n            // clip octave and scale\n            if (octave < 0) {\n              octave = 0;\n              scale = 0;\n            }\n            if ( int(octave) >= ${t}) {\n              octave = ${t} - 1;\n              scale = 3 - 1;\n            }\n\n            int imageIndex = octave * 3 + scale;\n\t    if (propertyIndex == 0) {\n\t      setOutput(float(imageIndex));\n\t      return;\n\t    }\n\n\t    // 1) inputX, Y is the coordinate in the octave scale. scale it back respect to the original size (i.e. octave 0)\n\n\t    // 2) compute the freak point location, according to the orientation\n\n            // 3) scale the freak point back into the octave scale\n\n\t    if (propertyIndex == 1) {\n\t      float originalY = inputY * pow(2.0, float(inputOctave)) + pow(2.0, float(inputOctave-1)) - 0.5;\n\t      float y = originalY + freakX * sin + freakY * cos;\n\t      float a = 1.0 / pow(2., float(octave));\n\t      float b = 0.5 * a - 0.5;\n\t      float yp = y * a + b; // y in octave\n\t      setOutput(yp);\n\t      return;\n\t    }\n\t    if (propertyIndex == 2) {\n\t      float originalX = inputX * pow(2.0, float(inputOctave)) + pow(2.0, float(inputOctave-1)) - 0.5;\n\t      float x = originalX + freakX * cos + freakY * -sin;\n\t      float a = 1.0 / pow(2., float(octave));\n\t      float b = 0.5 * a - 0.5;\n\t      float xp = x * a + b; // x in octave\n\t      setOutput(xp);\n\t      return;\n\t    }\n\t  }\n\t`},s=[];for(let t=0;t<l.length;t++){const n=l[t],a=e[n].shape[0],i=e[n].shape[1],o={variableNames:["pixel","position","combine"],outputShape:[100,5,r.length],userCode:`\n\t    void main() {\n\t      ivec3 coords = getOutputCoords();\n\t      int bucketIndex = coords[0];\n\t      int featureIndex = coords[1];\n\t      int freakIndex = coords[2];\n\n\t      int imageIndex = int(getPosition(bucketIndex, featureIndex, freakIndex, 0));\n\t      if (imageIndex != ${n}) {\n\t\tsetOutput(getCombine(bucketIndex, featureIndex, freakIndex));\n\t\treturn;\n\t      }\n\n\t      float yp = getPosition(bucketIndex, featureIndex, freakIndex, 1);\n\t      float xp = getPosition(bucketIndex, featureIndex, freakIndex, 2);\n\n\t      int x0 = int(floor(xp));\n\t      int x1 = x0 + 1;\n\t      int y0 = int(floor(yp));\n\t      int y1 = y0 + 1;\n\n\t      if (x0 < 0 || x1 >= ${i} || y0 < 0 || y1 >= ${a}) {\n\t\tsetOutput(0.);\n\t\treturn;\n\t      }\n\n\t      float f1 = getPixel(y0, x0);\n\t      float f2 = getPixel(y0, x1);\n\t      float f3 = getPixel(y1, x0);\n\t      float f4 = getPixel(y1, x1);\n\n\t      float x1f = float(x1);\n\t      float y1f = float(y1);\n\t      float x0f = float(x0);\n\t      float y0f = float(y0);\n\n\t      // ratio for interpolation between four neighbouring points\n\t      float value = (x1f - xp) * (y1f - yp) * f1\n\t\t\t  + (xp - x0f) * (y1f - yp) * f2\n\t\t\t  + (x1f - xp) * (yp - y0f) * f3\n\t\t\t  + (xp - x0f) * (yp - y0f) * f4;\n\n\t      setOutput(value);\n\t    }\n\t  `};s.push(o)}this.kernelCaches._computeExtremaFreak=[n,s]}return s.tidy((()=>{const[t,i]=this.kernelCaches._computeExtremaFreak,o=s.backend().compileAndRun(t,[n,a,u]);let c=s.zeros([100,5,r.length]);for(let t=0;t<l.length;t++){const n=l[t];c=s.backend().compileAndRun(i[t],[e[n],o,c])}return c}))}_computeExtremaAngles(e){if(!this.kernelCaches.computeExtremaAngles){const e={variableNames:["histogram"],outputShape:[100,5],userCode:`\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\n\t    int maxIndex = 0;\n\t    for (int i = 1; i < 36; i++) {\n\t      if (getHistogram(bucketIndex, featureIndex, i) > getHistogram(bucketIndex, featureIndex, maxIndex)) {\n\t\tmaxIndex = i;\n\t      }\n\t    }\n\n\t    int prev = imod(maxIndex - 1 + 36, 36);\n\t    int next = imod(maxIndex + 1, 36);\n\n\t    /**\n\t     * Fit a quatratic to 3 points. The system of equations is:\n\t     *\n\t     * y0 = A*x0^2 + B*x0 + C\n\t     * y1 = A*x1^2 + B*x1 + C\n\t     * y2 = A*x2^2 + B*x2 + C\n\t     *\n\t     * This system of equations is solved for A,B,C.\n\t     */\n\t    float p10 = float(maxIndex - 1);\n\t    float p11 = getHistogram(bucketIndex, featureIndex, prev); \n\t    float p20 = float(maxIndex);\n\t    float p21 = getHistogram(bucketIndex, featureIndex, maxIndex); \n\t    float p30 = float(maxIndex + 1);\n\t    float p31 = getHistogram(bucketIndex, featureIndex, next); \n\n\t    float d1 = (p30-p20)*(p30-p10);\n\t    float d2 = (p10-p20)*(p30-p10);\n\t    float d3 = p10-p20;\n\n\t    // If any of the denominators are zero then, just use maxIndex.\n            float fbin = float(maxIndex);\n\t    if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {\n\t      float a = p10*p10;\n\t      float b = p20*p20;\n\n\t      // Solve for the coefficients A,B,C\n\t      float A = ((p31-p21)/d1)-((p11-p21)/d2);\n\t      float B = ((p11-p21)+(A*(b-a)))/d3;\n\t      float C = p11-(A*a)-(B*p10);\n\t      fbin = -B / (2. * A);\n\t    }\n\n\t    float an =  2.0 * ${Math.PI} * ((fbin + 0.5 + 36.) / 36.);\n\n\t    for (int i = 0; i < 3; i++) { // stupid modula, while loop not support\n\t      if (an > 2.0 * ${Math.PI}) {\n\t\tan -= 2.0 * ${Math.PI};\n\t      }\n\t    }\n\t    setOutput(an);\n\t  }\n\t`};this.kernelCaches.computeExtremaAngles=e}return s.tidy((()=>{const t=this.kernelCaches.computeExtremaAngles;return s.backend().compileAndRun(t,[e])}))}_computeOrientationHistograms(e,t,n){const r=[];for(let e=0;e<n.length;e++){const s=n[e],a=3*Math.floor(s/2)+(s%2+1);r.push(t[a])}this.tensorCaches.orientationHistograms||s.tidy((()=>{const e=Math.max(1,3),t=-1/(2*e*e),n=1.5*e,a=Math.ceil(n),i=[];for(let e=-a;e<=a;e++)for(let s=-a;s<=a;s++){const r=s*s+e*e;if(r<=n*n){const n=r*t,a=.0013888888*(720+n*(720+n*(360+n*(120+n*(30+n*(6+n))))));i.push([e,s,a])}}const o=[];for(let e=0;e<r.length;e++)o.push([r[e].shape[0],r[e].shape[1]]);this.tensorCaches.orientationHistograms={radialPropertiesT:s.keep(s.tensor(i,[i.length,3])),imageSizesT:s.keep(s.tensor(o,[o.length,2]))}}));const{radialPropertiesT:a,imageSizesT:i}=this.tensorCaches.orientationHistograms;if(!this.kernelCaches.computeOrientationHistograms){const e=[];for(let t=0;t<r.length;t++)e.push("image"+t);let t="float getPixel(int gaussianIndex, int y, int x) {";for(let e=0;e<r.length;e++)t+=`\n\t  if (gaussianIndex == ${e}) {\n\t    return getImage${e}(y, x);\n\t  }\n\t`;t+="}";const n={variableNames:[...e,"imageSizes","extrema","radial"],outputShape:[100,5,a.shape[0],2],userCode:`\n\t  ${t}\n\n\t  void main() {\n\t    ivec4 coords = getOutputCoords();\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int radialIndex = coords[2];\n\t    int propertyIndex = coords[3];\n\n\t    int radialY = int(getRadial(radialIndex, 0));\n\t    int radialX = int(getRadial(radialIndex, 1));\n\t    float radialW = getRadial(radialIndex, 2);\n\n\t    int extremaIndex = int(getExtrema(bucketIndex, featureIndex, 1));\n\t    int y = int(getExtrema(bucketIndex, featureIndex, 2));\n\t    int x = int(getExtrema(bucketIndex, featureIndex, 3));\n\n\t    int imageHeight = int(getImageSizes(extremaIndex, 0));\n\t    int imageWidth = int(getImageSizes(extremaIndex, 1));\n\n\t    int xp = x + radialX;\n\t    int yp = y + radialY;\n\n\t    if (xp < 1 || xp >= imageWidth - 1 || yp < 1 || yp >= imageHeight - 1) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    float dy = getPixel(extremaIndex, yp+1, xp) - getPixel(extremaIndex, yp-1, xp);\n\t    float dx = getPixel(extremaIndex, yp, xp+1) - getPixel(extremaIndex, yp, xp-1);\n\n\t    if (propertyIndex == 0) {\n\t      float angle = atan(dy, dx) + ${Math.PI};\n\t      float fbin = angle * 36. * 0.159154943091895;\n\t      setOutput(fbin);\n\t      return;\n\t    }\n\n\t    if (propertyIndex == 1) {\n\t      float mag = sqrt(dx * dx + dy * dy);\n\t      float magnitude = radialW * mag;\n\t      setOutput(magnitude);\n\t      return;\n\t    }\n\t  }\n\n\t`},s={variableNames:["fbinMag"],outputShape:[100,5,36],userCode:`\n\t  void main() {\n\t    ivec3 coords = getOutputCoords();\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int binIndex = coords[2];\n\n\t    float sum = 0.;\n\t    for (int i = 0; i < ${a.shape[0]}; i++) {\n\t      float fbin = getFbinMag(bucketIndex, featureIndex, i, 0);\n\t      int bin = int(floor(fbin - 0.5));\n\t      int b1 = imod(bin + 36, 36);\n\t      int b2 = imod(bin + 1 + 36, 36);\n\n\t      if (b1 == binIndex || b2 == binIndex) {\n\t\tfloat magnitude = getFbinMag(bucketIndex, featureIndex, i, 1);\n\t\tfloat w2 = fbin - float(bin) - 0.5;\n\t\tfloat w1 = w2 * -1. + 1.;\n\n\t\tif (b1 == binIndex) {\n\t\t  sum += w1 * magnitude;\n\t\t}\n\t\tif (b2 == binIndex) {\n\t\t  sum += w2 * magnitude;\n\t\t}\n\t      }\n\t    }\n\t    setOutput(sum);\n\t  }\n\t`};this.kernelCaches.computeOrientationHistograms=[n,s]}return s.tidy((()=>{const[t,n]=this.kernelCaches.computeOrientationHistograms,o=s.backend().compileAndRun(t,[...r,i,e,a]);return s.backend().compileAndRun(n,[o])}))}_smoothHistograms(e){if(!this.kernelCaches.smoothHistograms){const e={variableNames:["histogram"],outputShape:[100,5,36],userCode:"\n\t  void main() {\n\t    ivec3 coords = getOutputCoords();\n\n\t    int bucketIndex = coords[0];\n\t    int featureIndex = coords[1];\n\t    int binIndex = coords[2];\n\n\t    int prevBin = imod(binIndex - 1 + 36, 36);\n\t    int nextBin = imod(binIndex + 1, 36);\n\n            float result = 0.274068619061197 * getHistogram(bucketIndex, featureIndex, prevBin) + 0.451862761877606 * getHistogram(bucketIndex, featureIndex, binIndex) + 0.274068619061197 * getHistogram(bucketIndex, featureIndex, nextBin);\n\n\t    setOutput(result);\n\t  }\n\t"};this.kernelCaches.smoothHistograms=e}return s.tidy((()=>{const t=this.kernelCaches.smoothHistograms;for(let n=0;n<5;n++)e=s.backend().compileAndRun(t,[e]);return e}))}_applyPrune(e,t){const n=[],r=[];for(let e=0;e<100;e++){r.push([]),n.push([]);for(let t=0;t<5;t++)r[e].push([0,0,0,0]),n[e].push(0)}for(let t=0;t<e.length;t++){const s=e[t],a=s.arraySync(),i=s.shape[0],o=s.shape[1],l=o/10,u=i/10;for(let e=0;e<i;e++)for(let s=0;s<o;s++){const i=Math.floor(s/l),o=10*Math.floor(e/u)+i,c=a[e][s],h=Math.abs(c);let p=5;for(;p>=1&&h>n[o][p-1];)p-=1;if(p<5){for(let e=4;e>=p+1;e--)n[o][e]=n[o][e-1],r[o][e][0]=r[o][e-1][0],r[o][e][1]=r[o][e-1][1],r[o][e][2]=r[o][e-1][2],r[o][e][3]=r[o][e-1][3];n[o][p]=h,r[o][p][0]=c,r[o][p][1]=t,r[o][p][2]=e,r[o][p][3]=s}}}return s.tensor(r,[r.length,r[0].length,r[0][0].length])}_buildExtremas(e,t,n,r){const a=n.shape[0],i=n.shape[1],o="w"+i;if(this.kernelCaches.buildExtremas||(this.kernelCaches.buildExtremas={}),!this.kernelCaches.buildExtremas[o]){const e={variableNames:["image0","image1","image2"],outputShape:[a,i],userCode:`\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\n\t    int y = coords[0];\n\t    int x = coords[1];\n\n\t    // Step 1: find local maxima/minima\n\t    if (y == 0 || y == ${a} - 1 || x == 0 || x == ${i} - 1) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\t    if (getImage1(y, x) * getImage1(y, x) < 9.) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    bool isMax = true;\n\t    for (int dy = -1; dy <= 1; dy++) {\n\t      for (int dx = -1; dx <= 1; dx++) {\n\t        if (getImage1(y, x) < getImage0(y+dy, x+dx)) {\n\t\t  isMax = false;\n\t\t}\n\t        if (getImage1(y, x) < getImage2(y+dy, x+dx)) {\n\t\t  isMax = false;\n\t\t}\n\t        if (getImage1(y, x) < getImage1(y+dy, x+dx)) {\n\t\t  isMax = false;\n\t\t}\n\t      }\n\t    }\n\t    bool isMin = false;\n\t    if (!isMax) {\n\t      isMin = true;\n\n\t      for (int dy = -1; dy <= 1; dy++) {\n\t\tfor (int dx = -1; dx <= 1; dx++) {\n\t\t  if (getImage1(y, x) > getImage0(y+dy, x+dx)) {\n\t\t    isMin = false;\n\t\t  }\n\t\t  if (getImage1(y, x) > getImage2(y+dy, x+dx)) {\n\t\t    isMin = false;\n\t\t  }\n\t\t  if (getImage1(y, x) > getImage1(y+dy, x+dx)) {\n\t\t    isMin = false;\n\t\t  }\n\t\t}\n\t      }\n\t    }\n\n\t    if (!isMax && !isMin) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    // Step 2: sub-pixel refinement (I'm not sure what that means. Any educational ref?)\n\t    \n\t    // Compute spatial derivatives\n\t    float dx = 0.5 * (getImage1(y, x+1) - getImage1(y, x-1));\n\t    float dy = 0.5 * (getImage1(y+1, x) - getImage1(y-1, x));\n\t    float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);\n\t    float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);\n\t    float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));\n\n\t    // Compute scale derivates\n\t    float ds = 0.5 * (getImage2(y, x) - getImage0(y, x)); \n\t    float dss = getImage2(y, x) + getImage0(y, x) - 2. * getImage1(y, x);\n\t    float dxs = 0.25 * ((getImage0(y, x-1) - getImage0(y, x+1)) + (getImage2(y, x+1) - getImage2(y, x-1)));\n\t    float dys = 0.25 * ((getImage0(y-1, x) - getImage0(y+1, x)) + (getImage2(y+1, x) - getImage2(y-1, x)));\n\n\t    // Solve Hessian A * u = b;\n\t    float A0 = dxx;\n\t    float A1 = dxy;\n\t    float A2 = dxs;\n\t    float A3 = dxy;\n\t    float A4 = dyy;\n\t    float A5 = dys;\n\t    float A6 = dxs;\n\t    float A7 = dys;\n\t    float A8 = dss;\n\t    float b0 = -dx;\n\t    float b1 = -dy;\n\t    float b2 = -ds;\n\n\t    float detA = A0 * A4 * A8\n\t\t       - A0 * A5 * A5\n\t\t       - A4 * A2 * A2\n\t\t       - A8 * A1 * A1\n\t\t       + 2. * A1 * A2 * A5;\n\n\t    // B = inverse of A\n\t    float B0 = A4 * A8 - A5 * A7;\n\t    float B1 = A2 * A7 - A1 * A8;\n\t    float B2 = A1 * A5 - A2 * A4;\n\t    float B3 = B1;\n\t    float B4 = A0 * A8 - A2 * A6;\n\t    float B5 = A2 * A3 - A0 * A5;\n\t    float B6 = B2;\n\t    float B7 = B5;\n\t    float B8 = A0 * A4 - A1 * A3;\n\n\t    float u0 = (B0 * b0 + B1 * b1 + B2 * b2) / detA;\n\t    float u1 = (B3 * b0 + B4 * b1 + B5 * b2) / detA;\n\t    float u2 = (B6 * b0 + B7 * b1 + B8 * b2) / detA;\n\n\t    // If points move too much in the sub-pixel update, then the point probably unstable.\n\t    if (u0 * u0 + u1 * u1 > 9.) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    // compute edge score\n\t    float det = (dxx * dyy) - (dxy * dxy);\n\n\t    if (abs(det) < 0.0001) { // determinant undefined. no solution\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    float edgeScore = (dxx + dyy) * (dxx + dyy) / det;\n\n\t    if (abs(edgeScore) >= 6.25 ) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    float score = getImage1(y, x) - (b0 * u0 + b1 * u1 + b2 * u2);\n\n\t    if (score * score < 9.) {\n\t      setOutput(0.);\n\t      return;\n\t    }\n\n\t    setOutput(score);\n\t  }\n\t`};this.kernelCaches.buildExtremas[o]=e}return s.tidy((()=>{const e=this.kernelCaches.buildExtremas[o];return Math.floor(t.shape[1]/2)===n.shape[1]&&(t=this._downsampleBilinear(t)),s.backend().compileAndRun(e,[t,n,r])}))}_differenceImageBinomial(e,t){return s.tidy((()=>e.sub(t)))}_applyFilter(e){const t=e.shape[0],n=e.shape[1],r="w"+n;if(this.kernelCaches.applyFilter||(this.kernelCaches.applyFilter={}),!this.kernelCaches.applyFilter[r]){const e="\n\tint imax(int a, int b) {\n\t  if (a > b) return a;\n\t  return b;\n\t}\n\tint imin(int a, int b) {\n\t  if (a < b) return a;\n\t  return b;\n\t}\n\n      ",s={variableNames:["p"],outputShape:[t,n],userCode:`\n \t  ${e}\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\n\t    float sum = getP(coords[0], imax(0, coords[1]-2));\n\t    sum += getP(coords[0], imax(0, coords[1]-1)) * 4.;\n\t    sum += getP(coords[0], coords[1]) * 6.;\n\t    sum += getP(coords[0], imin(${n}-1, coords[1]+1)) * 4.;\n\t    sum += getP(coords[0], imin(${n}-1, coords[1]+2));\n\t    setOutput(sum);\n\t  }\n\t`},a={variableNames:["p"],outputShape:[t,n],userCode:`\n \t  ${e}\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\n\t    float sum = getP(imax(coords[0]-2, 0), coords[1]);\n\t    sum += getP(imax(coords[0]-1, 0), coords[1]) * 4.;\n\t    sum += getP(coords[0], coords[1]) * 6.;\n\t    sum += getP(imin(coords[0]+1, ${t}-1), coords[1]) * 4.;\n\t    sum += getP(imin(coords[0]+2, ${t}-1), coords[1]);\n\t    sum /= 256.;\n\t    setOutput(sum);\n\t  }\n\t`};this.kernelCaches.applyFilter[r]=[s,a]}return s.tidy((()=>{const[t,n]=this.kernelCaches.applyFilter[r],a=s.backend().compileAndRun(t,[e]);return s.backend().compileAndRun(n,[a])}))}_downsampleBilinear(e){const t=e.shape[0],n=e.shape[1],r="w"+n;if(this.kernelCaches.downsampleBilinear||(this.kernelCaches.downsampleBilinear={}),!this.kernelCaches.downsampleBilinear[r]){const e={variableNames:["p"],outputShape:[Math.floor(t/2),Math.floor(n/2)],userCode:"\n\t  void main() {\n\t    ivec2 coords = getOutputCoords();\n\t    int y = coords[0] * 2;\n\t    int x = coords[1] * 2;\n\t    float sum = getP(y, x) + getP(y+1,x) + getP(y, x+1) + getP(y+1,x+1);\n\t    sum *= 0.25;\n\t    setOutput(sum);\n\t  }\n\t"};this.kernelCaches.downsampleBilinear[r]=e}return s.tidy((()=>{const t=this.kernelCaches.downsampleBilinear[r];return s.backend().compileAndRun(t,[e])}))}}}},793:e=>{const t=[{sigma:.55,points:[[-1,0],[-.5,-.866025],[.5,-.866025],[1,-0],[.5,.866025],[-.5,.866025]]},{sigma:.475,points:[[0,.930969],[-.806243,.465485],[-.806243,-.465485],[-0,-.930969],[.806243,-.465485],[.806243,.465485]]},{sigma:.4,points:[[.847306,-0],[.423653,.733789],[-.423653,.733789],[-.847306,0],[-.423653,-.733789],[.423653,-.733789]]},{sigma:.325,points:[[-0,-.741094],[.641806,-.370547],[.641806,.370547],[0,.741094],[-.641806,.370547],[-.641806,-.370547]]},{sigma:.25,points:[[-.595502,0],[-.297751,-.51572],[.297751,-.51572],[.595502,-0],[.297751,.51572],[-.297751,.51572]]},{sigma:.175,points:[[0,.362783],[-.314179,.181391],[-.314179,-.181391],[-0,-.362783],[.314179,-.181391],[.314179,.181391]]},{sigma:.1,points:[[0,0]]}],n=[];for(let e=0;e<t.length;e++){const s=t[e].sigma;for(let r=0;r<t[e].points.length;r++){const a=t[e].points[r];n.push([s,a[0],a[1]])}}e.exports={FREAKPOINTS:n}},508:(e,t,n)=>{const{resize:s}=n(140);e.exports={buildImageList:e=>{const t=[];let n=28/Math.min(e.width,e.height);for(;;)if(t.push(n),n*=Math.pow(2,1/3),n>=.95){n=1;break}t.push(n),t.reverse();const r=[];for(let n=0;n<t.length;n++)e.width,t[n],e.height,t[n],r.push(Object.assign(s({image:e,ratio:t[n]}),{scale:t[n]}));return r}}},233:e=>{e.exports={compute:e=>{const{v1:t,v2:n}=e;let s=0;for(let e=0;e<t.length;e++){let i=(t[e]^n[e])>>>0;s+=(a=void 0,((a=((a=((a=((a=(r=i)-(r>>1&1431655765))>>2&858993459)+(858993459&a))>>4)+a&252645135)>>8)+a&16711935)>>16)+a&65535)}var r,a;return s}}},723:(e,t,n)=>{const{compute:s}=n(233),{createRandomizer:r}=n(48),a=e=>{const{points:t,pointIndexes:n,centerPointIndex:s,randomizer:r}=e;let i=!1;(n.length<=8||n.length<=16)&&(i=!0);const o={};if(!i){const e=_computeKMedoids({points:t,pointIndexes:n,randomizer:r});for(let t=0;t<e.length;t++)void 0===o[n[e[t]]]&&(o[n[e[t]]]=[]),o[n[e[t]]].push(n[t])}1===Object.keys(o).length&&(i=!0);const l={centerPointIndex:s};if(i){l.leaf=!0,l.pointIndexes=[];for(let e=0;e<n.length;e++)l.pointIndexes.push(n[e]);return l}return l.leaf=!1,l.children=[],Object.keys(o).forEach((e=>{l.children.push(a({points:t,pointIndexes:o[e],centerPointIndex:e,randomizer:r}))})),l};_computeKMedoids=e=>{const{points:t,pointIndexes:n,randomizer:r}=e,a=[];for(let e=0;e<n.length;e++)a.push(e);let i=Number.MAX_SAFE_INTEGER,o=-1;const l=[];for(let e=0;e<128;e++){r.arrayShuffle({arr:a,sampleSize:8});let u=0;const c=[];for(let e=0;e<n.length;e++){let r=Number.MAX_SAFE_INTEGER;for(let i=0;i<8;i++){const o=n[a[i]],l=s({v1:t[n[e]].descriptors,v2:t[o].descriptors});l<r&&(c[e]=a[i],r=l)}u+=r}l.push(c),u<i&&(i=u,o=e)}return l[o]},e.exports={build:({points:e})=>{const t=[];for(let n=0;n<e.length;n++)t.push(n);const n=r();return{rootNode:a({points:e,pointIndexes:t,centerPointIndex:null,randomizer:n})}}}},589:(e,t,n)=>{const{Cumsum:s}=n(535),r=22,a=({image:e,cx:t,cy:n,sdThresh:s,imageDataCumsum:a,imageDataSqrCumsum:i})=>{if(t-r<0||t+r>=e.width)return null;if(n-r<0||n+r>=e.height)return null;const o=2025;let l=a.query(t-r,n-r,t+r,n+r);l/=o;let u=i.query(t-r,n-r,t+r,n+r);return u-=2*l*a.query(t-r,n-r,t+r,n+r),u+=o*l*l,u/o<s*s?null:(u=Math.sqrt(u),u)},i=e=>{const{image:t,cx:n,cy:s,vlen:a,tx:i,ty:o,imageDataCumsum:l,imageDataSqrCumsum:u}=e,{data:c,width:h,height:p}=t,d=r;if(n-d<0||n+d>=h)return null;if(s-d<0||s+d>=p)return null;let f=l.query(n-d,s-d,n+d,s+d),m=u.query(n-d,s-d,n+d,s+d),g=0,y=(s-d)*h+(n-d),b=(o-d)*h+(i-d),x=h-45;for(let e=0;e<45;e++){for(let e=0;e<45;e++)g+=c[y]*c[b],y+=1,b+=1;y+=x,b+=x}let w=l.query(i-d,o-d,i+d,o+d);w/=2025,g-=w*f;let k=m-f*f/2025;return 0==k?null:(k=Math.sqrt(k),1*g/(a*k))};e.exports={extract:e=>{const{data:t,width:n,height:o,scale:l}=e,u=[n*o];for(let e=0;e<u.length;e++)u[e]=!1;const c=new Float32Array(t.length);for(let e=0;e<n;e++)c[e]=-1,c[n*(o-1)+e]=-1;for(let e=0;e<o;e++)c[e*n]=-1,c[e*n+n-1]=-1;for(let e=1;e<n-1;e++)for(let s=1;s<o-1;s++){let r=e+n*s,a=0,i=0;for(let e=-1;e<=1;e++)a+=t[r+n*e+1]-t[r+n*e-1],i+=t[r+n+e]-t[r-n+e];a/=768,i/=768,c[r]=Math.sqrt((a*a+i*i)/2)}const h=new Uint32Array(1e3);for(let e=0;e<1e3;e++)h[e]=0;const p=[-1,1,-n,n];let d=0;for(let e=1;e<n-1;e++)for(let t=1;t<o-1;t++){let s=e+n*t,r=!0;for(let e=0;e<p.length;e++)if(c[s]<=c[s+p[e]]){r=!1;break}if(r){let e=Math.floor(1e3*c[s]);e>999&&(e=999),e<0&&(e=0),h[e]+=1,d+=1,u[s]=!0}}const f=.02*n*o;let m=999,g=0;for(;m>=0&&(g+=h[m],!(g>f));)m--;for(let e=0;e<u.length;e++)u[e]&&1e3*c[e]<m&&(u[e]=!1);const y=[];for(let e=0;e<t.length;e++)y[e]=t[e]*t[e];const b=new s(t,n,o),x=new s(y,n,o),w=new Float32Array(t.length);for(let t=0;t<n;t++)for(let s=0;s<o;s++){const r=s*n+t;if(!u[r]){w[r]=1;continue}const o=a({image:e,cx:t,cy:s,sdThresh:5,imageDataCumsum:b,imageDataSqrCumsum:x});if(null===o){w[r]=1;continue}let l=-1;for(let n=-10;n<=10;n++){for(let r=-10;r<=10;r++){if(r*r+n*n<=4)continue;const a=i({image:e,cx:t+r,cy:s+n,vlen:o,tx:t,ty:s,imageDataCumsum:b,imageDataSqrCumsum:x});if(null!==a&&a>l&&(l=a,l>.95))break}if(l>.95)break}w[r]=l}return(e=>{let{image:t,featureMap:n,templateSize:s,searchSize:r,occSize:o,maxSimThresh:l,minSimThresh:u,sdThresh:c,imageDataCumsum:h,imageDataSqrCumsum:p}=e;const{data:d,width:f,height:m,scale:g}=t;o=Math.floor(Math.min(t.width,t.height)/10);const y=3*(2*s+1),b=Math.floor(f/y),x=Math.floor(m/y);let w=Math.floor(f/o)*Math.floor(m/o)+b*x;const k=[],v=new Float32Array(d.length);for(let e=0;e<v.length;e++)v[e]=n[e];let I=0;for(;I<w;){let e=l,n=-1,d=-1;for(let t=0;t<m;t++)for(let s=0;s<f;s++)v[t*f+s]<e&&(e=v[t*f+s],n=s,d=t);if(-1===n)break;const g=a({image:t,cx:n,cy:d,sdThresh:0,imageDataCumsum:h,imageDataSqrCumsum:p});if(null===g){v[d*f+n]=1;continue}if(g/(2*s+1)<c){v[d*f+n]=1;continue}let y=1,b=-1;for(let s=-r;s<=r;s++){for(let a=-r;a<=r;a++){if(a*a+s*s>r*r)continue;if(0===a&&0===s)continue;const o=i({image:t,vlen:g,cx:n+a,cy:d+s,tx:n,ty:d,imageDataCumsum:h,imageDataSqrCumsum:p});if(null!==o){if(o<y&&(y=o,y<u&&y<e))break;if(o>b&&(b=o,b>.99))break}}if(y<u&&y<e||b>.99)break}if(y<u&&y<e||b>.99)v[d*f+n]=1;else{k.push({x:n,y:d}),I+=1;for(let e=-o;e<=o;e++)for(let t=-o;t<=o;t++)d+e<0||d+e>=m||n+t<0||n+t>=f||(v[(d+e)*f+(n+t)]=1)}}return k})({image:e,featureMap:w,templateSize:r,searchSize:2,occSize:16,maxSimThresh:.9,minSimThresh:.55,sdThresh:8,imageDataCumsum:b,imageDataSqrCumsum:x})}}},535:e=>{e.exports={Cumsum:class{constructor(e,t,n){this.cumsum=[];for(let e=0;e<n;e++){this.cumsum.push([]);for(let n=0;n<t;n++)this.cumsum[e].push(0)}this.cumsum[0][0]=e[0];for(let n=1;n<t;n++)this.cumsum[0][n]=this.cumsum[0][n-1]+e[n];for(let s=1;s<n;s++)this.cumsum[s][0]=this.cumsum[s-1][0]+e[s*t];for(let s=1;s<n;s++)for(let n=1;n<t;n++)this.cumsum[s][n]=e[s*t+n]+this.cumsum[s-1][n]+this.cumsum[s][n-1]-this.cumsum[s-1][n-1]}query(e,t,n,s){let r=this.cumsum[s][n];return t>0&&(r-=this.cumsum[t-1][n]),e>0&&(r-=this.cumsum[s][e-1]),e>0&&t>0&&(r+=this.cumsum[t-1][e-1]),r}}}},140:e=>{e.exports={downsampleBilinear:({image:e})=>{const{data:t,width:n,height:s}=e,r=Math.floor(n/2),a=Math.floor(s/2),i=new Float32Array(r*a),o=[0,1,n,n+1];for(let e=0;e<a;e++)for(let s=0;s<r;s++){let a=2*e*n+2*s,l=0;for(let e=0;e<o.length;e++)l+=t[a+o[e]];l*=.25,i[e*r+s]=l}return{data:i,width:r,height:a}},upsampleBilinear:({image:e,padOneWidth:t,padOneHeight:n})=>{const{width:s,height:r,data:a}=e,i=2*e.width+(t?1:0),o=2*e.height+(n?1:0),l=new Float32Array(i*o);for(let e=0;e<i;e++){const t=.5*e-.25;let n=Math.floor(t),u=Math.ceil(t);n<0&&(n=0),u>=s&&(u=s-1);for(let c=0;c<o;c++){const o=.5*c-.25;let h=Math.floor(o),p=Math.ceil(o);h<0&&(h=0),p>=r&&(p=r-1);const d=(u-t)*(p-o)*a[h*s+n]+(u-t)*(o-h)*a[p*s+n]+(t-n)*(p-o)*a[h*s+u]+(t-n)*(o-h)*a[p*s+u];l[c*i+e]=d}}return{data:l,width:i,height:o}},resize:({image:e,ratio:t})=>{const n=Math.round(e.width*t),s=Math.round(e.height*t),r=new Uint8Array(n*s);for(let a=0;a<n;a++){let i=Math.round(1*a/t),o=Math.round(1*(a+1)/t)-1;o>=e.width&&(o=e.width-1);for(let l=0;l<s;l++){let s=Math.round(1*l/t),u=Math.round(1*(l+1)/t)-1;u>=e.height&&(u=e.height-1);let c=0,h=0;for(let t=i;t<=o;t++)for(let n=s;n<=u;n++)c+=1*e.data[n*e.width+t],h+=1;r[l*n+a]=Math.floor(c/h)}}return{data:r,width:n,height:s}}}},48:e=>{e.exports={createRandomizer:()=>({seed:1234,arrayShuffle(e){const{arr:t,sampleSize:n}=e;for(let e=0;e<n;e++){this.seed=(214013*this.seed+2531011)%(1<<31);let n=this.seed>>16&32767;n%=t.length;let s=t[e];t[e]=t[n],t[n]=s}},nextInt(e){this.seed=(214013*this.seed+2531011)%(1<<31);let t=this.seed>>16&32767;return t%=e,t}})}},906:()=>{},993:()=>{},352:()=>{},312:()=>{},758:()=>{}},t={};function n(s){if(t[s])return t[s].exports;var r=t[s]={id:s,loaded:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{const{extract:e}=n(589),{Detector:t}=n(416),{build:s}=n(723),{buildImageList:r}=n(508),a=n(563);onmessage=e=>{const{data:t}=e;if("compile"===t.type){console.log("worker compile...");const{targetImages:e}=t,n=100/e.length;let s=0;const a=[];for(let t=0;t<e.length;t++){const l=e[t],u=r(l),c=n/u.length/2;console.log("compiling tracking...",t);const h=o(u,(e=>{console.log("done tracking",t,e),s+=c,postMessage({type:"progress",percent:s})}));console.log("compiling matching...",t);const p=i(u,(e=>{console.log("done matching",t,e),s+=c,postMessage({type:"progress",percent:s})}));a.push({targetImage:l,imageList:u,trackingData:h,matchingData:p})}postMessage({type:"compileDone",list:a})}};const i=(e,n)=>{const r=[];for(let i=0;i<e.length;i++){const o=e[i],l=new t(o.width,o.height);a.tidy((()=>{const e=a.tensor(o.data,[o.data.length]).reshape([o.height,o.width]),t=l.detect(e),u=s({points:t});r.push({points:t,pointsCluster:u,width:o.width,height:o.height,scale:o.scale}),n(i)}))}return r},o=(t,n)=>{const s=[];for(let r=0;r<t.length;r++){const a=t[r],i=e(a),o={scale:a.scale,width:a.width,height:a.height,points:i};s.push(o),n(r)}return s}})()})();